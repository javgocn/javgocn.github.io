const e=JSON.parse('{"key":"v-3f0132a2","path":"/md/Spring/SpringFramework/01-%E6%A0%B8%E5%BF%83-IOC.html","title":"01-核心-IOC","lang":"zh-CN","frontmatter":{"title":"01-核心-IOC","description":"1.介绍 Spring IoC 容器和 Beans 控制反转（IoC）是一种设计原则，用于将对象之间的依赖关系从程序代码中解耦。在 Spring 框架中，IoC 的实现被称为依赖注入（DI）。 DI 的核心思想是，对象的依赖关系不再由对象自己创建和管理，而是由外部容器（如 Spring IoC 容器）来负责。具体来说，对象通过以下方式定义其依赖关系： ...","head":[["meta",{"property":"og:url","content":"https://www.javgo.cn/md/Spring/SpringFramework/01-%E6%A0%B8%E5%BF%83-IOC.html"}],["meta",{"property":"og:site_name","content":"JavGo"}],["meta",{"property":"og:title","content":"01-核心-IOC"}],["meta",{"property":"og:description","content":"1.介绍 Spring IoC 容器和 Beans 控制反转（IoC）是一种设计原则，用于将对象之间的依赖关系从程序代码中解耦。在 Spring 框架中，IoC 的实现被称为依赖注入（DI）。 DI 的核心思想是，对象的依赖关系不再由对象自己创建和管理，而是由外部容器（如 Spring IoC 容器）来负责。具体来说，对象通过以下方式定义其依赖关系： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-10T16:14:41.000Z"}],["meta",{"property":"article:author","content":"Mr.JavGo"}],["meta",{"property":"article:modified_time","content":"2023-11-10T16:14:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01-核心-IOC\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-10T16:14:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.JavGo\\",\\"url\\":\\"https://www.javgo.cn\\",\\"email\\":\\"javgocn@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"1.介绍 Spring IoC 容器和 Beans","slug":"_1-介绍-spring-ioc-容器和-beans","link":"#_1-介绍-spring-ioc-容器和-beans","children":[]},{"level":2,"title":"2.容器概述","slug":"_2-容器概述","link":"#_2-容器概述","children":[{"level":3,"title":"2.1 配置元数据","slug":"_2-1-配置元数据","link":"#_2-1-配置元数据","children":[]},{"level":3,"title":"2.2 实例化容器","slug":"_2-2-实例化容器","link":"#_2-2-实例化容器","children":[]},{"level":3,"title":"2.3 使用容器","slug":"_2-3-使用容器","link":"#_2-3-使用容器","children":[]}]},{"level":2,"title":"3.Bean 概述","slug":"_3-bean-概述","link":"#_3-bean-概述","children":[{"level":3,"title":"3.1 BeanDefinition","slug":"_3-1-beandefinition","link":"#_3-1-beandefinition","children":[]},{"level":3,"title":"3.2 DefaultListableBeanFactory","slug":"_3-2-defaultlistablebeanfactory","link":"#_3-2-defaultlistablebeanfactory","children":[]},{"level":3,"title":"3.3 命名 Beans","slug":"_3-3-命名-beans","link":"#_3-3-命名-beans","children":[]},{"level":3,"title":"3.4 实例化 Beans","slug":"_3-4-实例化-beans","link":"#_3-4-实例化-beans","children":[]}]},{"level":2,"title":"4.依赖关系","slug":"_4-依赖关系","link":"#_4-依赖关系","children":[{"level":3,"title":"4.1 依赖注入","slug":"_4-1-依赖注入","link":"#_4-1-依赖注入","children":[]},{"level":3,"title":"4.2 依赖关系与配置细节","slug":"_4-2-依赖关系与配置细节","link":"#_4-2-依赖关系与配置细节","children":[]},{"level":3,"title":"4.3 使用 @DependsOn","slug":"_4-3-使用-dependson","link":"#_4-3-使用-dependson","children":[]},{"level":3,"title":"4.4 延迟初始化 Bean","slug":"_4-4-延迟初始化-bean","link":"#_4-4-延迟初始化-bean","children":[]},{"level":3,"title":"4.5 自动注入","slug":"_4-5-自动注入","link":"#_4-5-自动注入","children":[]},{"level":3,"title":"4.6 方法注入","slug":"_4-6-方法注入","link":"#_4-6-方法注入","children":[]}]},{"level":2,"title":"5.Bean 作用域","slug":"_5-bean-作用域","link":"#_5-bean-作用域","children":[{"level":3,"title":"5.1 单例作用域 (The Singleton Scope)","slug":"_5-1-单例作用域-the-singleton-scope","link":"#_5-1-单例作用域-the-singleton-scope","children":[]},{"level":3,"title":"5.2 原型作用域 (The Prototype Scope)","slug":"_5-2-原型作用域-the-prototype-scope","link":"#_5-2-原型作用域-the-prototype-scope","children":[]}]},{"level":2,"title":"6.自定义 Bean 的性质","slug":"_6-自定义-bean-的性质","link":"#_6-自定义-bean-的性质","children":[{"level":3,"title":"6.1 生命周期回调","slug":"_6-1-生命周期回调","link":"#_6-1-生命周期回调","children":[]},{"level":3,"title":"6.2 ApplicationContextAware 和 BaenNameAware","slug":"_6-2-applicationcontextaware-和-baennameaware","link":"#_6-2-applicationcontextaware-和-baennameaware","children":[]},{"level":3,"title":"6.3 其他 Aware 接口","slug":"_6-3-其他-aware-接口","link":"#_6-3-其他-aware-接口","children":[]}]},{"level":2,"title":"7.Bean 定义继承","slug":"_7-bean-定义继承","link":"#_7-bean-定义继承","children":[]},{"level":2,"title":"8.容器的扩展点","slug":"_8-容器的扩展点","link":"#_8-容器的扩展点","children":[{"level":3,"title":"8.1 使用 BeanPostProcessor 自定义 Beans","slug":"_8-1-使用-beanpostprocessor-自定义-beans","link":"#_8-1-使用-beanpostprocessor-自定义-beans","children":[]},{"level":3,"title":"8.2 使用 BeanFactoryPostProcessor 自定义配置元数据","slug":"_8-2-使用-beanfactorypostprocessor-自定义配置元数据","link":"#_8-2-使用-beanfactorypostprocessor-自定义配置元数据","children":[]},{"level":3,"title":"8.3 使用 FactoryBean 自定义实例化逻辑","slug":"_8-3-使用-factorybean-自定义实例化逻辑","link":"#_8-3-使用-factorybean-自定义实例化逻辑","children":[]}]},{"level":2,"title":"9.基于注解的容器配置","slug":"_9-基于注解的容器配置","link":"#_9-基于注解的容器配置","children":[{"level":3,"title":"9.1 使用 @Required","slug":"_9-1-使用-required","link":"#_9-1-使用-required","children":[]},{"level":3,"title":"9.2 使用 @Autowired","slug":"_9-2-使用-autowired","link":"#_9-2-使用-autowired","children":[]},{"level":3,"title":"9.3 使用 @Primary 精细调整基于注解的自动装配","slug":"_9-3-使用-primary-精细调整基于注解的自动装配","link":"#_9-3-使用-primary-精细调整基于注解的自动装配","children":[]},{"level":3,"title":"9.4 使用 @Qualifier 注解微调基于注解的自动注入","slug":"_9-4-使用-qualifier-注解微调基于注解的自动注入","link":"#_9-4-使用-qualifier-注解微调基于注解的自动注入","children":[]},{"level":3,"title":"9.5 使用泛型作为自动装配限定符","slug":"_9-5-使用泛型作为自动装配限定符","link":"#_9-5-使用泛型作为自动装配限定符","children":[]},{"level":3,"title":"9.6 使用 CustomAutowireConfigurer","slug":"_9-6-使用-customautowireconfigurer","link":"#_9-6-使用-customautowireconfigurer","children":[]},{"level":3,"title":"9.7 使用 @Resource 进行注入","slug":"_9-7-使用-resource-进行注入","link":"#_9-7-使用-resource-进行注入","children":[]},{"level":3,"title":"9.8 使用 @Value","slug":"_9-8-使用-value","link":"#_9-8-使用-value","children":[]},{"level":3,"title":"9.9 使用 @PostConstruct 和 @PreDestroy","slug":"_9-9-使用-postconstruct-和-predestroy","link":"#_9-9-使用-postconstruct-和-predestroy","children":[]}]},{"level":2,"title":"10.类路径扫描与托管组件","slug":"_10-类路径扫描与托管组件","link":"#_10-类路径扫描与托管组件","children":[{"level":3,"title":"10.1 @Component 及其衍生注解","slug":"_10-1-component-及其衍生注解","link":"#_10-1-component-及其衍生注解","children":[]},{"level":3,"title":"10.2 使用元注解和组合注解","slug":"_10-2-使用元注解和组合注解","link":"#_10-2-使用元注解和组合注解","children":[]},{"level":3,"title":"10.3 自动检测类并注册 Bean 定义","slug":"_10-3-自动检测类并注册-bean-定义","link":"#_10-3-自动检测类并注册-bean-定义","children":[]},{"level":3,"title":"10.4 使用过滤器自定义扫描","slug":"_10-4-使用过滤器自定义扫描","link":"#_10-4-使用过滤器自定义扫描","children":[]},{"level":3,"title":"10.5 在组件中定义 Bean 元数据","slug":"_10-5-在组件中定义-bean-元数据","link":"#_10-5-在组件中定义-bean-元数据","children":[]},{"level":3,"title":"10.6 自动检测组件的命名","slug":"_10-6-自动检测组件的命名","link":"#_10-6-自动检测组件的命名","children":[]},{"level":3,"title":"10.7 为自动检测的组件提供作用域","slug":"_10-7-为自动检测的组件提供作用域","link":"#_10-7-为自动检测的组件提供作用域","children":[]},{"level":3,"title":"10.8 为组件提供限定符元数据","slug":"_10-8-为组件提供限定符元数据","link":"#_10-8-为组件提供限定符元数据","children":[]},{"level":3,"title":"10.9 生成候选组件的索引","slug":"_10-9-生成候选组件的索引","link":"#_10-9-生成候选组件的索引","children":[]}]},{"level":2,"title":"11.使用 JSR 330 标准注解","slug":"_11-使用-jsr-330-标准注解","link":"#_11-使用-jsr-330-标准注解","children":[{"level":3,"title":"11.1 使用 @Inject 和 @Named 进行依赖注入","slug":"_11-1-使用-inject-和-named-进行依赖注入","link":"#_11-1-使用-inject-和-named-进行依赖注入","children":[]},{"level":3,"title":"11.2 使用 @Named 和 @ManagedBean：@Component 注解的标准等价物","slug":"_11-2-使用-named-和-managedbean-component-注解的标准等价物","link":"#_11-2-使用-named-和-managedbean-component-注解的标准等价物","children":[]},{"level":3,"title":"11.3 JSR-330 标准注解的局限性","slug":"_11-3-jsr-330-标准注解的局限性","link":"#_11-3-jsr-330-标准注解的局限性","children":[]}]},{"level":2,"title":"12.基于 Java 的容器配置","slug":"_12-基于-java-的容器配置","link":"#_12-基于-java-的容器配置","children":[{"level":3,"title":"12.1 基本概念：@Bean 和 @Configuration","slug":"_12-1-基本概念-bean-和-configuration","link":"#_12-1-基本概念-bean-和-configuration","children":[]},{"level":3,"title":"12.2 使用 AnnotationConfigApplicationContext 实例化 Spring 容器","slug":"_12-2-使用-annotationconfigapplicationcontext-实例化-spring-容器","link":"#_12-2-使用-annotationconfigapplicationcontext-实例化-spring-容器","children":[]},{"level":3,"title":"12.3 使用 @Bean 注解","slug":"_12-3-使用-bean-注解","link":"#_12-3-使用-bean-注解","children":[]},{"level":3,"title":"12.4 使用 @Configuration 注解","slug":"_12-4-使用-configuration-注解","link":"#_12-4-使用-configuration-注解","children":[]},{"level":3,"title":"12.5 组合基于 Java 的配置","slug":"_12-5-组合基于-java-的配置","link":"#_12-5-组合基于-java-的配置","children":[]}]},{"level":2,"title":"13.环境抽象","slug":"_13-环境抽象","link":"#_13-环境抽象","children":[{"level":3,"title":"13.1 Bean 定义配置文件","slug":"_13-1-bean-定义配置文件","link":"#_13-1-bean-定义配置文件","children":[]},{"level":3,"title":"13.2 PropertySource 抽象","slug":"_13-2-propertysource-抽象","link":"#_13-2-propertysource-抽象","children":[]},{"level":3,"title":"13.3 使用 @PropertySource","slug":"_13-3-使用-propertysource","link":"#_13-3-使用-propertysource","children":[]},{"level":3,"title":"13.4 在语句中解析占位符","slug":"_13-4-在语句中解析占位符","link":"#_13-4-在语句中解析占位符","children":[]}]},{"level":2,"title":"14.注册 LoadTimeWeaver","slug":"_14-注册-loadtimeweaver","link":"#_14-注册-loadtimeweaver","children":[]},{"level":2,"title":"15.ApplicationContext 的附加功能","slug":"_15-applicationcontext-的附加功能","link":"#_15-applicationcontext-的附加功能","children":[{"level":3,"title":"15.1 使用 MessageSource 进行国际化","slug":"_15-1-使用-messagesource-进行国际化","link":"#_15-1-使用-messagesource-进行国际化","children":[]},{"level":3,"title":"15.2 标准和自定义事件","slug":"_15-2-标准和自定义事件","link":"#_15-2-标准和自定义事件","children":[]},{"level":3,"title":"15.3 便捷获取底层资源","slug":"_15-3-便捷获取底层资源","link":"#_15-3-便捷获取底层资源","children":[]},{"level":3,"title":"15.4 应用程序启动跟踪","slug":"_15-4-应用程序启动跟踪","link":"#_15-4-应用程序启动跟踪","children":[]},{"level":3,"title":"15.5 Web 应用程序的便捷 ApplicationContext 实例化","slug":"_15-5-web-应用程序的便捷-applicationcontext-实例化","link":"#_15-5-web-应用程序的便捷-applicationcontext-实例化","children":[]},{"level":3,"title":"15.6 将 Spring ApplicationContext 部署为 Java EE RAR 文件","slug":"_15-6-将-spring-applicationcontext-部署为-java-ee-rar-文件","link":"#_15-6-将-spring-applicationcontext-部署为-java-ee-rar-文件","children":[]}]},{"level":2,"title":"16.BeanFactory API","slug":"_16-beanfactory-api","link":"#_16-beanfactory-api","children":[]}],"git":{"createdTime":1699632881000,"updatedTime":1699632881000,"contributors":[{"name":"liyao","email":"liyao@jikugroup.com","commits":1}]},"readingTime":{"minutes":154.63,"words":46390},"filePathRelative":"md/Spring/SpringFramework/01-核心-IOC.md","localizedDate":"2023年11月10日","copyright":{"author":"Mr.JavGo"},"autoDesc":true}');export{e as data};
