import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-009ef08a.js";const e={},t=p(`<hr><h2 id="title-03-源码-hashmap" tabindex="-1"><a class="header-anchor" href="#title-03-源码-hashmap" aria-hidden="true">#</a> title: 03-源码-HashMap</h2><h2 id="_1-从-map-接口入手" tabindex="-1"><a class="header-anchor" href="#_1-从-map-接口入手" aria-hidden="true">#</a> 1.从 Map 接口入手</h2><p><code>Map</code> 是 Java 集合框架中的一个核心接口，用于存储键值对（key-value）。它确保每个<strong>键都是唯一</strong>的，并且<strong>每个键只能映射到一个值</strong>。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-020022.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-1-从-jdk-1-0-的-dictionary-k-v-抽象类讲起" tabindex="-1"><a class="header-anchor" href="#_1-1-从-jdk-1-0-的-dictionary-k-v-抽象类讲起" aria-hidden="true">#</a> 1.1 从 JDK 1.0 的 Dictionary&lt;K,V&gt; 抽象类讲起</h3><p>在 Java 的早期（JDK 1.0）版本中，<code>java.util.Dictionary</code> 是一个用于存储键值对的抽象类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dictionary</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它为所有映射键到值的类（例如 <code>Hashtable</code>）提供了一个抽象的父类：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-021323.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 <code>Dictionary</code> 类中，每一个键和每一个值都是一个对象。在任何一个 <code>Dictionary</code> 对象中，每个键最多只能与一个值关联。给定一个 <code>Dictionary</code> 和一个键，可以查找与之关联的元素。任何非 null 对象都可以作为键和值使用。为了确定两个键是否相同，实现这个类的方法通常需要重写 <code>equals</code> 方法。</p><p>然而，随着 Java 的发展，<code>Dictionary</code> 类逐渐被视为过时。新的实现应该实现 <code>Map</code> 接口，而不是扩展 <code>Dictionary</code> 抽象类。因为 <code>Map</code> 接口提供了更加丰富和灵活的功能，同时也更加符合 Java 集合框架的设计原则。</p><p>通过查看源码，我们发现 <code>Dictionary</code> 是一个完全抽象的类，定义了为数不多的抽象方法：</p><table><thead><tr><th>方法签名</th><th>描述</th></tr></thead><tbody><tr><td>public Dictionary()</td><td>构造方法</td></tr><tr><td>abstract public int size()</td><td>返回此字典中的键值对的数量</td></tr><tr><td>abstract public boolean isEmpty()</td><td>测试此字典是否不包含键值对</td></tr><tr><td>abstract public Enumeration&lt;K&gt; keys()</td><td>返回此字典中的所有键的枚举</td></tr><tr><td>abstract public Enumeration&lt;V&gt; elements()</td><td>返回此字典中的所有值的枚举</td></tr><tr><td>abstract public V get(Object key)</td><td>返回指定键所映射到的值；如果此字典不包含该键的映射，则返回 <code>null</code>。</td></tr><tr><td>abstract public V put(K key, V value)</td><td>将指定 <code>key</code> 映射到此字典中的指定 <code>value</code>。返回先前与 <code>key</code> 关联的值，或者如果 <code>key</code> 之前没有映射，则返回 <code>null</code>。</td></tr><tr><td>abstract public V remove(Object key)</td><td>从此字典中移除 <code>key</code>（及其相应的 <code>value</code>）。返回先前与 <code>key</code> 关联的值，或者如果 <code>key</code> 之前没有映射，则返回 <code>null</code>。</td></tr></tbody></table><blockquote><p>❓ <strong>&quot;字典&quot;（Dictionary）应该如何理解？</strong></p><p>在计算机科学中，&quot;字典&quot;（Dictionary）是一个抽象数据类型，用于存储键值对，其中每个键都是唯一的。这种数据结构允许我们根据键来存取、插入或删除相应的值。在不同的编程语言或框架中，这种数据结构可能有不同的名称，如 “Map”、“Table” 或 “Associative Array”。</p><p>在 Java 的 <code>Dictionary</code> 类描述中，&quot;字典&quot; 是一个抽象类，它定义了键值对存储的基本操作，但没有提供具体的实现。也就是说，其他类（如 <code>Hashtable</code>）需要继承 <code>Dictionary</code> 并提供具体的实现。</p><p>下面对 “字典” 的一些关键点进行总结：</p><ol><li><strong>键值对</strong>：字典存储的基本单位是键值对。每个键都是唯一的，与之关联的是一个值。</li><li><strong>唯一键</strong>：在字典中，键是唯一的。不能有两个键值对具有相同的键。</li><li><strong>查找</strong>：字典的主要优势之一是查找速度。理论上，如果键的哈希函数设计得当，查找操作可以是常数时间的。</li><li><strong>插入和删除</strong>：字典还支持插入新的键值对和删除现有的键值对。</li><li><strong>无序</strong>：大多数基本的字典实现（如 <code>Hashtable</code>）不保证键值对的顺序。但也有一些实现（如 <code>TreeMap</code>）保证了特定的顺序。</li></ol></blockquote><p>🤔 <strong>那么，Dictionary 的键值对是如何表示的呢？</strong></p><p>我们注意到 <code>Dictionary</code> 获取键或值集合的方法中有一个 <code>Enumeration&lt;E&gt;</code> 泛型枚举，它也是 Java 早期版本（JDK 1.0）中用于遍历集合元素的接口。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-022803.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从源码中可以看到，它提供了两个主要的方法：<code>hasMoreElements()</code> 和 <code>nextElement()</code>。这两个方法允许用户遍历集合的元素，而不需要知道集合的内部结构或大小。</p><ol><li><strong>hasMoreElements()</strong> ：此方法返回一个布尔值，指示是否还有更多的元素可以遍历。如果还有更多元素，则返回 <code>true</code>；否则返回 <code>false</code>。</li><li><strong>nextElement()</strong> ：此方法返回集合中的下一个元素。每次调用此方法都会移动到下一个元素。如果没有更多的元素，此方法可能会抛出 <code>NoSuchElementException</code>。</li></ol><p>在 <code>Dictionary</code> 类中，<code>keys()</code> 方法会返回一个 <code>Enumeration&lt;K&gt;</code>，它可以遍历字典中的所有键，而 <code>elements()</code> 方法返回一个可以遍历字典中所有值的 <code>Enumeration&lt;V&gt;</code>。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-022949.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>尽管 <code>Enumeration</code> 在 Java 的早期版本中很受欢迎，但在 Java 2 平台（即 JDK 1.2）引入 <code>Iterator</code> 接口后，它逐渐被淘汰。<code>Iterator</code> 提供了与 <code>Enumeration</code> 类似的功能，但具有更丰富的操作，例如 <code>remove()</code>，并且命名更加直观。</p><blockquote><p>📒 简单总结 <code>Enumeration</code> 和 <code>Iterator</code> 之间的一些关键差异：</p><ul><li><code>Enumeration</code> 有 <code>hasMoreElements()</code> 和 <code>nextElement()</code> 方法，而 <code>Iterator</code> 有 <code>hasNext()</code> 和 <code>next()</code> 方法。</li><li><code>Iterator</code> 允许从集合中删除元素，而 <code>Enumeration</code> 不允许。</li><li>从命名和设计的角度看，<code>Iterator</code> 更加现代和直观。</li></ul></blockquote><h3 id="_1-2-map-接口中的集合视图又是怎样的" tabindex="-1"><a class="header-anchor" href="#_1-2-map-接口中的集合视图又是怎样的" aria-hidden="true">#</a> 1.2 Map 接口中的集合视图又是怎样的？</h3><p>在 Java 中，<code>Map</code> 接口提供了一种机制，允许我们查看其内容的不同 <strong>“视图”</strong>。这些视图是 Map 中数据的表示，它们提供了不同的方式来查看和操作 Map 中的数据。</p><p>具体来说，<code>Map</code> 提供了三种集合视图：</p><ol><li><p><strong>键集（keySet()）</strong>：</p><p>这个视图提供了 Map 中所有键的集合。使用这个方法，你可以遍历所有的键，但不能直接访问与这些键关联的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意到 <code>keySet()</code> 的返回值是一个 <code>Set&lt;K&gt;</code> 集合，根据 <code>Set</code> 集合元素的唯一性得出结论：<code>Map 集合的 Key 唯一</code>。</p></li><li><p><strong>值集（values()）</strong>：</p><p>这个视图提供了 Map 中所有值的集合。与 <code>keySet()</code> 相反，你可以遍历所有的值，但不能直接访问产生这些值的键。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意到 <code>values()</code> 的返回值是一个 <code>Collection&lt;V&gt;</code> 集合，该集合在不指定具体实现的条件下允许存入重复值，得出结论：<strong>Map 集合的 Value 可以重复</strong>。</p></li><li><p><strong>键值映射集（entrySet()）</strong>：</p><p>这可能是最有用的视图。它提供了 Map 中所有键值对的集合。每个键值对都是 <code>Map.Entry&lt;K,V&gt;</code> 的一个实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>那么， <code>Entry&lt;K,V&gt;</code> 是什么？通过翻阅源码发现它是定义在 Map 接口中的一个内部接口：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-024233.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个内部接口在 Map 中用来<strong>代表一个键值对</strong>，简单理解就是它的一个实例就是一个键值对，多个实例就组成了一个 Map 集合。</p><p>这个接口很重要，因为它提供了一种方法来访问和修改 Map 中的数据，而不仅仅是通过键或值来操作。我们单独来看其中三个比较重要的方法：</p><ul><li><strong>K getKey()</strong> ：返回与此条目关联的键。</li><li><strong>V getValue()</strong> ：返回与此条目关联的值。</li><li><strong>V setValue(V value)</strong> ：将此条目的值替换为指定的值。</li></ul><p>Map 中也提供了对应的方法来获取所有的键值对集合，通过一个 Set 集合来进行存储：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当你调用 <code>map.entrySet()</code> 时，你会得到一个 <code>Set&lt;Map.Entry&lt;K, V&gt;&gt;</code>，也就是你得到了一个包含 <code>Map.Entry</code> 对象的集合。每个 <code>Map.Entry</code> 对象都代表 Map 中的一个键值对。</p><blockquote><p>✏️ 与 Dictionary 的 Enumeration 对比：</p><p>在早期的 Java 版本中，<code>Dictionary</code> 是用来存储键值对的主要方式。但是，与现代的 <code>Map</code> 接口相比，<code>Dictionary</code> 的功能相对有限。最大的区别是 <code>Dictionary</code> 是一个完全的抽象类，而 <code>Map</code> 是一个接口。</p><p>此外，<code>Dictionary</code> 没有提供类似 <code>entrySet()</code> 这样的方法来直接访问其键值对。而 <code>Map</code> 通过其 <code>Map.Entry</code> 内部接口，提供了一种更加灵活和强大的方式来访问和修改其内容。</p><p>可见，<code>Map</code> 和其 <code>Map.Entry</code> 接口提供了一种更加现代、灵活和强大的方式来处理键值对，这也是为什么 <code>Dictionary</code> 在现代 Java 开发中已经被淘汰的原因。</p></blockquote><h3 id="_1-3-为什么-jdk-官方不推荐使用可变对象作为-map-的键" tabindex="-1"><a class="header-anchor" href="#_1-3-为什么-jdk-官方不推荐使用可变对象作为-map-的键" aria-hidden="true">#</a> 1.3 为什么 JDK 官方不推荐使用可变对象作为 Map 的键？</h3><p>看下面 Map 源码中的一段关键注释：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-025308.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 大致翻译：</p><p>注意：如果你选择一个可以更改的对象作为映射的键，那么你需要格外小心。假设你更改了这个键对象的某些属性，这可能会影响它的 <code>equals</code> 方法的结果。如果这种更改发生在你已经将该对象放入映射后，那么映射的行为可能会变得不可预测。此外，一个映射不应该将自己作为键，尽管它可以将自己作为一个值。但是，如果你这样做，那么这个映射的 <code>equals</code> 和 <code>hashCode</code> 方法可能不会正常工作。</p></blockquote><p>从官方的警告中我们能总结出如下两个关键问题：</p><ol><li><strong>如果一个可变对象被用作映射的键并在后续被修改，映射的行为会如何？</strong></li><li><strong>为什么映射不应该将自己作为键，而可以作为值？</strong></li></ol><p>先来看第一个问题。在 Java 中，<code>Map</code> 的键是唯一的，因为内部使用了 Set 集合来进行存储，而 Set 集合可以通过对象的 <code>hashCode()</code> 和 <code>equals()</code> 方法来保证元素的唯一性。当你向 <code>Map</code> 中添加一个键值对时，<code>Map</code> 会使用键的 <code>hashCode()</code> 方法来确定该键值对应该存储在哪里。如果两个键的哈希码相同，<code>Map</code> 会进一步使用 <code>equals()</code> 方法来检查这两个键是否真的相等。</p><p>现在，考虑一个可变对象作为 <code>Map</code> 的键。如果在将这个对象添加到 <code>Map</code> 之后，你修改了这个对象的状态，那么这个对象的 <code>hashCode()</code> 或 <code>equals()</code> 方法的结果可能会改变。也就是说，从 <code>Map</code> 的角度看，这个键已经 “移动” 到了一个新的位置，但实际上它还在原来的位置。这会导致一系列的问题，例如：</p><ol><li><strong>数据丢失</strong>：由于键的哈希码已经改变，你可能无法再通过这个键来找到对应的值。</li><li><strong>数据不一致</strong>：如果你尝试使用新的状态的对象作为键来获取值，你可能会得到一个不同的值，或者得到 <code>null</code>。</li><li><strong>内存泄漏</strong>：由于原始的键值对无法被访问和删除，它们可能会在 <code>Map</code> 中一直存在，导致内存泄漏。</li></ol><p>考虑一个简单的 <code>Person</code> 类，其中 <code>name</code> 是可变的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重写 equals</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 同一个对象（地址相同）直接返回 true</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 检查类型</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 强制类型转换</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token comment">// 最终通过 equals 比较内容</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 基于 name 值进行 hash 计算</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，考虑以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用可变对象 person 作为键</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&quot;Developer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 修改键的状态（内部是通过 name 进行 hash 计算的）</span>
person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 尝试获取值</span>
<span class="token class-name">String</span> role <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里返回的是 null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，我们首先将一个 <code>Person</code> 对象和一个字符串添加到 <code>Map</code> 中。然后，我们修改了 <code>Person</code> 对象的状态。当我们尝试使用这个对象作为键来获取值时，我们得到 <code>null</code>，因为 <code>Map</code> 无法找到这个键。</p><p>为什么？</p><p>因为我们重写了 <code>hashCode</code> 方法通过 <code>name</code> 属性进行 hash 计算元素的位置，然而当我们修改了 <code>name</code> 属性值之后，再次查找元素时由于 <code>name</code> 的改变导致 hash 结果不同，因而定位到一个错误的位置进行查找。这时只有两种可能，要么查找到一个错误的值，要么结果为 <code>null</code>。同时，由于键状态的改变，是我们获取不到原本的元素的位置，那么原始的键值对就无法被访问和删除，它们可能会在 <code>Map</code> 中一直存在，最终导致内存泄漏。</p><h3 id="_1-4-为什么映射不应该将自己作为键-而可以作为值" tabindex="-1"><a class="header-anchor" href="#_1-4-为什么映射不应该将自己作为键-而可以作为值" aria-hidden="true">#</a> 1.4 为什么映射不应该将自己作为键，而可以作为值？</h3><p>回顾一下上面提到的第二个关键问题：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-031057.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>❓ <strong>为什么映射不应该将自己作为键，而可以作为值？</strong></p><p>这个问题涉及到映射的基本工作原理和 Java 对象的 <code>equals()</code> 和 <code>hashCode()</code> 方法。</p><ol><li><p><strong>基于 hashCode() 的存储：</strong></p><p>当你将一个键值对放入映射时，映射首先会计算键的 <code>hashCode()</code>。这个哈希码决定了键值对在映射内部数组的存储位置。如果映射将自己作为键，那么每次映射的内容发生变化时，它的 <code>hashCode()</code> 都可能会改变，这会导致存储位置不断变化，从而使得映射无法正确地找到或存储键值对。</p></li><li><p><strong>equals() 方法的问题：</strong></p><p>映射使用 <code>equals()</code> 方法来确定两个键是否相同。如果映射将自己作为键，那么它需要在 <code>equals()</code> 方法中处理<strong>自引用</strong>的情况，这会增加实现的复杂性。此外，如果映射的内容发生变化，那么它与其他对象的相等性也可能会改变，这会导致不可预测的行为。</p></li></ol><p>假设你有一个映射，你尝试将映射自己作为键插入。当你再次尝试获取这个键时，由于上述的 <code>hashCode()</code> 和 <code>equals()</code> 问题，你可能会得到<strong>意外的结果</strong>，或者可能会遇到<strong>无限循环</strong>和<strong>栈溢出</strong>的问题。</p><p>看下面这段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapSelfReference</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将映射自己作为键插入</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token string">&quot;self&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 尝试获取这个键</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Value for self-referential key: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 尝试调用 toString 方法</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StackOverflowError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;StackOverflowError when calling toString on the map!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-032300.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当我们执行 <code>map.get(map)</code> 时，实际上是在尝试获取与映射自身相对应的值。为了获取这个值，<code>HashMap</code> 需要计算键的 <code>hashCode()</code>，然后使用这个哈希码来找到对应的桶。但是，当 <code>HashMap</code> 作为其自己的键时，调用 <code>hashCode()</code> 会导致递归，因为 <code>HashMap</code> 的 <code>hashCode()</code> 实现会尝试计算其所有键值对的哈希码。</p><p>也就是说，由于 <code>HashMap</code> 包含自己作为键，当它尝试计算自己的哈希码时，它会再次尝试计算自己的哈希码，这导致了无限递归。这就是为什么我们在尝试获取映射自身作为键的值时会遇到 <code>StackOverflowError</code>。</p><p>上述导致 <code>StackOverflowError</code> 的问题我们一般称之为：<strong>自引用</strong>问题。</p><p>因此，为了处理该问题，我们可以在 <code>equals()</code> 方法中首先检查是否正在与自身进行比较。如果是，我们可以立即返回 <code>true</code>，因为一个对象总是等于其自身。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 处理自引用</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// ... 其他比较逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>hashCode()</code> 方法中，我们可以为映射自身定义一个特定的哈希码，或者简单地返回超类的 <code>hashCode()</code>，从而确保每次的 hash 结果相同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理自引用</span>
    <span class="token comment">// ... 其他哈希计算逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑一个简单的 <code>HashMap</code>，其中我们已经重写了 <code>equals()</code> 和 <code>hashCode()</code> 方法以处理自引用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfReferencingMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 处理自引用</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理自引用</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上述 <code>SelfReferencingMap</code>，我们就可以避免由于自引用而导致的 <code>StackOverflowError</code>。</p><blockquote><p>⚠️ 注意：尽管我们可以通过这种方式处理自引用，但最佳做法仍然是避免将映射自身作为键或值插入。</p></blockquote><h3 id="_1-5-对于-map-构造函数的规定" tabindex="-1"><a class="header-anchor" href="#_1-5-对于-map-构造函数的规定" aria-hidden="true">#</a> 1.5 对于 Map 构造函数的规定</h3><p>先看 JDK 官方建议：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-033246.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 大致翻译：</p><p>所有通用的 map 实现类都应该提供两个 “标准” 构造函数：创建空映射的 void (无参数) 构造函数，以及具有单个 map 类型参数的构造函数，它创建具有与其参数相同的键值映射的新映射。实际上，后一种构造函数允许用户复制任何映射，生成所需类的等效映射。没有办法强制执行这个建议 (因为 Map 接口本身不能包含构造函数)，但是 JDK 中的所有通用映射实现都遵循这个建议。</p></blockquote><p>Java 中的 <code>Map</code> 接口推荐所有通用目的的 <code>Map</code> 实现类都应提供两个 &quot;标准&quot; 构造函数。这是为了确保开发者在使用任何 <code>Map</code> 实现时，都有一致的构造函数可以使用。这种约定使得开发者可以轻松地在不同的 <code>Map</code> 实现之间切换，而不必担心构造函数的差异。</p><p>让我们结合 <code>HashMap</code> 的源码来详细展开这两个构造函数：</p><ol><li><p><strong>无参数构造函数</strong></p><p>这是最常用的构造函数，它创建一个空的 <code>HashMap</code> 实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在构造函数中未指定时使用的默认负载因子</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

<span class="token comment">// 哈希表的负载因子</span>
<span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>

<span class="token comment">// 使用默认初始容量 (16) 和默认负载因子 (0.75) 构造一个空 HashMap。</span>
<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">;</span> <span class="token comment">// all other fields defaulted</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>带有 Map 类型单一参数的构造函数</strong></p><p>这个构造函数允许用户复制另一个 <code>Map</code> 的内容到新创建的 <code>HashMap</code> 实例中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置默认的负载因子 (0.75)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">;</span>
    <span class="token comment">// 将传入的 Map 中的所有键值对添加到新创建的 HashMap 中</span>
    <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个构造函数中，首先设置了默认的负载因子（0.75）。然后，使用 <code>putMapEntries</code> 方法将传入的 <code>Map</code> 中的所有键值对添加到新创建的 <code>HashMap</code> 中。新创建的 <code>HashMap</code> 将具有与传入的 <code>Map</code> 相同的键值映射。</p></li></ol><p>这两个构造函数为开发者提供了创建 <code>HashMap</code> 的灵活性。无参数构造函数允许开发者创建一个空的 <code>HashMap</code>，而带有 <code>Map</code> 参数的构造函数则允许开发者基于现有的 <code>Map</code> 创建一个新的 <code>HashMap</code>。</p><h3 id="_1-6-map-如何处理不支持的操作" tabindex="-1"><a class="header-anchor" href="#_1-6-map-如何处理不支持的操作" aria-hidden="true">#</a> 1.6 Map 如何处理不支持的操作？</h3><p>先看 JDK 官方建议：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-034700.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 大致翻译：</p><p>在这个接口中，有些方法可以修改它们操作的 <code>Map</code>。如果某个 <code>Map</code> 实现不支持这些修改操作，那么这些方法会抛出 <code>UnsupportedOperationException</code>。但有些情况下，即使调用这些方法不会改变 <code>Map</code> 的状态，它们也可能（但不是必须）抛出这个异常。例如，如果你尝试使用 <code>putAll(Map)</code> 方法将一个空的映射添加到一个不可修改的 <code>Map</code> 中，这个方法可能会抛出异常，尽管它实际上并不改变 <code>Map</code>。</p></blockquote><p>在 Java 的 <code>Map</code> 接口中，有些方法是可选的，也就是说实现这个接口的类可以选择是否提供这些方法的具体实现。如果一个 <code>Map</code> 实现不支持某个操作，并且该操作被调用，那么通常会抛出 <code>UnsupportedOperationException</code>。</p><p>这种设计模式允许创建只读或部分可写的 <code>Map</code> 实现，或者在某些特定的上下文中禁止某些操作。</p><p>让我们通过 <code>Map</code> 接口的部分方法和其底层实现来详细展开这一点：</p><ol><li><p><strong>V put(K key, V value)：</strong></p><p>这是一个基本的方法，用于将指定的值与此映射中的指定键关联。大多数 <code>Map</code> 实现都会提供这个方法的实现，但如果某个特定的 <code>Map</code> 实现是只读的，那么这个方法可能会抛出 <code>UnsupportedOperationException</code>。</p></li><li><p><strong>V remove(Object key)：</strong></p><p>此方法用于从 <code>Map</code> 中移除指定键的映射（如果存在）。如果一个 <code>Map</code> 实现不允许元素被移除，那么这个方法会抛出 <code>UnsupportedOperationException</code>。</p></li><li><p><strong>void putAll(Map&lt;? extends K, ? extends V&gt; m)：</strong></p><p>此方法用于将指定 <code>Map</code> 中的所有映射复制到此 <code>Map</code>。如果 <code>Map</code> 实现不支持批量添加操作，那么这个方法会抛出 <code>UnsupportedOperationException</code>。</p></li></ol><p>考虑 <code>Collections.unmodifiableMap()</code> 方法，它返回一个不可修改的 <code>Map</code>。这个返回的 <code>Map</code> 的任何修改操作（如 <code>put</code>, <code>remove</code> 等）都会抛出 <code>UnsupportedOperationException</code>。</p><p>关键源码如下：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-035701.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> originalMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
originalMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> unmodifiableMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>originalMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 下面的操作会抛出 UnsupportedOperationException</span>
unmodifiableMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>📒 总结：</p><p><code>UnsupportedOperationException</code> 是一个运行时异常，用于指示请求的操作不受支持。在 <code>Map</code> 接口中，这通常意味着实现类是只读的或者不支持某些特定的修改操作。当开发者尝试执行不支持的操作时，应该捕获并适当处理这个异常，以确保程序的稳定性。</p><h3 id="_1-7-map-对于键和值有哪些限制" tabindex="-1"><a class="header-anchor" href="#_1-7-map-对于键和值有哪些限制" aria-hidden="true">#</a> 1.7 Map 对于键和值有哪些限制？</h3><p>先看 JDK 官方建议：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-035908.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 简单翻译：</p><p>不同的 <code>Map</code> 实现可能对可以包含的键和值有不同的限制。例如，有些实现不允许使用 <code>null</code> 作为键或值，而有些则对键的类型有特定要求。如果尝试插入不合规的键或值，通常会抛出未经检查的异常，如 <code>NullPointerException</code> 或 <code>ClassCastException</code>。查询不合规的键或值时，可能会抛出异常，或者只是返回 <code>false</code>；具体行为取决于具体的实现。更广泛地说，对不合规的键或值执行某些操作，即使这不会导致将不合规的元素插入 <code>Map</code>，也可能会抛出异常，或者可能会成功执行，这取决于具体实现。这种异常在接口规范中被标记为 “可选”。</p></blockquote><p>在 Java 的 <code>Map</code> 接口实现中，不同的实现类对键和值有不同的限制。这些限制主要是为了确保数据的完整性和避免潜在的错误。</p><ol><li><p><strong>禁止 null 键和值</strong>：</p><p><strong><code>HashMap</code></strong> ：它允许使用 <code>null</code> 作为键和值。但是，只能有一个 <code>null</code> 键，而可以有多个 <code>null</code> 值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>Hashtable</code></strong> ：与 <code>HashMap</code> 不同，<code>Hashtable</code> 不允许 <code>null</code> 键或值。尝试插入 <code>null</code> 键或值会抛出 <code>NullPointerException</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 下面的代码会抛出 NullPointerException</span>
hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>键的类型限制</strong>：</p><p><strong><code>TreeMap</code></strong> ：它是一个有序的 <code>Map</code>，基于红黑树实现。因此，它需要键是可比较的。如果键的类没有实现 <code>Comparable</code> 接口，那么在创建 <code>TreeMap</code> 时必须提供一个 <code>Comparator</code>。否则，尝试插入键时会抛出 <code>ClassCastException</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomKey</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果 CustomKey 没有实现 Comparable 接口，下面的代码会抛出 ClassCastException</span>
treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>其他实现的限制</strong>：</p><p>有些自定义的 <code>Map</code> 实现可能会对键和值有特定的限制，例如只接受某种特定类型的键或值，或者对键和值的大小或格式有限制。</p></li></ol><p>可见，当使用 <code>Map</code> 的不同实现时，了解其对键和值的限制是很重要的，这可以帮助避免运行时错误。在尝试插入或查询键和值之前，最好先查看该实现的文档或源代码，以确保满足其要求。</p><p>以下是 <code>Map</code> 的常见实现对于 <code>null</code> 键和值的限制的总结：</p><table><thead><tr><th>Map 实现</th><th>null 键支持</th><th>允许的 null 键数量</th><th>null 值支持</th><th>允许的 null 值数量</th></tr></thead><tbody><tr><td>HashMap</td><td>是</td><td>1</td><td>是</td><td>无限制</td></tr><tr><td>Hashtable</td><td>否</td><td>0</td><td>否</td><td>0</td></tr><tr><td>TreeMap</td><td>否</td><td>0</td><td>是</td><td>无限制</td></tr><tr><td>LinkedHashMap</td><td>是</td><td>1</td><td>是</td><td>无限制</td></tr><tr><td>ConcurrentHashMap</td><td>否</td><td>0</td><td>否</td><td>0</td></tr><tr><td>WeakHashMap</td><td>是</td><td>1</td><td>是</td><td>无限制</td></tr></tbody></table><blockquote><p>⚠️ 注意：虽然 <code>TreeMap</code> 本身不支持 <code>null</code> 键，但如果提供了自定义的 <code>Comparator</code>，并且该 <code>Comparator</code> 可以处理 <code>null</code>，那么 <code>TreeMap</code> 可以接受 <code>null</code> 键。但在实际使用中，这种情况很少见。</p></blockquote><h2 id="_2-hashmap-基本描述" tabindex="-1"><a class="header-anchor" href="#_2-hashmap-基本描述" aria-hidden="true">#</a> 2.HashMap 基本描述</h2><p>先看 JDK 官方说明：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-042924.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 大致翻译：</p><p><code>HashMap</code> 是基于哈希表的 <code>Map</code> 接口的实现。这种实现支持所有可选的映射操作，并且允许存储 <code>null</code> 值和 <code>null</code> 键。与 <code>Hashtable</code> 相比，<code>HashMap</code> 大致相同，但两者有两个主要区别：<code>HashMap</code> 不是线程同步的，并且它允许存储 <code>null</code>。此外，<code>HashMap</code> 不保证映射的顺序，特别是不保证这个顺序会随时间保持不变。</p></blockquote><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-014018.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>HashMap</code> 是 Java 集合框架中的一个核心组件，它实现了 <code>Map</code> 接口，提供了基于哈希表的映射功能。在开始了解 HashMap 的内部结构之前我们先来简单了解一下什么是哈希表。</p><h3 id="_2-1-重温哈希表的基本概念" tabindex="-1"><a class="header-anchor" href="#_2-1-重温哈希表的基本概念" aria-hidden="true">#</a> 2.1 重温哈希表的基本概念</h3><p>在许多搜索技术中，如线性搜索、二分搜索和搜索树，搜索元素所需的时间取决于该数据结构中存在的元素总数。在所有这些搜索技术中，随着元素数量的增加，搜索元素所需的时间也线性增加。</p><p><strong>哈希（Hash）<strong>是另一种方法，其中</strong>搜索元素所需的时间不取决于元素的总数</strong>。使用哈希数据结构，给定的元素可以在<strong>常数时间复杂度内被搜索到</strong>。简单理解：<strong>哈希是一种有效减少数据结构中搜索元素所需比较次数的方法</strong>。</p><p>这里给哈希（Hash）一个定义：</p><blockquote><p>哈希是在数据结构中索引和检索元素的<strong>过程</strong>，目的是使用<strong>哈希键</strong>更快地找到元素。这里的哈希键是一个值，它提供了实际数据可能存储在数据结构中的<strong>索引值</strong>。</p></blockquote><p>在这种数据结构中，我们使用一个称为**哈希表（Hash Table）**的概念来存储数据。<strong>所有的数据值都根据哈希键值插入到哈希表中</strong>。哈希键值用于将数据与哈希表中的索引关联起来。并且，<strong>每个数据的哈希键都是使用哈希函数生成的</strong>。这意味着哈希表中的每个条目都基于使用哈希函数生成的哈希键值。</p><p>同样，这里给哈希表（Hash Table）一个定义：</p><blockquote><p>哈希表只是一个<strong>数组</strong>，它<strong>使用哈希函数将键（数据）映射到数据结构中</strong>，从而实现插入、删除和搜索操作的常数时间复杂度（即 O(1)）。哈希表用于在数据结构中非常快速地执行插入、删除和搜索操作。使用哈希表的概念，插入、删除和搜索操作都能在常数时间复杂度内完成。通常，每个哈希表都使用一个称为哈希函数的函数来将数据映射到哈希表中。</p></blockquote><p>那什么是**哈希函数（hash function）**呢？</p><blockquote><p>哈希函数是一个函数，它接受一块数据（即键）作为输入，并产生一个整数（即哈希值）作为输出，该整数将数据映射到哈希表中的特定索引。</p></blockquote><p>哈希和哈希表的基本概念图解：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-054540.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>辅助理解：想象一个分为多个隔室的盒子（数组）。每个隔室（桶）代表哈希表中的一个索引。在盒子上方，有一个元素，箭头指向标有 “哈希函数” 的函数。这个函数然后指向盒子中的一个特定隔室，表示根据哈希值将元素存储在哪里。</p><p>可见，哈希表是一种高效的数据结构，它使用哈希函数将数据映射到一个固定大小的数组中。当设计得当时，哈希表可以实现常数时间复杂度的插入、删除和搜索操作。</p><h3 id="_2-2-底层数据结构剖析" tabindex="-1"><a class="header-anchor" href="#_2-2-底层数据结构剖析" aria-hidden="true">#</a> 2.2 底层数据结构剖析</h3><p>在 JDK1.8 之前，<code>HashMap </code>的底层实现主要是基于<strong>数组和链表的组合</strong>，这种结构也被称为 <strong>“链表散列”</strong>。<code>HashMap</code> 通过键（key）的 <code>hashCode</code> 方法得到的散列值，再经过一个特定的<strong>扰动函数</strong>处理，从而得到最终的 hash 值。</p><p>通过 <code>hashCode</code> 方法，其实就是我们上面所说的通过哈希函数计算出一个哈希值。那么 “扰动函数” 又是什么呢？为什么需要 “扰动函数” 对计算 key 得到的哈希值进行处理？</p><p>“扰动函数” 在哈希表的上下文中是一个特定的技术，用于<strong>进一步处理原始的哈希码，以改善元素在哈希表中的分布</strong>。这是为了解决某些不良的 <code>hashCode()</code> 实现可能导致的问题，例如导致大量的键聚集在哈希表的某些部分，从而导致性能下降。</p><p>因此，我们可以得出添加扰动函数的结论：</p><ol><li><strong>不均匀的分布</strong>：即使是良好设计的 <code>hashCode()</code> 方法，也可能导致哈希表中的不均匀分布。这种不均匀分布可能导致哈希表的某些部分过于拥挤，而其他部分则相对空闲。这会导致查找、插入和删除操作的性能下降。</li><li><strong>减少冲突</strong>：哈希冲突是当两个不同的键产生相同的哈希值时发生的。扰动函数可以帮助分散这些冲突，使它们在哈希表中更均匀地分布。</li></ol><p>具体来说，扰动函数通过对原始的哈希码进行某种形式的变换来工作。这种变换旨在确保哈希值在哈希表中更均匀地分布，而不是聚集在某些 “热点”。（具体体现我们在下面的具体源码进行分析）</p><hr><p>🤔 那么，经过扰动函数处理后的哈希值就是我们最终在数组中的索引位置了吗？</p><p>我们知道，哈希表的核心思想是将键映射到一个<strong>固定大小的数组</strong>中。这里的 “固定大小” 很关键，数组的大小通常是在使用前就需要确定好的，进而对应的会分配一片连续的存储空间。那么，这个数组的大小多大合适呢？</p><p>不知道你会不会这么猜想：既然通过哈希函数计算得来的哈希值比较大，那么我一开始就申请一块充足的内存空间不就可以了吗？</p><p>这种想法也不是不可以，只是会显得你很呆。因为这带来的资源浪费是不可估量的。那么，有没有一种办法能够通过一个合适的数组大小（不会很大），但是却能对哈希值进一步处理得到允许范围内的数组索引值作为存储槽点呢？</p><p>为了做到这一点，我们需要一个方法来<strong>将任意长度的哈希值转换为数组的有效索引</strong>。在 HashMap 的实现中是通过：<code>(n - 1) &amp; hash</code> 操作（这里的 <code>n</code> 是数组的长度）来完成的。</p><hr><p>说到这里，我们就不得不提 HashMap 对于数组大小的设计细想了。这里先给你一个结论：<strong>HashMap 中的数组大小总是 2 的幂次方！</strong></p><blockquote><p>⚠️ 注意：这部分可能不太好理解，能理解其大概目的 即可。</p></blockquote><p>对于为什么这么设计，主要是考虑到 HashMap 本身的性能优化、简化计算和冲突分布。下面进行简单解释：</p><ol><li><p><strong>快速计算索引</strong>：</p><p>当数组的大小为 2 的幂次方时（也就是说数组大小只会是 0，2，4，8，16，...），确定元素在数组中的位置可以通过简单的<strong>位操作</strong>来完成，而不是更加耗时的<strong>模运算</strong>。具体来说，对于一个哈希值 <code>hash</code> 和数组大小 <code>n</code>，其索引可以通过 <code>hash &amp; (n-1)</code> 来计算，而不是 <code>hash % n</code>。</p><p>为什么这样有效？因为 2 的幂次方代表的数在二进制表示中只有一个位是 1，其余位都是 0。例如，16 在二进制中表示为 <code>10000</code>，而 15（即 16-1）表示为 <code>01111</code>。因此，<code>&amp;</code> 操作实际上只是保留了哈希值的低位，这与模运算的效果相同，但计算速度更快。</p><p>如果你还是不能理解，那么就接着看。补充一波二进制和位操作的基础知识：</p><p>二进制表示：</p><ul><li>在二进制系统中，每个位置上的数字（位）只能是 0 或 1。</li><li>从右到左，每个位置的权重是 2 的幂次方，从 0 开始。例如，第一个位置是 2<sup>0</sup>（即 1），第二个位置是 2<sup>1</sup>（即 2），第三个位置是 2<sup>2</sup>（即 4），依此类推。</li></ul><p>2 的幂次方在二进制中的特点：任何 2 的幂次方在二进制表示中都只有一个 1。例如：</p><ul><li>2<sup>0</sup> = 1，二进制表示为 <code>1</code></li><li>2<sup>1</sup> = 2，二进制表示为 <code>10</code></li><li>2<sup>2</sup> = 4，二进制表示为 <code>100</code></li><li>2<sup>3</sup> = 8，二进制表示为 <code>1000</code></li><li>2<sup>4</sup> = 16，二进制表示为 <code>10000</code></li></ul><p>可以观察到，每次幂次增加时，1 都向左移动一个位置。接着我们继续看 <code>&amp;</code> 位操作符，它称为 <strong>“按位与”</strong>。工作原理是：只有当两个相应的位都为 1 时，结果才为 1，否则为 0。</p><p>当你从 2 的幂次方的数中减去 1 时，你实际上是将该数的二进制表示中的最左边的 1 变为 0，并将其右边的所有 0 变为 1。因此，16是 <code>10000</code>，减去 1 后得到 15，其二进制表示为 <code>01111</code>。当你使用 <code>&amp;</code> 操作将一个数与 <code>01111</code>（例如 15）进行按位与操作时，你实际上只保留了该数的低 5 位，因为 <code>01111</code> 的高位是 0，与任何数的按位与操作都会得到 0。并且，对于 2 的幂次方，使用 <code>&amp;</code> 操作与模运算得到的结果是相同的。例如，对于数组大小为 16，<code>hash &amp; 15</code> 的效果与 <code>hash % 16</code> 相同。</p></li><li><p><strong>均匀分布</strong>：</p><p>哈希函数的目的是将输入（通常是键）转换为一个固定范围内的整数值，这个整数值然后用于确定在哈希表数组中的位置。理想的哈希函数会产生一个均匀分布的哈希值，这意味着每个数组索引都有大致相同的机会被选中，从而最小化冲突。</p><p>但是哈希函数的设计通常使得哈希值在其整个可能的范围内都有随机性。这意味着哈希值的高位和低位都可能变化，并且都可能包含有用的信息。</p><p>当数组大小为 2 的幂次方时，确定数组索引的位操作（如 <code>hash &amp; (n-1)</code>）主要关注哈希值的低位。这是因为 <code>n-1</code> 的二进制表示形式将包含一系列的 1，然后是一系列的 0。例如，如果 <code>n=16</code>，那么 <code>n-1=15</code>，其二进制表示为 <code>01111</code>。这意味着低 5 位会被保留，而高位会被忽略。</p><p>在某些情况下，哈希值的高位可能包含更多的随机性或变化，特别是当哈希函数产生的哈希值范围远大于数组大小时。如果我们只关注低位，那么我们可能会错过这种随机性，从而增加冲突的可能性。</p><p>为了利用哈希值的高位随机性，哈希函数（或扰动函数）可能会将高位与低位混合。例如，在 Java 的 <code>HashMap</code> 中，哈希值的高 16 位与低 16 位异或，从而将高位的随机性混入到最终的数组索引中。</p></li><li><p><strong>扩容简化</strong>：</p><p><code>HashMap</code> 的性能部分取决于其负载因子，即数组中的元素数量与数组大小的比率。当元素数量超过一个特定的阈值（通常是数组大小与负载因子的乘积）时，可能会导致更多的哈希冲突，从而降低查找、插入和删除操作的性能。为了维持性能，当元素数量超过阈值时，<code>HashMap</code> 需要扩容。</p><p>翻倍数组的大小是一种简单且高效的策略。首先，它确保了新的数组大小仍然是 2 的幂次方，这对于上面讨论的位操作至关重要。其次，由于内存分配通常是按块进行的，翻倍数组的大小可能比增加一个固定的数量更加高效。</p><p>在二进制表示中，左移操作相当于乘以 2。例如，数字 2 在二进制中表示为 <code>10</code>，左移一位后变为 <code>100</code>，即数字4。因此，通过简单地将当前大小左移一位，我们可以快速地翻倍数组的大小。在 Java 中，左移操作可以使用 <code>&lt;&lt;</code> 操作符来完成。例如，如果 <code>n</code> 是当前的数组大小，那么<code> n &lt;&lt; 1</code> 将是新的数组大小。</p><p>使用左移操作来翻倍数组的大小比其他方法更简单、更快。我们不需要进行复杂的算术运算或查找下一个最大的素数作为新的数组大小。只需一个简单的位操作即可。此外，由于新的数组大小仍然是 2 的幂次方，我们可以继续使用上面讨论的位操作来计算元素的位置，而不需要修改哈希算法或其他部分的代码。</p></li><li><p><strong>减少冲突</strong>：</p><p>哈希函数和扰动函数的设计目标是确保哈希值在整数范围内均匀分布。这意味着哈希表中的每个位置都有大致相同的机会被选中，从而最小化冲突。一个好的哈希函数和扰动函数组合会确保不同的键尽可能地映射到不同的哈希值，即使这些键在某种意义上是 “相似” 的。</p><p>当数组大小为 2 的幂次方时，我们可以使用简单的位操作来确定元素在数组中的位置。这主要关注哈希值的低位，但由于扰动函数的设计，高位的信息也被混入了低位。这意味着哈希值的整个范围都被用于确定元素的位置，而不仅仅是某个子集。这有助于确保哈希值在数组中均匀分布，因为我们利用了哈希值的全部信息，而不仅仅是一部分。</p><p>在某些情况下，哈希值的高位可能包含更多的随机性或变化。如果我们只关注低位，那么我们可能会错过这种随机性，从而增加冲突的可能性。扰动函数的设计通常考虑到这一点，将高位的随机性混入到低位中，从而确保我们在确定元素位置时利用了哈希值的全部信息。</p></li><li><p><strong>历史和经验</strong>：</p><p>这种设计选择也是基于过去的经验和实践。许多高效的哈希表实现都采用了这种策略，因为它在实践中被证明是有效的。</p></li></ol><blockquote><p>📒 巴拉巴拉一大堆，就是为了告诉你：<strong>为什么使用 <code>(n - 1) &amp; hash</code> 而不是 <code>hash % n</code>？</strong></p><p>数组的大小<code>n</code>总是选择为 2 的幂。这样，<code>(n - 1)</code>的二进制表示形式总是由一串 1 组成，例如，如果<code>n = 16</code>，那么<code>n - 1 = 15</code>，其二进制表示为<code>1111</code>。使用位操作<code>&amp;</code>比使用取模操作<code>%</code>要快得多。当<code>n</code>是 2 的幂时，<code>hash &amp; (n - 1)</code>的效果等同于<code>hash % n</code>，但性能更好。</p></blockquote><hr><p>那么。通过 <code>(n - 1) &amp; hash</code> 我们终于拿到了对应元素应该在 HashMap 内部的哈希表中的存储位置了，如果该位置没有元素，那么肯定就能直接进行插入操作了。但是，万一此处已经存在元素呢？这是完全可能的，因为我们上面讨论的哈希函数、扰动函数、<code>(n - 1) &amp; hash</code> 都明确说了，他们只能尽可能的避免或者说减少哈希冲突，并不能彻底避免。</p><blockquote><p><strong>哈希冲突</strong>：即使经过扰动函数处理，不同的键仍然可能映射到数组的同一位置。这就是所谓的哈希冲突。</p></blockquote><p>这时，显然光依靠 <code>hashCode()</code> 方法已经不能解决眼下的问题了，好在 Java 中还有一个 <code>equals()</code> 方法，我们可以在哈希值相同时通过 <code>equals()</code> 方法进一步判断当前元素（键值）是否相同：</p><ol><li><strong>覆盖</strong>：如果两个键相同（即它们的<code>hashCode()</code>值和实际的键值都相同），那么新的键值对应该<strong>覆盖</strong>旧的键值对。这确保了<code>HashMap</code>中的键是唯一的。（可以理解为更新操作）</li><li><strong>拉链法</strong>：如果两个键的哈希值相同但实际的键不同，这意味着我们遇到了一个哈希冲突。为了解决这个问题，我们可以使用 “拉链法”，其中每个数组位置都链接到一个链表。当发生冲突时，新的键值对被添加到这个链表的末尾。</li></ol><blockquote><p>在 Java 中，两个不同的键对象可能具有相同的 <code>hashCode()</code> 值。因此，即使两个键的哈希值相同，它们也可能不相等。这就是为什么我们需要进一步检查键的相等性的原因。</p></blockquote><hr><p>单独来看看这所谓的 “拉链法” 道理是个什么玩意儿。</p><blockquote><p>应用背景：哈希冲突发生在两个或多个不同的键产生相同的哈希值时。由于哈希表的大小是有限的，而可能的键的数量是无限的，所以冲突是不可避免的。即使哈希函数设计得很好，也不能保证完全避免冲突，特别是当哈希表开始填满时。</p></blockquote><p><strong>在拉链法中，哈希表的每个位置不再存储单个键值对，而是存储一个链表。这个链表包含了所有哈希到该位置的键值对。</strong></p><blockquote><p>在大多数实现的<code>HashMap</code>中，为了解决哈希冲突，使用的是<strong>单链表</strong>。这是因为单链表结构简单，空间开销较小，且满足了基本的需求：在冲突位置添加新的键值对和遍历该位置的所有键值对。</p></blockquote><p>当要插入一个新的键值对时，首先计算其哈希值，然后找到对应的数组位置。如果该位置的链表不存在，就创建一个新的链表。然后，将新的键值对添加到链表的末尾。</p><p>当两个不同的键具有相同的哈希值时，它们会被映射到哈希表的同一个位置。但由于该位置链接到一个链表，所以两个键值对都可以被存储在同一个位置，只是它们在链表中的位置不同。</p><p>当查找一个键时，首先找到其在数组中的位置，然后在链表中线性搜索该键。由于链表中的元素数量相对较少，所以这种搜索通常很快。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-073032.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>❓ 拉链法的优缺点：</p><p>优点：</p><ul><li><strong>灵活性</strong>：拉链法允许在一个固定大小的数组中存储无限数量的键值对。</li><li><strong>均匀分布</strong>：由于冲突的键值对被存储在链表中，所以冲突不会导致键值对被映射到哈希表的其他位置，从而确保了哈希值的均匀分布。</li></ul><p>缺点：</p><ul><li><strong>空间开销</strong>：每个链表节点都需要额外的空间来存储指向下一个节点的指针。</li><li><strong>性能下降</strong>：如果很多键哈希到同一个位置，那么链表可能会变得很长，从而导致查找性能下降。但在实际应用中，如果哈希函数设计得当，这种情况是相对罕见的。</li></ul><hr><p>铺垫了那么理论了，现在我们结合源码来看看具体的实现。在 JDK1.8 中，<code>hash</code> 方法相对于 JDK1.7 进行了一些简化，但基本原理保持不变。</p><p>以下是 JDK1.8 的<code>hash</code>方法实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 JDK1.7 中，<code>HashMap </code>的 <code>hash</code> 方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 JDK1.8 的 <code>hash</code> 方法相比，JDK1.7 的版本在性能上可能稍微逊色一些，因为它进行了四次扰动。</p><hr><p>相比于之前的版本，JDK1.8 在解决哈希冲突时引入了一些重要的优化。</p><p>在 JDK1.8 的 <code>HashMap</code> 实现中，当一个桶中的链表长度超过了特定的<strong>阈值（默认为8）<strong>时，系统会考虑将该链表转换为</strong>红黑树</strong>。这种转换的主要目的是<strong>优化查找性能</strong>，因为红黑树的查找时间复杂度为 O(log n)，远优于长链表的 O(n)。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-074036.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是，这种转换并不是在每次链表长度超过阈值（8）时都会立即执行。首先，<code>treeifyBin() </code>方法会检查 <code>HashMap</code> 的当前数组大小。只有当<strong>数组的长度大于或等于 64 时</strong>，才会真正执行链表到红黑树的转换。这是因为红黑树结构相对复杂，对于小数组，简单地扩容数组可能更为高效。</p><p>如果数组长度小于 64，而某个桶中的链表长度超过了阈值，那么 <code>HashMap</code> 会选择执行 <code>resize()</code> 方法，对数组进行扩容，而不是转换为红黑树。这样做的目的是尽量保持数据结构的简单性，同时还能有效地分散哈希冲突。</p><p>可见，JDK1.8 的 <code>HashMap</code> 在处理哈希冲突时采用了更加智能和高效的策略，旨在根据实际情况选择最佳的数据结构，从而优化性能。</p><h3 id="_2-3-hashmap-的属性" tabindex="-1"><a class="header-anchor" href="#_2-3-hashmap-的属性" aria-hidden="true">#</a> 2.3 HashMap 的属性</h3><p>HashMap 中的属性如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 默认初始容量-必须是 2 的幂（16）</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// aka 16</span>

<span class="token comment">// 最大容量</span>
<span class="token comment">// 如果其中任何一方隐式指定了更高的值，则使用最大容量带参数的构造函数的。必须是 2 的幂</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token comment">// 在构造函数中未指定时使用的默认负载因子</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

<span class="token comment">// 当桶 (bucket) 上的结点数大于等于这个值（8）时链表会转成红黑树</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

<span class="token comment">// 当桶 (bucket) 上的结点数小于等于这个值（6）时红黑树会转为链表</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

<span class="token comment">// 可以对桶 (bucket) 进行树化的最小表（table）容量</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>

<span class="token comment">// 存储元素的数组</span>
<span class="token comment">// 在第一次使用时初始化，并根据需要调整大小</span>
<span class="token comment">// 在分配时，长度总是 2 的幂</span>
<span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>

<span class="token comment">// 存放具体元素（键值对）的集合</span>
<span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span>

<span class="token comment">// 此映射中包含的键值映射的数量（注意：这个值不等于数组的长度）</span>
<span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

<span class="token comment">// 每次扩容和更改 HashMap 结构的计数器</span>
<span class="token comment">// 结构修改是指改变 HashMap 中的映射数量或以其他方式修改其内部结构 (例如，重新散列)</span>
<span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>

<span class="token comment">// 要调整大小的阈值 (容量*负载因子)</span>
<span class="token comment">// 当实际大小超过阈值时才会进行扩容</span>
<span class="token keyword">int</span> threshold<span class="token punctuation">;</span>

<span class="token comment">// 哈希表的负载因子</span>
 <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里先有个映像，这些属性后面用到时都会进行分析：</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>DEFAULT_INITIAL_CAPACITY</td><td>默认的初始容量为 16。这是 HashMap 在创建时的默认大小，除非在构造函数中明确指定了其他值。必须是 2 的幂。</td></tr><tr><td>MAXIMUM_CAPACITY</td><td>最大容量为 2^30。这是 HashMap 可以有的最大容量。任何尝试超过此容量的操作都可能导致异常。必须是 2 的幂。</td></tr><tr><td>DEFAULT_LOAD_FACTOR</td><td>默认负载因子为 0.75。这是一个平衡时间和空间成本的值，用于确定何时扩展哈希表的大小。</td></tr><tr><td>TREEIFY_THRESHOLD</td><td>当一个桶中的元素数量达到或超过 8 时，链表结构会被转换为红黑树结构，以提高查找效率。</td></tr><tr><td>UNTREEIFY_THRESHOLD</td><td>当红黑树结构的桶中的元素数量减少到 6 或以下时，红黑树会被转换回链表结构。</td></tr><tr><td>MIN_TREEIFY_CAPACITY</td><td>哈希表的最小容量为 64，只有当哈希表的容量达到或超过这个值时，链表才会被转换为红黑树。</td></tr><tr><td>table</td><td>这是实际存储键值对的数组。它的长度总是 2 的幂。在 HashMap 首次插入元素时进行初始化，并在需要时进行调整。</td></tr><tr><td>entrySet</td><td>这是一个集合，包含 HashMap 中的所有键值对。它主要用于迭代和其他集合视图操作。</td></tr><tr><td>size</td><td>表示 HashMap 中实际键值对的数量。注意，这与 table 数组的长度不同，因为数组可能包含未使用的空间。</td></tr><tr><td>modCount</td><td>这是一个计数器，记录 HashMap 结构的修改次数。结构修改是指改变键值对数量或以其他方式修改其内部结构（例如，通过 <code>resize</code>）。</td></tr><tr><td>threshold</td><td>这是下一次调整 HashMap 大小的阈值。它是当前容量与负载因子的乘积。当 size 超过此值时，HashMap 会进行扩容。</td></tr><tr><td>loadFactor</td><td>这是 HashMap 的负载因子，用于确定何时扩展哈希表的大小。它在构造函数中设置，并在 HashMap 的生命周期中保持不变。</td></tr></tbody></table><p>其中有两个属性比较重要，我们单独先行理解，后面会多次出现：</p><ol><li><p><strong>负载因子：loadFactor</strong></p><p><code>loadFactor</code>（负载因子）是一个非常重要的性能参数。它决定了哈希表的密度，即桶的平均大小。负载因子越高，意味着哈希表的密度越高，每个桶中的元素数量越多，这可能会增加查找的时间。相反，负载因子越低，哈希表的密度越低，空间利用率就越低。</p><p>当哈希表中的元素数量超过当前容量与负载因子的乘积时，哈希表会进行扩容。这是为了保持哈希表的效率，防止过多的哈希冲突。</p><p>0.75 是一个在时间和空间效率之间的折中。这个值是经过实验和实践得出的，它提供了良好的性能。如果负载因子太低，例如 0.25，那么哈希表会过于稀疏，这意味着会浪费大量的内存。此外，哈希表会频繁地进行扩容，这是一个相对昂贵的操作。如果负载因子太高，例如 0.9 或 1.0，哈希表会变得非常密集，这会增加查找元素时的冲突概率，从而降低查找效率。</p></li><li><p><strong>扩容阈值：threshold</strong></p><p><code>threshold</code>是哈希表的一个内部参数，表示哈希表可以容纳的最大元素数量，超过这个数量时，哈希表会进行扩容。它是当前容量与负载因子的乘积。这确保了当哈希表的实际大小超过这个值时，哈希表会进行扩容，从而保持了哈希表的效率。通过这种方式，<code>HashMap</code>可以在保持查找效率的同时，动态地调整其内部存储结构的大小。</p><p><code>threshold</code>与<code>loadFactor</code>直接相关。<code>threshold</code>是根据当前容量和<code>loadFactor</code>计算得出的。这意味着，如果你有一个固定的<code>loadFactor</code>，那么随着哈希表容量的增加，<code>threshold</code>也会相应地增加。</p></li></ol><h3 id="_2-3-hashmap-的构造器" tabindex="-1"><a class="header-anchor" href="#_2-3-hashmap-的构造器" aria-hidden="true">#</a> 2.3 HashMap 的构造器</h3><p>HashMap 一共提供了 4 个构造器，其中前两个遵循了 Map 接口的约定，下面我们一一分析。</p><ol><li><p><strong>无参数构造函数</strong>：</p><p>这是最常用的构造函数，创建一个空的 <code>HashMap </code>实例。将负载因子设置为默认值（0.75），其他所有字段都使用默认值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在构造函数中未指定时使用的默认负载因子</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

<span class="token comment">// 哈希表的负载因子</span>
 <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">;</span> <span class="token comment">// all other fields defaulted</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>带有<code>Map</code>参数的构造函数</strong>：</p><p>允许用户创建一个新的 <code>HashMap</code> 实例，并从另一个 <code>Map</code> 中复制所有键值对。它首先将负载因子设置为默认值（0.75），然后调用 <code>putMapEntries </code>方法将给定 <code>Map</code> 中的所有键值对添加到新的 <code>HashMap </code>中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 构造一个新的 HashMap，其中包含指定 Map 中的所有键值对。
 * <span class="token keyword">@param</span> <span class="token parameter">m</span> 源 Map，其键值对将被放入新的 HashMap
 */</span>
<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置负载因子为默认值（0.75）</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">;</span>
    <span class="token comment">// 将指定 Map 中的所有键值对添加到新的 HashMap</span>
    <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 将指定 Map 中的所有键值对添加到当前 HashMap。
 * <span class="token keyword">@param</span> <span class="token parameter">m</span>     要从中复制键值对的源 Map
 * <span class="token keyword">@param</span> <span class="token parameter">evict</span> 如果为 true，则不尝试重新创建已有的键值对
 */</span>
<span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">putMapEntries</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取源 Map 的大小</span>
    <span class="token keyword">int</span> s <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前 HashMap 还未初始化</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// pre-size</span>
            <span class="token comment">// 预计算新的 HashMap 的大小</span>
            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>s <span class="token operator">/</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0F</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                     <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          
            <span class="token comment">// 如果计算出的大小大于当前的阈值，则更新阈值</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>
                threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      
        <span class="token comment">// 如果源 Map 的大小大于当前的阈值，则对 HashMap 进行扩容</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 遍历源 Map 的每一个键值对，并将其添加到当前 HashMap</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">K</span> key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">V</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 使用 putVal 方法将键值对添加到 HashMap</span>
            <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>带有初始容量参数的构造函数</strong>：</p><p>这个构造函数允许用户指定 <code>HashMap</code> 的初始容量。它将负载因子设置为默认值（0.75），并调用第四个构造函数来完成实例化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>带有初始容量和负载因子参数的构造函数</strong>：</p><p>这是最灵活的构造函数，允许用户同时指定初始容量和负载因子。它首先检查初始容量和负载因子的有效性。如果它们超出了允许的范围或是非法值，它会抛出 <code>IllegalArgumentException</code>。然后，它将负载因子设置为给定的值。<code>tableSizeFor </code>方法确保初始容量是 2 的幂。这是为了确保哈希值在数组中均匀分布。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 最大容量（2^30）</span>
<span class="token comment">// 如果其中任何一方隐式指定了更高的值，则使用最大容量带参数的构造函数的。必须是 2 的幂</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 构造一个新的空 HashMap，具有指定的初始容量和负载因子。
 * <span class="token keyword">@param</span> <span class="token parameter">initialCapacity</span> 初始容量。HashMap 在达到此容量之前不会进行扩容。
 * <span class="token keyword">@param</span> <span class="token parameter">loadFactor</span>      负载因子。当 HashMap 的大小超过初始容量与负载因子的乘积时，它会进行扩容。
 */</span>
<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检查初始容量是否为负数。如果是，则抛出异常。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal initial capacity: &quot;</span> <span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 如果初始容量超过了最大允许的容量，则将其设置为最大容量。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>
        initialCapacity <span class="token operator">=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 检查负载因子是否为非正数或NaN（不是一个数字）。如果是，则抛出异常。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal load factor: &quot;</span> <span class="token operator">+</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 设置负载因子为指定的值。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>
    
    <span class="token comment">// 计算并设置阈值。阈值是 HashMap 在进行扩容之前可以达到的大小。</span>
    <span class="token comment">// tableSizeFor 方法确保容量是 2 的幂，这有助于哈希值在数组中均匀分布。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这里将其中的 <code>tableSizeFor(int cap)</code> 方法单独提出来看看：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法的主要目的是为了找到大于或等于给定数值 <code>cap</code> 的最小 2 的幂次方值。这是为了确保 <code>HashMap</code> 的容量总是 2 的幂次方，从而使得哈希值在数组中均匀分布。</p><p>让我们逐步剖析这个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，从 <code>cap</code> 中减去 1。这是为了确保，如果 <code>cap</code> 已经是 2 的幂次方，我们不会选择下一个 2 的幂次方。例如，如果 <code>cap</code> 是 16（一个 2 的幂次方），我们希望返回 16 而不是 32。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一系列的位操作是为了将整数 <code>n </code>的二进制表示中的最高位之后的所有位都设置为 1。例如，如果 <code>n</code> 的二进制表示是 <code>100100</code>，那么这一系列的操作后，<code>n</code> 将变为 <code>111111</code>。</p><p>这是如何工作的：</p><ul><li><code>n &gt;&gt;&gt; 1</code> 将 <code>n</code> 右移一位，然后与原始的 <code>n </code>进行或操作，这会将 <code>n</code> 的最高位之后的第一位设置为 1。</li><li><code>n &gt;&gt;&gt; 2</code> 将 <code>n</code> 右移两位，然后与原始的 <code>n</code> 进行或操作，这会将 <code>n</code> 的最高位之后的两位设置为 1。</li><li>以此类推，直到 <code>n</code> 的所有位都被设置为 1。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，我们检查<code>n</code>的值：</p><ul><li>如果 <code>n </code>小于 0（这意味着 <code>cap</code> 是负数或 0），我们返回 1，因为 <code>HashMap</code> 的最小容量是 1，也就是 2<sup>0</sup>。</li><li>如果 <code>n </code>大于或等于 <code>MAXIMUM_CAPACITY</code>（这是 <code>HashMap</code> 的最大容量 2<sup>30</sup>），我们返回 <code>MAXIMUM_CAPACITY</code>。</li><li>否则，我们返回 <code>n + 1</code>。由于 <code>n</code> 的所有位都被设置为 1，所以 <code>n + 1</code> 将是 2 的下一个幂次方。</li></ul><blockquote><p>结论：这个方法确保了返回的容量总是 2 的幂次方，并且是大于或等于给定值 <code>cap</code> 的最小的 2 的幂次方。</p></blockquote><h3 id="_2-4-hashmap-中的链表设计" tabindex="-1"><a class="header-anchor" href="#_2-4-hashmap-中的链表设计" aria-hidden="true">#</a> 2.4 HashMap 中的链表设计</h3><ol><li><p><code>Node </code>类代表了 <code>HashMap</code> 中的一个单独的键值对。每个 <code>Node</code> 都有一个哈希值、键、值和一个指向下一个 <code>Node</code> 的引用（单链表体现）。</p></li><li><p>当多个键的哈希值映射到同一个桶（数组索引）时，这些 <code>Node </code>通过 <code>next</code> 引用链接在一起，形成一个链表。这种方法称为我们前面说的 “拉链法”，用于解决哈希冲突。</p></li><li><p><code>hash </code>字段存储的是键的哈希值，它用于确定键值对在 <code>HashMap</code> 的数组（<code>Node&lt;K,V&gt;[] table</code>）中的位置。通过这个哈希值，<code>HashMap</code>可以快速定位到键值对的存储位置。</p></li><li><p><code>key </code>和 <code>value</code> 字段分别存储键和值。<code>Node</code> 类提供了方法来获取和设置这些值。</p></li><li><p><code>Node</code> 类的 <code>equals </code>方法定义了什么构成两个 <code>Node</code> 相等：它们的键和值都必须相等。<code>hashCode</code> 方法则返回由键和值的哈希码异或得到的结果。</p></li><li><p><code>setValue </code>方法允许更新 <code>Node</code> 的值，并返回之前的值。这在 <code>put</code> 操作中是有用的，当键已经存在时，它允许 <code>HashMap</code> 更新值并返回旧值。（也就是我们前面说的覆盖）</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Node 类代表 HashMap 中的一个节点（或称为桶、条目）。
 * 它包含一个键值对，并且可以链接到下一个节点，从而形成一个链表。
 * 这种设计用于解决哈希冲突。
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">&gt;</span></span> 键的类型
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> 值的类型
 */</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// hash 是键的哈希值，用于确定节点在数组中的位置。（不可变）</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
    <span class="token comment">// 键（不可变）</span>
    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token comment">// 值</span>
    <span class="token class-name">V</span> value<span class="token punctuation">;</span>
    <span class="token comment">// 指向下一个节点的引用，形成链表结构。（单链表）</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 构造一个新的节点。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">hash</span>  键的哈希值
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>   键
     * <span class="token keyword">@param</span> <span class="token parameter">value</span> 值
     * <span class="token keyword">@param</span> <span class="token parameter">next</span>  下一个节点
     */</span>
    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取键</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// 获取值</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// 返回键值对的字符串表示形式</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// 返回节点的哈希码，由键和值的哈希码异或得到。</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 设置新值并返回旧值。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">newValue</span> 新值
     * <span class="token keyword">@return</span> 旧值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">V</span> oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>
        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 判断两个节点是否相等。
     * 两个节点相等当且仅当它们的键和值都相等。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">o</span> 要与之比较的对象
     * <span class="token keyword">@return</span> 如果指定的对象等于此节点，则返回 true
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
            <span class="token comment">// 键和值都必须相等</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-hashmap-中的红黑树设计" tabindex="-1"><a class="header-anchor" href="#_2-5-hashmap-中的红黑树设计" aria-hidden="true">#</a> 2.5 HashMap 中的红黑树设计</h3><ol><li><code>TreeNode</code> 类继承自 <code>LinkedHashMap.Entry</code>，因此它也包含了键、值、哈希值和下一个节点的引用。但为了支持红黑树结构，它增加了额外的属性，如 <code>parent</code>、<code>left</code>、<code>right</code>、<code>prev </code>和 <code>red</code>。</li><li><code>parent</code>, <code>left</code>, 和 <code>right</code> 分别表示红黑树中的父节点、左子节点和右子节点。<code>red</code>属性表示节点的颜色。在红黑树中，每个节点都有一个颜色，要么是红色，要么是黑色。</li><li><code>prev </code>属性在删除操作中很有用。当一个 <code>TreeNode</code> 被删除时，<code>prev </code>属性帮助断开与下一个节点的链接。</li><li><code>root()</code> 方法用于查找红黑树的根节点。由于每个节点都有指向其父节点的引用，所以可以通过不断地向上遍历来找到根节点。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * TreeNode 类代表了 HashMap 中的一个红黑树节点。
 * 它继承自 LinkedHashMap.Entry，因此它也是一个键值对节点。（具有双向连链表的特点）
 * 但它增加了红黑树所需的额外属性和方法。
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">&gt;</span></span> 键的类型
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> 值的类型
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 父节点的引用</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>
    <span class="token comment">// 左子节点的引用</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>
    <span class="token comment">// 右子节点的引用</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>
    <span class="token comment">// 在删除时，用于断开与下一个节点的链接</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>
    <span class="token comment">// 节点的颜色，true 表示红色，false 表示黑色</span>
    <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 构造一个新的红黑树节点。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">hash</span>  键的哈希值
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>   键
     * <span class="token keyword">@param</span> <span class="token parameter">val</span>   值
     * <span class="token keyword">@param</span> <span class="token parameter">next</span>  下一个节点
     */</span>
    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 返回红黑树的根节点。
     * 通过不断地向上遍历父节点，直到父节点为 null。
     *
     * <span class="token keyword">@return</span> 红黑树的根节点
     */</span>
    <span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> r<span class="token punctuation">;</span>
            r <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...... 其他红黑树相关的方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-hashmap-对于-null-键-值的限制" tabindex="-1"><a class="header-anchor" href="#_2-6-hashmap-对于-null-键-值的限制" aria-hidden="true">#</a> 2.6 HashMap 对于 null 键/值的限制</h3><p><code>HashMap </code>和 <code>Hashtable</code> 都是 Java 集合框架中的重要组件，用于存储键值对。但它们在处理 <code>null</code> 键和值时有所不同。<code>Hashtable </code>是一个较早的哈希表安全实现，它不允许 <code>null</code> 键或值。如果尝试将 <code>null</code> 键或值插入 <code>Hashtable</code>，它会抛出 <code>NullPointerException</code>。</p><p><code>HashMap </code>是 <code>Hashtable</code> 的一个更现代的替代品，它在设计时考虑到了更多的用例。其中一个明显的改进是允许 <code>null</code> 键和值。这种设计选择为开发者提供了更大的灵活性，因为在某些应用场景中，<code>null</code> 可能是一个有效的或有意义的键或值。</p><p>🤔 <strong>为什么 null 键存储在第一个位置？</strong></p><p>在 <code>HashMap</code> 中，键的哈希值用于确定其在内部数组中的位置。但是，<code>null</code> 没有真正的哈希值。为了简化设计和处理，Java 的设计者决定将 <code>null</code> 键的哈希值定义为 0。由于数组的索引是从 0 开始的，这意味着 <code>null</code> 键总是存储在哈希表的第一个位置。</p><p>与 <code>null</code> 键类似，<code>HashMap</code> 也允许 <code>null</code> 值。但值的哈希值不用于确定其位置，因为只有键的哈希值用于这个目的。因此，<code>null </code>值的处理方式与其他非 <code>null</code> 值没有太大区别。</p><p>将 <code>null</code> 键存储在固定位置可以简化 <code>HashMap</code> 的某些操作。例如，当检查一个键是否存在于 <code>HashMap</code> 中时，如果该键是 <code>null</code>，那么只需要检查数组的第一个位置。这避免了不必要的哈希计算和其他检查。</p><p>我们通过具体源码来看看处理关键点：</p><ol><li><p>在向 hashMap 添加一个元素时，会先根据键计算哈希值：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-091404.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在具体计算中，通过一个三目运算符检查键是否为 null，如果为 null，则直接返回 0。这意味着所有 null 键都会被放在哈希表的同一个位置（即数组的第一个位置）</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-091505.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>hash 值为 0，那么 <code>(n - 1) &amp; hash</code> 必然也为 0，最终键为 null 的数据将被存储在第一个桶中（数组索引为 0）：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-091825.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>当再次插入 null 键时，会检查到给定的键已经存在于 HashMap 中，那么其值将被新值替换（除非 onlyIfAbsent 为 true 并且当前值不为 null）。具体来说就是首先检查哈希值是否相同（这一步都为 0），然后检查键（相同）是否相同。如果两个键都为 <code>null</code>，它们被认为是相同的。如果一个键为 <code>null</code> 而另一个键不为 <code>null</code>，它们被认为是不同的。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-092832.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><blockquote><p><code>HashMap</code>不对值进行任何特殊处理。可以有多个 <code>null</code> 值，因为值的<code>null</code>状态不影响哈希表的结构或功能。在<code>putVal</code>方法中，新值简单地替换了旧值，不论新值或旧值是否为<code>null</code>。</p></blockquote><h3 id="_2-7-hashmap-的插入无序性" tabindex="-1"><a class="header-anchor" href="#_2-7-hashmap-的插入无序性" aria-hidden="true">#</a> 2.7 HashMap 的插入无序性</h3><p><code>HashMap</code>不保证元素的顺序，这是由其内部结构和工作原理决定的。相信不用说你大概也能想到了。下面简单指点一二：</p><ol><li><p><strong>基于哈希值的存储</strong>：</p><p>当插入一个新的键值对时，<code>HashMap</code>首先计算键的哈希值。这个哈希值决定了键值对在内部数组（称为<code>table</code>）中的位置。由于哈希函数的性质，不同的键可能会有相同的哈希值，这称为哈希冲突。为了解决这种冲突，<code>HashMap</code>使用链表或红黑树（在链表长度超过一定阈值时）来存储具有相同哈希值的元素。由于这种基于哈希值的存储方式，元素的物理存储顺序与插入顺序可能不同。</p></li><li><p><strong>动态扩容</strong>：</p><p>当<code>HashMap</code>中的元素数量超过其容量与负载因子的乘积（称为<code>threshold</code>）时，<code>HashMap</code>会进行扩容。扩容意味着创建一个新的、更大的内部数组，并将旧数组中的所有元素重新放入新数组。在这个过程中，元素的位置可能会改变，因为它们的位置是基于数组的大小和哈希值计算的。</p></li><li><p><strong>不维护插入顺序的数据结构</strong>：</p><p><code>HashMap</code>的内部数据结构（数组、链表、红黑树）都不维护元素的插入顺序。如果需要维护插入顺序，那么<code>HashMap</code>的插入、删除和查找操作的时间复杂度可能会增加。</p></li><li><p><strong>设计目标</strong>：</p><p><code>HashMap</code>的主要设计目标是提供快速的插入、删除和查找操作，而不是维护元素的顺序。如果需要保持插入顺序，可以使用<code>LinkedHashMap</code>，它在<code>HashMap</code>的基础上增加了指向前一个和后一个元素的链接，从而维护了插入顺序。</p></li></ol><h2 id="_3-hashmap-的性能如何" tabindex="-1"><a class="header-anchor" href="#_3-hashmap-的性能如何" aria-hidden="true">#</a> 3.HashMap 的性能如何？</h2><p>先看 JDK 官方说明：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-042935.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 大致翻译：</p><p>这种实现为基本操作（如 <code>get</code> 和 <code>put</code>）提供了近乎恒定的执行时间，前提是哈希函数能够在各个桶之间均匀地分布元素。遍历集合视图的时间与 <code>HashMap</code> 实例的 “容量”（桶的数量）和其大小（键值对的数量）成正比。因此，如果遍历性能很重要，那么初始容量不应设置得太大，同时加载因子也不应设置得太低。</p></blockquote><p><code>HashMap</code>的性能在很大程度上取决于哈希函数的质量。理想的哈希函数应该将键均匀地分布在所有的桶中，这样每个桶中的元素数量就会大致相同。如果哈希函数的质量不好，某些桶可能会有很多元素，而其他桶可能只有很少或没有元素。这种情况称为哈希碰撞。当一个桶中的元素数量过多时，查找、插入和删除操作的性能就会下降，因为它们需要在链表或红黑树中进行。</p><p><code>HashMap</code>的容量是其内部数组（桶）的数量。当我们插入新的键值对时，<code>HashMap</code>会使用哈希函数计算键的哈希值，然后使用这个哈希值来确定键值对应该存储在哪个桶中。如果容量太小，会有很多哈希碰撞，这会降低性能。但如果容量太大，那么内存使用率会降低，因为很多桶可能都是空的。</p><p>加载因子是一个测量 <code>HashMap</code> 满载程度的指标。它是 <code>HashMap</code> 中元素数量与容量的比值。当 <code>HashMap</code> 的大小超过其容量与加载因子的乘积时，<code>HashMap</code> 会进行扩容。扩容操作会创建一个新的、更大的桶数组，并将旧数组中的所有元素重新放入新数组。如果加载因子太低，那么 <code>HashMap</code> 会频繁地进行扩容，这会浪费时间和空间。但如果加载因子太高，那么哈希碰撞的可能性就会增加，这会降低性能。</p><p>遍历 <code>HashMap</code> 的性能取决于其容量和大小。如果容量太大，那么遍历操作就会浪费时间，因为它需要遍历很多空的桶。如果遍历性能很重要，那么应该选择一个适中的初始容量，并设置一个合适的加载因子。</p><hr><h3 id="_3-1-get-object-key" tabindex="-1"><a class="header-anchor" href="#_3-1-get-object-key" aria-hidden="true">#</a> 3.1 get(Object key)</h3><p>以 <code>HashMap</code> 的 <code>get(Object key)</code> 方法为例。这个方法的主要目的是根据给定的键来检索对应的值。它首先计算键的哈希值，然后使用<code>getNode</code>方法来查找对应的节点。如果找到了节点，它就返回节点的值；否则，返回<code>null</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
    <span class="token comment">// 计算键的哈希值，使用 getNode 方法来查找对应的节点</span>
   <span class="token comment">// 如果找到了节点，它就返回节点的值；否则，返回 null</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
    <span class="token comment">// 检查哈希表是否已初始化并且长度大于 0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// 计算键应该存储在哪个桶中</span>
        <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查桶的第一个节点是否与给定的键匹配</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> 
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> first<span class="token punctuation">;</span>
        <span class="token comment">// 如果第一个节点不匹配，检查是否有其他节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果节点是 TreeNode （红黑树）类型，使用红黑树查找</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 否则，遍历链表查找匹配的节点</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果没有找到匹配的节点，返回 null</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✏️ 查找流程：</p><p><code>HashMap</code>的<code>get</code>方法首先计算给定键的哈希值，然后使用这个哈希值来确定键应该存储在哪个桶中。然后，它检查桶的第一个节点是否与给定的键匹配。如果不匹配，它会检查桶中是否有其他节点。如果桶中的节点是 <code>TreeNode</code> 类型，它会使用红黑树查找；否则，它会遍历链表查找。如果找到了匹配的节点，它就返回节点的值；否则，返回 <code>null</code>。</p><h3 id="_3-2-put-k-key-v-value" tabindex="-1"><a class="header-anchor" href="#_3-2-put-k-key-v-value" aria-hidden="true">#</a> 3.2 put(K key, V value)</h3><p>HashMap 添加元素的 API 中有且仅有一个 <code>put(K key, V value)</code> 是公共的，内部还使用了一个 <code>putVal</code> 进行具体的插入（或更新）逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 主要的 put 操作，其中 hash(key) 计算键的哈希值</span>
    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
  
    <span class="token comment">// 检查哈希表是否已初始化，如果没有，则进行初始化</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  
    <span class="token comment">// 计算键应该存储在哪个桶中，并检查该桶是否为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token comment">// 如果桶为空，创建一个新节点并放入桶中</span>
        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
      
        <span class="token comment">// 检查桶的第一个节点是否与给定的键匹配</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> 
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            e <span class="token operator">=</span> p<span class="token punctuation">;</span>
      
        <span class="token comment">// 如果节点是 TreeNode 类型，使用红黑树插入</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 否则，遍历链表查找匹配的节点或插入位置</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  
                    <span class="token comment">// 如果链表长度超过阈值，转换为红黑树</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                p <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      
        <span class="token comment">// 如果找到了匹配的节点，更新其值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key</span>
            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  
    <span class="token comment">// 修改计数器增加</span>
    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
  
    <span class="token comment">// 如果大小超过阈值，进行扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>
        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是 <code>put</code> 操作的详细步骤：</p><ol><li><strong>计算哈希值</strong>：首先，为给定的键计算哈希值。确保键值对在哈希表中的分布是均匀的。</li><li><strong>确定桶位置</strong>：使用计算出的哈希值确定键值对应该存储在哪个桶中。</li><li><strong>初始化或扩容</strong>：如果哈希表尚未初始化，或者其大小为 0，则首先进行初始化或扩容。</li><li><strong>检查桶的第一个节点</strong>：查看计算出的桶位置是否已有节点存在。 <ul><li>如果桶为空，直接在该位置创建一个新节点。</li><li>如果桶的第一个节点与给定的键匹配，更新该节点的值。</li></ul></li><li><strong>处理哈希冲突</strong>：如果桶中已有节点，并且与给定的键不匹配，需要处理哈希冲突。 <ul><li>如果桶中的节点是 <code>TreeNode </code>类型（即红黑树的节点），则在红黑树中插入或更新节点。</li><li>如果桶中的节点是普通链表节点，则遍历链表，查找匹配的节点或插入位置。 <ul><li>如果在链表中找到与给定键匹配的节点，更新该节点的值。</li><li>如果链表中没有与给定键匹配的节点，将新节点添加到链表的末尾。</li><li>如果链表的长度超过了预定的阈值（例如 8），则将链表转换为红黑树，以提高后续操作的效率。</li></ul></li></ul></li><li><strong>更新计数器和扩容</strong>：每次添加新节点时，都会增加 <code>modCount</code>（修改计数器）。此外，如果哈希表的大小（即键值对的数量）超过了预定的阈值，哈希表会进行扩容，以确保其性能。</li><li><strong>返回值</strong>：如果给定的键在哈希表中已有对应的值，<code>put</code>方法会返回旧值；否则，返回<code>null</code>。</li></ol><h2 id="_4-hashmap-如何高效存储" tabindex="-1"><a class="header-anchor" href="#_4-hashmap-如何高效存储" aria-hidden="true">#</a> 4.HashMap 如何高效存储？</h2><p>先看 JDK 官方说明：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-043026.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 大致翻译：</p><p>如果你计划在一个 <code>HashMap</code> 实例中存储大量的映射，最好一开始就为它设置一个足够大的容量。这样，映射的存储效率会比让它在需要时自动进行重新哈希来增长表格更高。需要注意的是，使用很多具有相同 <code>hashCode()</code> 的键会显著降低任何哈希表的性能。为了减轻这种影响，当键是可比较的（<code>Comparable</code>），<code>HashMap</code> 可能会使用键之间的比较顺序来帮助解决冲突。</p></blockquote><p>假设你正在为一个大型电商网站设计一个购物车系统。每个用户都有一个购物车，购物车中可能包含数百个商品。为了快速查找、添加和删除商品，你决定使用 <code>HashMap</code> 来存储购物车中的商品，其中键是商品 ID，值是商品的详细信息。</p><ul><li><p><strong>问题1：</strong> 如果你预计每个购物车平均会有 500 个商品，那么初始容量应该设置为多少？</p><p>由于 <code>HashMap</code> 的默认负载因子是 0.75，这意味着当其 75% 的容量被使用时，它会自动扩容。为了避免频繁的扩容操作，你可以一开始就将其容量设置为大约 667（500/0.75）。（阈值 = 容量*负载因子）</p></li><li><p><strong>问题2：</strong> 如果大多数商品 ID 的哈希值都相同怎么办？</p><p>这会导致大多数商品都存储在同一个桶中，从而导致哈希冲突。这样，<code>HashMap</code> 的性能会大大降低，因为它必须遍历链表或红黑树来查找、添加或删除商品。为了解决这个问题，你需要确保商品 ID 的哈希函数能够产生均匀分布的哈希值。</p></li><li><p><strong>问题3：</strong> 如果商品 ID 是可比较的（例如，它们是整数或字符串），<code>HashMap</code> 如何帮助解决冲突？</p><p>当链表长度超过一定阈值时，<code>HashMap</code>会将链表转换为红黑树。红黑树是一种自平衡的二叉搜索树，它可以保证在最坏的情况下也有对数级的查找、插入和删除时间。由于商品 ID 是可比较的，<code>HashMap</code>可以使用它们的自然顺序来组织红黑树，从而提高性能。</p></li></ul><p>📒 结论：当使用 <code>HashMap</code> 时，为了获得最佳性能，你应该确保：</p><ol><li>根据预期的元素数量正确设置初始容量。</li><li>使用能够产生均匀分布哈希值的哈希函数。</li><li>利用 <code>HashMap</code> 的红黑树特性来处理可比较的键。</li></ol><h2 id="_5-hashmap-为什么不是同步的" tabindex="-1"><a class="header-anchor" href="#_5-hashmap-为什么不是同步的" aria-hidden="true">#</a> 5.HashMap 为什么不是同步的？</h2><p>先看 JDK 官方说明：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-043047.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 大致翻译：</p><p>请注意，这个 <code>HashMap</code> 实现不是线程同步的。如果多个线程同时访问一个哈希映射，并且至少有一个线程在结构上修改了映射，那么你需要在外部对其进行同步。结构修改指的是增加或删除一个或多个映射的任何操作；仅仅更改已存在的键的关联值并不算作结构修改。通常，我们通过在封装映射的对象上进行同步来实现这一点。如果不存在这样的对象，你应该使用 <code>Collections.synchronizedMap</code> 方法来 “包装” 映射。最好在创建映射时就这样做，以防止对映射的意外非同步访问：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span> m <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p><code>HashMap </code>在多线程环境下的线程不安全性主要体现在以下几个方面：</p><ol><li><strong>扩容操作（resize）</strong>：当多个线程同时发现 <code>HashMap</code> 需要扩容时，它们可能会并发地尝试扩容。这可能导致数据丢失或者链表形成环状结构，从而导致无限循环。</li><li><strong>链表转红黑树</strong>：当链表长度超过 <code>TREEIFY_THRESHOLD</code> 时，<code>HashMap</code> 会尝试将链表转换为红黑树。如果多个线程同时尝试这个转换，可能会导致树的结构出现问题。</li><li><strong>并发插入</strong>：当两个线程同时尝试在同一个桶中插入不同的节点时，一个线程的更改可能会被另一个线程覆盖，导致数据丢失。</li><li><strong>并发修改</strong>：当一个线程正在读取一个键的值，而另一个线程正在修改该键的值时，第一个线程可能会看到不一致的数据。</li></ol><p>结合 HashMap 的 <code>putVal()</code> 源码进行分析：</p><ol><li><p>在 <code>if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length;</code>这一行，多个线程可能会同时认为数组需要初始化或扩容，从而导致多次初始化或扩容。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-101759.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在 <code>tab[i] = newNode(hash, key, value, null);</code> 这一行，如果两个线程计算出相同的索引并尝试同时插入，一个线程的插入可能会被另一个线程覆盖。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-101948.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在链表遍历的部分，两个线程可能会同时尝试在链表的末尾添加新的节点，导致其中一个线程的节点丢失。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-102153.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在 <code>if (binCount &gt;= TREEIFY_THRESHOLD - 1) treeifyBin(tab, hash);</code> 这一行，多个线程可能会同时尝试将链表转换为红黑树。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-102358.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在 <code>++modCount; </code>和 <code>if (++size &gt; threshold) resize();</code> 这两行，多个线程可能会导致 <code>modCount </code>和 <code>size</code> 的不正确更新。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-102430.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><p>可见，由于<code>HashMap</code>的内部结构和算法，它在多线程环境下是不安全的。为了确保 <code>HashMap</code> 在多线程环境下的线程安全性，你可以使用 Java 的 <code>synchronized</code> 关键字进行外部同步。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ... 其他方法也应该进行同步 ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，我们创建了一个 <code>SynchronizedHashMap</code> 类，它内部包含一个 <code>HashMap</code>。我们为每个公开的方法添加了 <code>synchronized</code> 关键字，确保在任何时候只有一个线程可以访问 <code>map</code> 的方法。</p><blockquote><p>这种方法确实增加了线程安全性，但可能会降低性能，因为每次只有一个线程可以访问<code>HashMap</code>。如果你需要更高的并发性能，可以考虑使用<code>ConcurrentHashMap</code>，它是为并发访问设计的。</p></blockquote><h2 id="_6-hashmap-迭代器的-fail-fast" tabindex="-1"><a class="header-anchor" href="#_6-hashmap-迭代器的-fail-fast" aria-hidden="true">#</a> 6.HashMap 迭代器的 fail-fast</h2><p>先看 JDK 官方说明：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-21-043105.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>📖 大致翻译：</p><p>此类的 “集合视图方法” 返回的迭代器是快速失败的：如果在创建迭代器后的任何时候映射在结构上被修改（除非通过迭代器自己的 <code>remove</code> 方法），迭代器将抛出 <code>ConcurrentModificationException</code> 异常。这意味着，当面临并发修改时，迭代器会迅速且明确地失败，而不是在未来某个不确定的时间里冒着产生随机、不确定行为的风险。</p></blockquote><p>✏️ <strong>Fail-Fast 机制：</strong></p><p>&quot;Fail-fast&quot; 是一个编程术语，描述了当某个问题出现时，系统能迅速报告错误，而不是尝试继续执行并可能导致不确定的行为。在 Java 集合框架中，<strong>fail-fast 机制主要是通过迭代器实现</strong>的。当<strong>多个线程同时修改一个集合</strong>时，迭代器可以<strong>快速检测到这种并发修改</strong>并立即抛出 <code>ConcurrentModificationException</code> 异常。</p><p>🤔 <strong>为什么需要 Fail-Fast 机制？</strong></p><p>这种机制的主要目的是为了提早发现问题。如果没有这种机制，可能会导致难以追踪的错误或不可预测的结果。通过 fail-fast，开发者可以立即知道有并发修改的问题，并可以采取相应的措施。</p><p>看如下示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailFastExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cityMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cityMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;USA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Washington DC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cityMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Berlin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cityMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;India&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;New Delhi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取 keys 的迭代器</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> cityMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cityMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 这里我们尝试在迭代过程中修改 map，这将导致 ConcurrentModificationException</span>
            cityMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，我们创建了一个 <code>HashMap</code> 并尝试在迭代其键的同时修改它。当我们尝试这样做时，迭代器检测到结构上的修改并立即抛出 <code>ConcurrentModificationException</code> 异常。</p><blockquote><p>⚠️ 注意：fail-fast 机制不能保证在所有场景下都能检测到并发修改，它只能在最好努力的基础上进行检测。如果你需要一个真正线程安全的集合，应该考虑使用如 <code>ConcurrentHashMap</code> 这样的并发集合。</p></blockquote><h2 id="_7-hashmap-扩容原理" tabindex="-1"><a class="header-anchor" href="#_7-hashmap-扩容原理" aria-hidden="true">#</a> 7.HashMap 扩容原理</h2><p>最后看看 HashMap 的扩容细节。<code>HashMap</code> 的 <code>resize</code> 方法在 <code>HashMap</code> 的大小超过其阈值时被调用，以增加哈希表的容量并重新哈希现有的条目。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 旧的哈希表</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token comment">// 旧的容量</span>
    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 旧的阈值</span>
    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果旧容量大于0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果旧容量已经达到最大值（2^30）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将阈值修改为 int 最大值（21亿左右）</span>
            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 否则，新容量是旧容量的两倍</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span>
                 oldCap <span class="token operator">&gt;=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span>
            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 阈值也翻倍</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果旧的阈值大于0，但旧的容量为0</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span> <span class="token comment">// 使用旧的阈值作为新的容量</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 使用默认值</span>
        newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span>
        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果新的阈值为0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>
        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">?</span>
                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>

    <span class="token comment">// 创建新的哈希表</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>
    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>

    <span class="token comment">// 如果旧的哈希表不为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历旧的哈希表</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果节点没有后续节点</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token comment">// 如果节点是 TreeNode 类型</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 保持原有的顺序</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
                    <span class="token keyword">do</span> <span class="token punctuation">{</span>
                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                        <span class="token comment">// 根据节点的哈希值决定它应该放在新的哈希表的哪个位置</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token keyword">else</span>
                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token keyword">else</span>
                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HashMap</code> 的扩容过程可以总结为以下步骤：</p><ol><li><strong>确定新的容量和阈值</strong>： <ul><li>如果旧的哈希表容量大于 0，新的容量将是旧容量的<strong>两倍</strong>，除非旧容量已经达到最大值。</li><li>如果旧的哈希表容量为 0，但阈值大于 0，新的容量将是旧的阈值。</li><li>如果旧的哈希表容量和阈值都为 0，新的容量和阈值将设置为默认值。</li><li>最后，基于新的容量和负载因子来计算新的阈值。</li></ul></li><li><strong>创建新的哈希表</strong>：基于新的容量创建一个新的哈希表。</li><li><strong>重新哈希旧的条目</strong>： <ul><li>遍历旧的哈希表中的每个桶。</li><li>对于每个桶中的每个节点，根据其哈希值和新的容量确定它在新的哈希表中的位置。</li><li>如果节点是一个 <code>TreeNode</code>（红黑树的节点），则调用 <code>split</code> 方法来处理它。</li><li>如果节点是一个普通节点，并且有多个节点在同一个桶中，那么需要保持它们（链表）的相对顺序不变。</li></ul></li><li><strong>返回新的哈希表</strong>：完成重新哈希后，返回新的哈希表。</li></ol>`,280),o=[t];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","03-源码-HashMap.html.vue"]]);export{k as default};
