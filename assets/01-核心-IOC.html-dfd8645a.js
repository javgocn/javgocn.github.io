import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a as n,d as a,b as e,f as t}from"./app-009ef08a.js";const l={},u=t(`<h2 id="_1-介绍-spring-ioc-容器和-beans" tabindex="-1"><a class="header-anchor" href="#_1-介绍-spring-ioc-容器和-beans" aria-hidden="true">#</a> 1.介绍 Spring IoC 容器和 Beans</h2><p>控制反转（IoC）是一种设计原则，用于将对象之间的依赖关系从程序代码中解耦。在 Spring 框架中，IoC 的实现被称为依赖注入（DI）。</p><p>DI 的核心思想是，对象的依赖关系不再由对象自己创建和管理，而是由外部容器（如 Spring IoC 容器）来负责。具体来说，对象通过以下方式定义其依赖关系：</p><ul><li><strong>构造函数参数</strong>：对象可以通过构造函数参数将自己的依赖关系传递给被创建的对象。</li><li><strong>工厂方法的参数</strong>：如果一个对象需要依赖其他对象，它可以提供一个工厂方法，该方法接受所需的依赖对象作为参数，并返回一个新的对象实例。</li><li><strong>在对象实例构造或从工厂方法返回后设置在对象实例上的属性</strong>：有时，对象可以在实例化后或从工厂方法返回时，通过设置属性来暴露其依赖关系（例如 Setter 方式的依赖注入）。</li></ul><p>一旦对象的依赖关系被定义好，容器会在创建该对象时自动注入所需的依赖对象，而无需我们进行管理和维护。容器会根据预先配置的规则和映射关系，将依赖关系注入到相应的位置。</p><p>这种控制反转的过程与 bean 本身控制其依赖项的实例化或位置的方式截然相反。在没有使用 IoC 的情况下，bean 可能会直接使用类直接构造或服务定位器模式等方式来管理其依赖关系。然而，通过使用 IoC，Spring 框架将这些管理工作交由容器来完成，从而简化了开发人员的工作。</p><p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 包是 Spring Framework 的 IoC 容器的基础。其中 <code>BeanFactory</code> 接口提供了一种高级的配置机制，能够管理任何类型的对象。而 <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口，它对 <code>BeanFactory</code> 的功能进行了扩展。</p><p>具体来说，它添加了：</p><ul><li>更容易与 Spring 的 AOP 功能集成</li><li>消息资源处理（用于国际化）</li><li>事件发布</li><li>应用程序层特定的上下文，如 <code>WebApplicationContext</code>，用于 web 应用程序。</li></ul><p>简而言之，<code>BeanFactory</code> 提供了配置框架和基本功能，而 <code>ApplicationContext</code> 添加了更多企业级特定功能。<code>ApplicationContext</code> 是 <code>BeanFactory</code> 的完整超集，在本章节的描述中用于使用 Spring 的 IoC 容器来代指 <code>ApplicationContext</code>。</p><blockquote><p>TIP：如果你想了解更多关于使用 <code>BeanFactory</code> 而不是 <code>ApplicationContext</code> 的信息，请参阅涵盖 BeanFactory API 的部分。</p></blockquote><p>在 Spring 中，由 Spring IoC 容器管理并构成应用程序骨干的对象被称为 beans。一个 bean 是通过 Spring IoC 容器实例化、组装和管理的对象。否则，bean 只是应用程序中众多对象之一。beans 及其之间的依赖关系通过容器使用的元数据配置进行反映。</p><h2 id="_2-容器概述" tabindex="-1"><a class="header-anchor" href="#_2-容器概述" aria-hidden="true">#</a> 2.容器概述</h2><p><code>org.springframework.context.ApplicationContext</code> 接口代表了 Spring 的 IoC 容器，负责实例化、配置和组装 Bean。容器通过读取配置元数据来获取要实例化、配置和组装的对象指令。配置元数据可以以 XML、Java 注解或 Java 代码的形式来表示。它允许您表达组成应用程序的对象以及这些对象之间的依赖关系。</p><p>Spring 提供了多个 <code>ApplicationContext</code> 接口的实现。在独立应用程序中，通常创建 <code>ClassPathXmlApplicationContext</code> 或 <code>FileSystemXmlApplicationContext</code> 的实例。</p><blockquote><p>TIP：ClassPathXmlApplicationContext vs FileSystemXmlApplicationContext</p><ol><li><code>ClassPathXmlApplicationContext</code>：这个类用于加载类路径（classpath）下的 XML 配置文件来初始化 <code>ApplicationContext</code>。它的应用场景通常是在开发阶段，当应用程序需要使用外部的配置文件进行初始化时，可以使用这个类。它的主要优点是简单易用，不需要额外的文件系统权限，但是缺点是只能加载类路径下的配置文件，对于其他路径或者远程的配置文件无法处理。</li><li><code>FileSystemXmlApplicationContext</code>：这个类用于加载文件系统中的 XML 配置文件来初始化 <code>ApplicationContext</code>。它的应用场景通常是在生产环境中，当应用程序需要使用外部的配置文件进行初始化时，可以使用这个类。它的主要优点是可以加载任意位置的配置文件，但是缺点是需要文件系统的权限，而且相对复杂一些。</li></ol></blockquote><p>简言之，<code>ClassPathXmlApplicationContext</code> 和 <code>FileSystemXmlApplicationContext</code> 的主要区别在于加载配置文件的位置和是否需要文件系统权限。在实际使用中，可以根据具体的应用场景和需求选择合适的实现类。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-12-144520.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虽然 XML 一直是定义配置元数据的传统格式，但您也可以通过提供少量的 XML 配置来指示容器使用 Java 注解或 Java 代码作为元数据格式，从而声明式地支持这些额外的元数据格式。</p><p>下图显示了 Spring 工作的高级视图。您的应用程序类与配置元数据结合，因此，在创建和初始化 <code>ApplicationContext</code> 之后，您将拥有一个完全配置且可执行的系统或应用程序。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-12-144531.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的工作图中，我们也能看出 Spring IoC 实现原理：</p><ol><li>从配置元数据（XML、Java 注解或 Java 配置类）中获取需要依赖注入（DI）的业务 POJO；</li><li>将业务 POJOs 封装成 <code>BeanDefinition</code> 注入到 Spring Container 之中进行管理；</li><li>需要使用时通过 <code>ApplicationContext</code> 从 Spring Container 中直接获取即可。</li></ol><h3 id="_2-1-配置元数据" tabindex="-1"><a class="header-anchor" href="#_2-1-配置元数据" aria-hidden="true">#</a> 2.1 配置元数据</h3><p>如上一节的工作图可知，Spring IoC 容器会选择至少一种形式的配置元数据（XML、Java 注解或 Java 配置类）。这种配置元数据表示您作为应用程序开发者，如何告诉 Spring 容器应该如何实例化、配置和组装应用程序中的对象。</p><p>配置元数据通常以简单直观的 XML 格式提供，传统的项目开发大都使用这种格式来传达 Spring IoC 容器的关键概念和特性。然而，Spring 发展至今，许多开发人员选择基于 Java 的配置来管理他们的 Spring 应用程序。因此，在对 Spring 官方文档进行解读时，我将摈弃传统的使用 XML 配置元数据的方式，而是使用 Java 注解或者 JavaConfig 的方式进行配置，有关 XML 方式的使用请自行参考官方文档。</p><blockquote><p>TIP：</p><ul><li>注解式配置：Spring 2.5 引入了对基于注解的配置元数据的支持。</li><li>Java 配置：从 Spring 3.0 开始，Spring JavaConfig 项目提供的功能已成为 Spring 框架的核心部分。因此，您可以使用 Java 而不是 XML 文件来定义应用程序类之外的 bean。</li></ul></blockquote><p>下面我们分别简单介绍基于 Java 注解和 JavaConfig 方式的配置，更详细的说明将在后面的对应小节进行详细转开。</p><h4 id="_2-1-1-java-注解配置" tabindex="-1"><a class="header-anchor" href="#_2-1-1-java-注解配置" aria-hidden="true">#</a> 2.1.1 Java 注解配置</h4><p>首先，需要在类上添加相应的注解（<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 等）来标识这个类是 Spring 容器管理的 Bean。例如，假设我们有一个名为 <code>MyService</code> 的类，我们可以使用 <code>@Service</code> 注解来标识这个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>	<span class="token comment">// 注册为业务 Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在需要使用这个 Bean 的地方，可以通过 <code>@Autowired</code> 注解进行注入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>	<span class="token comment">// 注册为普通 Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span>

    <span class="token comment">// MyComponent Bean 需要依赖的 MyService Bean</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>

    <span class="token comment">// 构造注入</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token class-name">MyService</span> myService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myService <span class="token operator">=</span> myService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-javaconfig-配置" tabindex="-1"><a class="header-anchor" href="#_2-1-2-javaconfig-配置" aria-hidden="true">#</a> 2.1.2 JavaConfig 配置</h4><p>首先，需要创建一个配置类，并使用 <code>@Configuration</code> 注解标记这个类。在这个类中，可以使用 <code>@Bean</code> 注解定义 Bean，并使用 <code>@ComponentScan</code> 注解指定需要扫描的包路径：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>	<span class="token comment">// 标记为 JavaConfig，本身也会被注册为 Bean</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.example&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 要扫描并注册到容器的包路径（通常是扫描注解方式配置的 Bean）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Bean</span>	<span class="token comment">// 定义一个 Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// 通常是一个方法，返回值就是 Bean 类型，方法名则为 Bean 在容器中的名称</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们定义了一个名为 <code>myService</code> 的 Bean。接下来，在需要使用这个 Bean 的地方，同样可以通过 <code>@Autowired</code> 注解进行注入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>	<span class="token comment">// 注册为普通 Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span>

    <span class="token comment">// MyComponent Bean 需要依赖的 MyService Bean</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>

    <span class="token comment">// 构造注入</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span><span class="token class-name">MyService</span> myService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myService <span class="token operator">=</span> myService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>小结： Java 注解配置和 JavaConfig 配置的主要区别在于注解的使用方式。Java 注解配置主要依赖于自定义的注解，而 JavaConfig 配置则依赖于 Spring 提供的 <code>@Configuration</code>、<code>@Bean</code> 等注解。在实际项目中，可以根据具体需求选择合适的配置方式。</p></blockquote><h3 id="_2-2-实例化容器" tabindex="-1"><a class="header-anchor" href="#_2-2-实例化容器" aria-hidden="true">#</a> 2.2 实例化容器</h3><p>在定义了上面的 Bean 后，我们如何实例化 <code>ApplicationContext</code> 容器呢？传统基于 XML 的方式是通过 <code>ApplicationContext</code>的两个常用实现 <code>ClassPathXmlApplicationContext</code> 或 <code>FileSystemXmlApplicationContext</code> 读取类路径或者文件系统中的 Spring 配置文件（如 applicationContext.xml）。</p><p>下面简单提及示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从 CLASSPATH 加载配置文件</span>
<span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从文件系统加载配置文件</span>
<span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;D:/applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们更多时候是使用 Java 注解 + JavaConfig 的方式进行 Bean 的注册的，所以这里想要获取到 <code>ApplicationContext</code>，我们可以使用它的另一个实现 <code>AnnotationConfigApplicationContext</code>来加载配置文件并实例化容器：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-12-144608.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实例化容器</span>
        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-使用容器" tabindex="-1"><a class="header-anchor" href="#_2-3-使用容器" aria-hidden="true">#</a> 2.3 使用容器</h3><p>拿到 <code>ApplicationContext</code> 容器后，我们应该如何访问容器中的 Bean 呢？我们知道 <code>ApplicationContext</code> 是超级工厂 <code>BeanFactory</code> 的扩展，<code>BeanFactory</code> 负责创建和管理 Bean，该接口提供了一系列的 <code>getBean()</code> 方法用来获取容器中管理的 Bean：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-12-144619.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对应源码解释如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 根据指定名称获取 Bean 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">name</span> Bean 的名称
     * <span class="token keyword">@return</span> 返回指定名称的 Bean 对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">BeansException</span></span> 如果获取 Bean 对象时发生异常
     */</span>
    <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 根据指定名称和类型获取 Bean 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">name</span> Bean 的名称
     * <span class="token keyword">@param</span> <span class="token parameter">requiredType</span> Bean 的类型
     * <span class="token keyword">@return</span> 返回指定名称和类型的 Bean 对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">BeansException</span></span> 如果获取 Bean 对象时发生异常
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 根据指定名称和参数列表获取 Bean 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">name</span> Bean 的名称
     * <span class="token keyword">@param</span> <span class="token parameter">args</span> 参数列表
     * <span class="token keyword">@return</span> 返回指定名称和参数列表的 Bean 对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">BeansException</span></span> 如果获取 Bean 对象时发生异常
     */</span>
    <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 根据指定类型获取 Bean 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">requiredType</span> Bean 的类型
     * <span class="token keyword">@return</span> 返回指定类型的 Bean 对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">BeansException</span></span> 如果获取 Bean 对象时发生异常
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 根据指定类型和参数列表获取 Bean 对象。
     * <span class="token keyword">@param</span> <span class="token parameter">requiredType</span> Bean 的类型
     * <span class="token keyword">@param</span> <span class="token parameter">args</span> 参数列表
     * <span class="token keyword">@return</span> 返回指定类型和参数列表的 Bean 对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">BeansException</span></span> 如果获取 Bean 对象时发生异常
     */</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token comment">// ... ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何理解上面的 <code>Object... args</code>？<code>Object... args</code> 表示一个可变参数列表。具体来说，它是一个对象数组，可以传入任意数量的参数。假设我们有一个名为 <code>MyService</code> 的类，它有一个带有两个参数的构造函数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以使用 <code>Object... args</code> 来创建一个 <code>MyService</code> 实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyService</span> myService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myService&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，我们将两个参数 &quot;John&quot; 和 30 打包成一个数组传递给 <code>getBean</code> 方法。这个方法会将数组中的参数依次传递给 <code>MyService</code> 的构造函数，从而创建一个 <code>MyService</code> 实例。</p><blockquote><p>注意：在使用可变参数列表时，我们需要确保传递给方法的参数类型与目标方法的参数类型匹配。否则，会抛出 <code>IncompatibleClassChangeError</code> 异常。</p></blockquote><p>下面我们分别介绍每个 API 的使用示例。</p><ol><li>根据指定名称获取 Bean 对象（需要强制类型转换）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyComponent</span> myComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyComponent</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myComponent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>根据指定名称和类型获取 Bean 对象（不需要强制类型转换）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyService</span> myService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myService&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>根据指定类型获取 Bean 对象（不需要强制类型转换）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyService</span> myService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在实际应用中，推荐使用第 2 种方式（根据指定名称和类型获取 Bean 对象），因为这种方式代码简洁，易于理解。同时，通过类型参数可以确保返回的 Bean 对象是我们期望的类型，避免了强制类型转换可能导致的问题。同时我们也指定了 Bean 名称，从而确保获取到我们想要的 Bean。</p><h2 id="_3-bean-概述" tabindex="-1"><a class="header-anchor" href="#_3-bean-概述" aria-hidden="true">#</a> 3.Bean 概述</h2><h3 id="_3-1-beandefinition" tabindex="-1"><a class="header-anchor" href="#_3-1-beandefinition" aria-hidden="true">#</a> 3.1 BeanDefinition</h3><p>Spring 的 IoC（控制反转）容器是用来管理多个 Bean 的。想象这些 Bean 就像应用程序的组件，它们可以由你提供的配置信息来创建，比如使用 XML、Java 注解或 JavaConfig 的配置方式。 那这些 Bean 的配置信息是如何在容器内部表示的呢？它们是通过所谓的 <code>BeanDefinition</code> 对象来表示的。<code>BeanDefinition</code> 是一个接口，描述了一个 Bean 的配置信息。这意味着它包含关于 Bean 的所有必要详情，如它的类名、它的属性和它与其他 Bean 的关系等。</p><p>其中包含以下元数据：</p><ul><li>包限定类名：通常，是正在定义的 Bean 的实际实现类而非接口。</li><li>Bean 行为配置元素，它们声明了 Bean 在容器中的行为（例如作用域、生命周期回调等）。</li><li>对 Bean 完成其工作所需的其他 Bean 的引用，这些引用也称为协作者或依赖项。</li><li>在新创建的对象中设置的其他配置设置——例如，池的大小限制或管理连接池的 bean 中使用的连接数。</li></ul><p>这些元数据转化为一组属性，构成了每个 Bean 定义。下表描述了这些属性：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>Class</td><td>实例化 Bean</td></tr><tr><td>Name</td><td>命名 Bean</td></tr><tr><td>Scope</td><td>Bean 作用域</td></tr><tr><td>Constructor arguments</td><td>依赖注入</td></tr><tr><td>Properties</td><td>依赖注入</td></tr><tr><td>Autowiring mode</td><td>自动装配协作者</td></tr><tr><td>Lazy initialization mode</td><td>延迟初始化 Bean</td></tr><tr><td>Initialization method</td><td>初始化回调</td></tr><tr><td>Destruction method</td><td>销毁回调</td></tr></tbody></table><h3 id="_3-2-defaultlistablebeanfactory" tabindex="-1"><a class="header-anchor" href="#_3-2-defaultlistablebeanfactory" aria-hidden="true">#</a> 3.2 DefaultListableBeanFactory</h3><p>除了通过常规配置来定义 Bean，Spring 的 <code>ApplicationContext</code> 还允许你直接注册一个已经创建的对象（比如你手动创建的对象）。这可以通过 <code>ApplicationContext</code> 的内部组件 <code>BeanFactory</code> 来实现，具体地说，是通过它的一个默认实现：<code>DefaultListableBeanFactory</code>。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-12-144636.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你可以使用 <code>getBeanFactory()</code> 方法获取这个实现。在 <code>DefaultListableBeanFactory</code> 里，你可以使用 <code>registerSingleton(..)</code> 来注册一个已经创建的单例对象，或使用 <code>registerBeanDefinition(..)</code> 来注册一个新的 Bean 定义。但在实际应用中，大部分开发者还是选择使用常规的配置方式来定义 Bean。</p><p>假设你已经创建了一个 <code>User</code> 对象，并希望将其注册到 Spring 容器中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">DefaultListableBeanFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterBeanExample</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 ApplicationContext</span>
        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取 DefaultListableBeanFactory 实例</span>
        <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 手动创建一个 User 对象</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将已经创建的 user 单例对象注册到容器中</span>
        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">&quot;myUser&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取并打印对象</span>
        <span class="token class-name">User</span> retrievedUser <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myUser&quot;</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>retrievedUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: Tom</span>

        <span class="token comment">// 关闭 ApplicationContext</span>
        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

        <span class="token comment">// 构造器、getter、setter 省略...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：大多数应用程序只需要使用普通的 <code>BeanDefinition</code> 来定义 Bean。同时，为了确保容器能够正确处理这些 Bean 和依赖关系，你应该尽早地注册它们。虽然 Spring 提供了一定程度的支持来覆盖现有的元数据和实例，但在运行时尝试添加新的 Bean 并不被官方推荐，因为这可能导致各种问题。</p></blockquote><p>最后我们再详细补充一下 <code>DefaultListableBeanFactory</code>： <code>DefaultListableBeanFactory</code> 也是 Spring 中最常用的 <code>BeanFactory</code> 实现，它继承自 <code>AbstractAutowireCapableBeanFactory</code> 并实现了 <code>ConfigurableListableBeanFactory</code>、<code>BeanDefinitionRegistry</code> 等接口。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-12-144651.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>它的主要特点和功能如下：</p><ol><li><strong>BeanDefinition 的注册和管理</strong>：<code>DefaultListableBeanFactory</code> 作为一个 <code>BeanDefinitionRegistry</code> 可以注册新的 <code>BeanDefinition</code>，并且可以管理查询已注册的 <code>BeanDefinition</code>。</li><li><strong>Bean 的生命周期管理</strong>：它负责 Bean 的完整生命周期，从创建、初始化到销毁。</li><li><strong>支持多种资源描述符</strong>：如 XML、Java 注解等。</li><li><strong>依赖查找</strong>：它可以列出所有已注册的 Beans 和 Beans 的名称，这对于某些场景非常有用，如自动装配。</li><li><strong>提供 Singleton 和 Prototype 管理</strong>：除了标准的单例和原型作用域外，还可以通过自定义 Scope 扩展更多的 Bean 作用域。</li><li><strong>允许注册外部创建的对象</strong>：通过 <code>registerSingleton(..)</code> 和 <code>registerBeanDefinition(..)</code> 方法，开发者可以将对象或 Bean 的定义注册到容器中。</li></ol><p>可见，<code>DefaultListableBeanFactory</code> 是 Spring IoC 容器的心脏。当你使用 Spring 来配置和管理 Bean 时，实际上是与这个 <code>BeanFactory</code> 的实例交互。它维护了 Bean 的定义、依赖解析、生命周期管理等所有关键操作。 如上一次提供的代码示例所示，<code>DefaultListableBeanFactory</code> 允许我们注册已经创建的对象。此外，如果你想定义一个新的 Bean（而不是直接注册一个已经创建的对象），你可以这样做：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建一个 DefaultListableBeanFactory 对象，这是 Spring 框架中用于管理 bean 的核心类</span>
<span class="token class-name">DefaultListableBeanFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个 RootBeanDefinition 对象，表示一个 bean 的定义。这里定义的 bean 的类型是 User</span>
<span class="token class-name">RootBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 为 bean 的属性设置值，这里设置了&quot;name&quot;和&quot;age&quot;两个属性的值</span>
beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 bean 的定义注册到工厂中，这样 Spring 框架就可以在需要的时候创建这个 bean 了</span>
factory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;myUser&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从工厂中获取刚刚注册的 bean，类型是 User</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myUser&quot;</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印出 bean 的 &quot;name&quot; 属性的值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们首先创建了一个 <code>DefaultListableBeanFactory</code> 实例。接着，我们定义了一个新的 <code>RootBeanDefinition</code> 来描述我们想要的 User Bean，并设置了其属性。然后，我们将这个 <code>BeanDefinition</code> 注册到 <code>BeanFactory</code>。最后，我们从 <code>BeanFactory</code> 获取并使用了这个 Bean。</p><h3 id="_3-3-命名-beans" tabindex="-1"><a class="header-anchor" href="#_3-3-命名-beans" aria-hidden="true">#</a> 3.3 命名 Beans</h3><p>每个 Bean 都有一个或多个唯一标识符。在同一个容器中，这些标识符必须是唯一的。通常情况下，一个 Bean 只有一个标识符。但如果需要多个，额外的标识符可以被视为别名。</p><p>在基于 Java 的配置中，Bean 的名字通常来自于类名的首字母小写形式或通过 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code> 和 <code>@Controller</code> 注解的 <code>value</code> 属性来定义。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;myService&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// Bean 的名字为 &quot;myService&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你没有为 Bean 明确提供一个名字或标识符，Spring 容器会为这个 Bean 自动生成一个唯一的名字。但如果你希望通过名字引用该 Bean，你必须提供一个名字。通常情况下，没有提供名字的情境与内部 Beans 和自动装配相关。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>Spring 官方建议的 Bean 命名规范：</strong></p><p>按照约定，Bean 的命名遵循 Java 的实例字段命名规范。即，Bean 名称以小写字母开头，接下来是驼峰式命名。例如：accountManager、accountService、userDao、loginController 等。 一致的命名使得配置更易于阅读和理解。此外，如果你使用 Spring AOP，命名的一致性会在为一组名字相关的 Beans 应用建议时更加有帮助。</p></div><blockquote><p>注意： 在类路径中进行组件扫描时，Spring 为未命名的组件生成 Bean 名称，遵循之前描述的规则：基本上，取类的简单名称并将其首字母转为小写。但在特殊情况下，如果有多个字符并且第一个和第二个字符都是大写，则原始大小写保持不变。这些规则与 <code>java.beans.Introspector.decapitalize</code> 定义的规则相同（Spring 在这里使用这个方法）。</p></blockquote><hr><p><strong>为 Bean 设置别名：</strong></p><p>在 Spring 中，我们可以为一个 Bean 设置多个名称，这些名字等同于该 Bean 的别名。这种功能在一些场景中很有用，例如，当应用程序的每个组件都需要使用特定于自己的 Bean 名称来引用一个公共的依赖时。 尽管在 Bean 的定义中可以为其指定多个名称，但有时我们可能希望为在其他地方定义的 Bean 引入一个别名。这在大型系统中是常见的，其中配置被分割到每个子系统中，每个子系统都有自己的对象定义集。 使用 Java 配置时，可以使用 <code>@Bean</code> 注解的 <code>name</code> 属性为 Bean 提供多个别名：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;myAppDataSource&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;subsystemADataSource&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;subsystemBDataSource&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实例化、配置并返回数据源</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>dataSource</code> Bean 有三个名称或别名：<code>myAppDataSource</code>、<code>subsystemADataSource</code> 和 <code>subsystemBDataSource</code>。无论是哪个名称，都可以用来引用相同的 <code>dataSource</code> Bean。 这样，每个组件以及主应用程序都可以通过对它们唯一且不会与任何其他定义冲突的名称（有效地创建一个命名空间）来引用 <code>dataSource</code>，但它们引用的都是相同的 Bean。</p><h3 id="_3-4-实例化-beans" tabindex="-1"><a class="header-anchor" href="#_3-4-实例化-beans" aria-hidden="true">#</a> 3.4 实例化 Beans</h3><p>在 Spring 中，Bean 定义本质上是创建一个或多个对象的 “食谱” 或 “指南”。当请求一个命名的 Bean 时，容器会查看该 Bean 的 “食谱”，并使用该 Bean 定义封装的配置元数据来创建（或获取）实际的对象。</p><p>使用 JavaConfig，您可以使用 <code>@Bean</code> 注解来定义一个 Bean。此注解通常与 <code>@Configuration</code> 注解一起使用，后者标记一个类作为 Bean 定义的源。</p><ol><li>**直接构造 Bean：**通常会返回一个新实例，这类似于使用 Java 中的 new 运算符。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SomeClass</span> <span class="token function">someClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>**使用静态工厂方法：**在某些情况下，您可能想使用类的静态工厂方法来创建 Bean，而不是直接构造它。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 工厂类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClassFactory</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义一个静态工厂方法，用于创建 SomeClass 对象并返回</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SomeClass</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>	<span class="token comment">// 标记该类作为 Bean 定义的源</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 使用 @Bean 注解标记 someClass 方法，表示该方法将返回一个 SomeClass 类型的 Bean 对象</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SomeClass</span> <span class="token function">someClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用 SomeClassFactory 类的 createInstance 静态工厂方法创建 SomeClass 对象并返回</span>
        <span class="token keyword">return</span> <span class="token class-name">SomeClassFactory</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>嵌套类的命名：</strong></p><p>对于 Java，一个外部类可以有嵌套类（或内部类）。当您想为嵌套类配置 Bean 定义时，类的命名方式略有不同。假设您有一个名为 <code>SomeThing</code> 的类在 <code>com.example</code> 包中，这个 <code>SomeThing</code> 类有一个静态嵌套类叫做 <code>OtherThing</code>。当您在 Java 中引用这个嵌套类时，您应该使用 <code>$</code> 或 <code>.</code> 符号分隔。</p></div><p>对应示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeThing</span> <span class="token punctuation">{</span>

    <span class="token comment">// 静态嵌套类</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OtherThing</span> <span class="token punctuation">{</span>
        <span class="token comment">// class details</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SomeThing<span class="token punctuation">.</span>OtherThing</span> <span class="token function">otherThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeThing<span class="token punctuation">.</span>OtherThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-1-使用构造函数实例化" tabindex="-1"><a class="header-anchor" href="#_3-4-1-使用构造函数实例化" aria-hidden="true">#</a> 3.4.1 使用构造函数实例化</h4><p>在 Spring 中，当你想要创建一个 Bean，你可以使用它的构造函数来做。这意味着你不需要让你的类满足任何特定的接口或编码风格；几乎所有的普通 Java 类都可以与 Spring 兼容。</p><p>实际上，为了让 Spring 能够成功地创建和管理 Bean，你可能需要确保该类具有一个默认（即无参数）的构造函数。虽然许多 JavaBeans 标准推荐这样做，但 Spring 完全可以管理非标准的 JavaBeans。这意味着，即使你的类不完全遵循 JavaBeans 规范（例如，它可能没有无参构造函数或 getter/setter 方法），Spring 仍然可以处理。例如，如果你在遗留系统中有一个连接池，它并不完全遵循 JavaBeans 规范，Spring 依然可以管理它。</p><p>在基于 Java 注解和 JavaConfig 的配置方式中，你可以这样定义你的 Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">exampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBeanTwo</span> <span class="token function">anotherExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBeanTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这段代码中的 <code>ExampleBean</code> 和 <code>ExampleBeanTwo</code> Bean，Spring 默认采用构造方法进行创建。因为使用了 <code>@Bean</code> 注解标记了 <code>exampleBean()</code> 和 <code>anotherExample()</code> 方法，Spring 会调用这些方法来创建对应的 Bean 实例，并添加到 Spring 容器中。</p><p>在调用 <code>exampleBean()</code> 方法时，Spring 会通过反射机制创建一个 <code>ExampleBean</code> 类的实例，并将该实例作为 Bean 注册到容器中。同样地，在调用 <code>anotherExample(</code>) 方法时，Spring 也会通过反射机制创建一个 <code>ExampleBeanTwo</code> 类的实例，并将该实例作为 Bean 注册到容器中。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>请为 Bean 提供无参构造：</strong></p><p>需要注意的是，如果 <code>ExampleBean</code> 和 <code>ExampleBeanTwo</code> 类没有无参构造方法，或者构造方法不可访问（例如被声明为 <code>private</code>），那么 Spring 将无法通过反射机制创建这些类的实例，从而导致无法注册到容器中。在这种情况下，我们需要使用其他方式来创建这些类的实例，比如通过工厂方法、静态工厂方法或者属性注入等方式。</p></div><blockquote><p>TIP：关于如何向构造函数提供参数（如果需要）以及如何在对象被构造后设置对象实例属性，在 “依赖注入” 部分会进行详细说明和示例。</p></blockquote><h4 id="_3-4-2-使用静态工厂方法实例化" tabindex="-1"><a class="header-anchor" href="#_3-4-2-使用静态工厂方法实例化" aria-hidden="true">#</a> 3.4.2 使用静态工厂方法实例化</h4><p>在 Spring 中，除了使用构造函数实例化 Bean，还可以使用所谓的 “静态工厂方法” 来实例化。这种方法允许你在 Spring 配置中引用一个返回实例对象的静态方法，而这个方法会作为工厂来生成 Bean 的实例。</p><p>为了在基于 Java 的配置中实现这种方式，你可以直接在 <code>@Bean</code> 注解的方法中调用这个静态工厂方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ClientService</span> <span class="token function">clientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ClientService</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，<code>ClientService</code> 类的实例是通过调用静态工厂方法 <code>createInstance</code> 获得的。 对应的 <code>ClientService</code> 类如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 构造函数是私有的，意味着外部不能直接通过 new 来创建实例</span>
    <span class="token keyword">private</span> <span class="token class-name">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 静态工厂方法，用于返回 ClientService 的实例</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>ClientService</code> 的构造方法是私有的，这就意味着你不能在类的外部直接实例化它。而 <code>createInstance</code> 是一个静态方法，它返回一个 <code>ClientService</code> 的实例，这样 Spring 可以使用它作为工厂来获得 Bean 的实例。（单例模式下的解决方案）</p><h4 id="_3-4-3-使用实例工厂方法实例化" tabindex="-1"><a class="header-anchor" href="#_3-4-3-使用实例工厂方法实例化" aria-hidden="true">#</a> 3.4.3 使用实例工厂方法实例化</h4><p>实例工厂方法实例化与静态工厂方法类似，但不同之处在于它调用的是一个已存在的 Bean 的非静态方法来创建新的 Bean。这意味着，有一个单独的 Bean（我们称之为 “工厂 Bean”）在容器中，它的任务是产生其他 Bean。</p><p>要使用这种机制，在基于 Java 的配置中，你将定义一个方法返回 Bean，并在这个方法中调用工厂 Bean 的工厂方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 配置类</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token comment">// 创建实例工厂 Bean</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DefaultServiceLocator</span> <span class="token function">serviceLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultServiceLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建并返回一个客户端服务实例</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ClientService</span> <span class="token function">clientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用 DefaultServiceLocator Bean 的实例方法</span>
        <span class="token keyword">return</span> <span class="token function">serviceLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createClientServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建并返回一个账户服务实例</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AccountService</span> <span class="token function">accountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用 DefaultServiceLocator Bean 的实例方法</span>
        <span class="token keyword">return</span> <span class="token function">serviceLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createAccountServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实例工厂类，用于创建和管理各种服务实例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceLocator</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 创建并初始化客户端服务实例</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ClientService</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 创建并初始化账户服务实例</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AccountService</span> accountService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 实例工厂方法：创建并返回客户端服务实例的方法</span>
    <span class="token keyword">public</span> <span class="token class-name">ClientService</span> <span class="token function">createClientServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实例工厂方法：创建并返回账户服务实例的方法</span>
    <span class="token keyword">public</span> <span class="token class-name">AccountService</span> <span class="token function">createAccountServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> accountService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>DefaultServiceLocator</code> 是工厂 Bean。它有两个工厂方法：<code>createClientServiceInstance</code> 和 <code>createAccountServiceInstance</code>，分别用来产生 <code>ClientService</code> 和 <code>AccountService</code> 的实例。 在 <code>AppConfig</code> 配置类中，我们定义了 <code>clientService</code> 和 <code>accountService</code> 的 <code>@Bean</code> 方法，这两个方法分别调用了 <code>serviceLocator</code> 的两个工厂方法来产生新的 Bean 实例。</p><blockquote><p>注意：</p><ol><li>工厂 Bean 可以通过依赖注入 (DI) 进行管理和配置。这意味着工厂 Bean 本身也可以从其他 Bean 中接收依赖。</li><li>在 Spring 文档中，“factory bean”是指配置在 Spring 容器中并通过实例或静态工厂方法创建对象的 Bean。而 <code>FactoryBean</code>（注意大小写）是指一个特定的 Spring FactoryBean 实现类。</li></ol></blockquote><h4 id="_3-4-4-确定-bean-的运行时类型" tabindex="-1"><a class="header-anchor" href="#_3-4-4-确定-bean-的运行时类型" aria-hidden="true">#</a> 3.4.4 确定 Bean 的运行时类型</h4><p>在 Spring 框架中，某个特定 Bean 的运行时类型并不总是一目了然的。即使我们在配置中定义了某个 Bean 的类，实际运行时的类型可能与此不同。原因有很多：</p><ol><li>如果使用了工厂方法创建 Bean，那么该方法返回的实际类型可能与原始定义的类型不同。</li><li>如果使用了 <code>FactoryBean</code>，则实际创建的 Bean 类型可能是 <code>FactoryBean</code> 的 <code>getObject</code> 方法的返回类型。</li><li>当我们在 Bean 上使用了 AOP（面向切面编程）功能，Spring 可能会为 Bean 创建一个代理，这个代理在运行时的类型可能与原始 Bean 的类型不同，尤其是当代理基于接口而不是基于类时。</li></ol><p>因此，为了准确得知某个 Bean 的实际运行时类型，我们不能仅仅依赖于配置中声明的类信息。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>获取 Bean 类型推荐的方法：</strong></p><p>使用 <code>BeanFactory</code> 的 <code>getType</code> 方法查询 Bean 的名字。这个方法会考虑上面提到的所有情况，并返回与 <code>BeanFactory.getBean</code> 方法为同一 Bean 名称返回的对象的实际类型。</p></div><p>下面是一个示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">BeanFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取 Bean 的运行时类型</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanType <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token string">&quot;myBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Runtime type of &#39;myBean&#39;: &quot;</span> <span class="token operator">+</span> beanType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个简单的 <code>MyBean</code> 类型的 Bean。我们使用 <code>BeanFactory.getType</code> 方法确定其运行时的类型，并将其打印出来。</p><h2 id="_4-依赖关系" tabindex="-1"><a class="header-anchor" href="#_4-依赖关系" aria-hidden="true">#</a> 4.依赖关系</h2><p>在企业应用中，一个应用往往不仅仅是由单一对象（或在 Spring 中称为 “bean”）构成的。即使是最简单的应用，也包含多个对象，它们协同工作，为终端用户呈现一个完整的应用。该部分我们将解释如何将独立的 bean 定义组合到一起，使它们共同协作，完成特定目标。</p><h3 id="_4-1-依赖注入" tabindex="-1"><a class="header-anchor" href="#_4-1-依赖注入" aria-hidden="true">#</a> 4.1 依赖注入</h3><p>依赖注入（DI）是一种过程，其中对象仅通过构造函数参数、工厂方法参数或在对象实例被构造或从工厂方法返回后设置的属性（Setter）来定义其依赖关系（即，它们与哪些其他对象合作）。当容器创建 bean 时，它会注入这些依赖关系。这个过程基本上是反向的，因为这里是容器来控制，而不是 bean 自身通过直接构建类或使用 Service Locator 模式来控制其依赖的实例化或定位。（这也是 “控制反转” 一词的由来） 采用 DI 原则，代码变得更简洁，当对象与其依赖关系分离时，解耦效果更明显。对象不再自己查找其依赖，也不再知道依赖的位置或类。因此，特别是当依赖关系基于接口或抽象基类时，您的类变得更容易测试，这允许在单元测试中使用桩或模拟实现。</p><p>DI 主要存在两种形式：基于构造函数的依赖注入和基于 setter 的依赖注入。</p><h4 id="_4-1-1-基于构造函数的依赖注入" tabindex="-1"><a class="header-anchor" href="#_4-1-1-基于构造函数的依赖注入" aria-hidden="true">#</a> 4.1.1 基于构造函数的依赖注入</h4><p>当我们谈论基于构造函数的依赖注入时，我们指的是容器通过调用构造函数并传递一些参数（代表不同的依赖项）来实现这一点。</p><p>以下是一个简单示例，该类只能通过构造函数注入来注入依赖：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token comment">// SimpleMovieLister 对 MovieFinder 有一个依赖</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token comment">// 一个构造函数，以便 Spring 容器可以注入一个 MovieFinder</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">SimpleMovieLister</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实际使用注入的 MovieFinder 的业务逻辑被省略...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，这个类没有任何特别之处。它是一个 POJO，并且没有对容器特定的接口、基类或注解的依赖。</p></blockquote><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>构造函数参数解析</strong></p><p>当 Spring 容器尝试为 bean 的构造函数注入依赖时，它会根据参数的类型来匹配合适的 bean。如果 bean 的构造函数参数没有任何潜在的歧义，那么定义参数的顺序就是在实例化 bean 时提供给构造函数的参数的顺序。</p></div><p>考虑以下类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">x<span class="token punctuation">.</span>y</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThingOne</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">ThingOne</span><span class="token punctuation">(</span><span class="token class-name">ThingTwo</span> thingTwo<span class="token punctuation">,</span> <span class="token class-name">ThingThree</span> thingThree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>ThingTwo</code> 和 <code>ThingThree</code> 类在继承关系上没有任何联系，那么就不会存在潜在的歧义，Spring 容器就可以很容易地匹配并注入这两个依赖。</p><p>对于简单类型，如整数或字符串，Spring 需要额外的帮助来确定类型，因为它无法自己推断出值的类型。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> years<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;7500000&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> years<span class="token punctuation">,</span> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;42&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> years<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ultimateAnswer <span class="token operator">=</span> ultimateAnswer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述情况下，我们使用 <code>@Value</code> 注解来为构造函数的参数提供值。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>构造函数参数类型匹配</strong></p><p>在 Spring 中，当容器尝试注入一个 bean 的构造函数参数时，它会尝试根据参数的类型进行匹配。在基于注解和 JavaConfig 的配置中，你不需要显式地指定参数的类型，因为这是由 Java 代码自身决定的。但在某些情况下，你可能需要提供额外的信息或值。</p></div><p>考虑以下类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> years<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> years<span class="token punctuation">,</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> years<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ultimateAnswer <span class="token operator">=</span> ultimateAnswer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使用基于 Java 的配置来配置这个 bean，你可以如下操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">exampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token number">7500000</span><span class="token punctuation">,</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的 <code>AppConfig</code> 类中，我们定义了一个方法 <code>exampleBean()</code>，该方法返回 <code>ExampleBean</code> 的实例，并使用两个参数：一个整数和一个字符串。这就是如何在基于 Java 的配置中显式地提供构造函数参数的值。</p><blockquote><p>注意：如果在容器中存在多个相同类型的 bean，那么 Spring 可能无法确定应该注入哪一个 bean。在这种情况下，你需要使用 <code>@Qualifier</code> 注解指定具体的 Bean 名称来消除这种歧义。</p></blockquote><p>在 Spring 中，当你有一个多参数构造函数，并且希望确保参数的注入顺序时，你可以使用参数的索引或名称来明确指定。在基于 JavaConfig 和注解的配置中，这种情况是由 Java 自身的类型系统和参数名称决定的。但是，有时你可能需要提供额外的信息，以确保参数的注入顺序或消除歧义。</p><p>在 Java 中，参数的顺序是由其在构造函数或方法中的位置决定的。因此，当你创建一个对象实例并传递参数时，你必须确保参数的顺序与构造函数的参数顺序匹配。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> years<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> years<span class="token punctuation">,</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> years<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ultimateAnswer <span class="token operator">=</span> ultimateAnswer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// JavaConfig 配置</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">exampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token number">7500000</span><span class="token punctuation">,</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在大多数情况下，你不需要指定参数名称，因为 Java 编译器默认会保存参数名称（如果在编译时使用了<code>-parameters</code> 选项）。Spring 可以使用这些参数名称来正确地注入值。</p><p>但是，为了确保没有歧义，或者如果你的代码没有使用 <code>-parameters</code> 选项进行编译，你可以使用 <code>@ConstructorProperties</code> 注解来显式地提供参数名称。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">ConstructorProperties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> years<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;years&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ultimateAnswer&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> years<span class="token punctuation">,</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> years<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ultimateAnswer <span class="token operator">=</span> ultimateAnswer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>@ConstructorProperties</code> 注解确保了 Spring 容器知道每个参数的名称，从而可以正确地注入相应的值。这是非常有用的，特别是当你有多个同类型的参数并希望避免任何注入歧义时。</p><h4 id="_4-1-2-基于-setter-的依赖注入" tabindex="-1"><a class="header-anchor" href="#_4-1-2-基于-setter-的依赖注入" aria-hidden="true">#</a> 4.1.2 基于 Setter 的依赖注入</h4><p>这种注入方式是通过在实例化 bean 后，调用 bean 上的 setter 方法来完成依赖注入的。下面是一个简单的示例，它只能通过纯 setter 注入来进行依赖注入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token comment">// 通过 setter 方法来允许 Spring 容器注入一个 MovieFinder</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实际使用注入的 MovieFinder 的业务逻辑被省略...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>@Autowired</code> 注解，你可以通知 Spring 自动注入相关的依赖项：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>构造函数注入还是基于 Setter 的注入？</strong></p><p>你可以在 Spring 中混合使用构造函数注入和基于 Setter 的注入。一个经验法则是：对于必须的依赖项，使用构造函数；对于可选的依赖项，使用 setter 方法或配置方法。</p><ul><li><strong>构造函数注入</strong>：Spring 团队通常建议使用构造函数注入，因为这样你可以将应用组件实现为不可变（final）对象，并确保必需的依赖项不为 null。此外，通过构造函数注入的组件始终在完全初始化的状态下返回给客户端代码。但是，需要注意的是，大量的构造函数参数可能意味着代码的设计可能存在问题，可能需要重新考虑职责的划分，因为很可以已经违背了单一职责原则。</li><li><strong>基于 Setter 的注入</strong>：这种注入应主要用于可以在类内部分配合理默认值的可选依赖项。另一个优点是，setter 方法使该类的对象可以在之后重新配置或重新注入。因此，通过 JMX MBeans 进行管理是 setter 注入的一个有力的应用场景。</li></ul><p>总的来说，你应该根据特定类的需求选择最合适的 DI 风格。有时，当你处理没有源代码的第三方类时，选择可能已经为你做好了。例如，如果第三方类没有公开任何 setter 方法，那么构造函数注入可能是唯一可用的 DI 形式。</p></div><h4 id="_4-1-3-依赖解析过程" tabindex="-1"><a class="header-anchor" href="#_4-1-3-依赖解析过程" aria-hidden="true">#</a> 4.1.3 依赖解析过程</h4><p>在 Spring 容器中，当我们创建和初始化 <code>ApplicationContext</code>，容器会按以下步骤执行 bean 的依赖解析：</p><ol><li><strong>初始化</strong>：首先，我们创建并初始化 <code>ApplicationContext</code>，它会加载描述所有 bean 的配置元数据。这些配置元数据可以通过 Java 代码、注解或早期的 XML 形式来指定。</li><li><strong>依赖表达</strong>：对于每一个 bean，它的依赖项会以属性、构造函数参数或静态工厂方法的参数形式来表示。当实际创建 bean 时，这些依赖项会被提供给 bean。</li><li><strong>定义与引用</strong>：每个属性或构造函数参数可以是设定的值，也可以是容器中另一个 bean 的引用（即依赖）。</li><li><strong>类型转换</strong>：所有指定为值的属性或构造函数参数从其给定格式转换为该属性或参数的实际类型。例如，Spring 默认可以将字符串格式的值转换为所有内置类型，如 int、long、String 等。</li><li><strong>验证与创建</strong>：当容器被创建时，Spring 容器会验证每个 bean 的配置。但实际的属性值会在 bean 实际创建时才被设定。默认情况下，单例作用域的 bean 在容器创建时就会被实例化。否则，bean 仅在请求时被创建。</li></ol><h4 id="_4-1-4-循环依赖问题" tabindex="-1"><a class="header-anchor" href="#_4-1-4-循环依赖问题" aria-hidden="true">#</a> 4.1.4 循环依赖问题</h4><p>在 Spring 中，当你大量使用构造器注入，有可能会遭遇到循环依赖的问题，这意味着两个或多个 bean 互相依赖，形成一个闭环。</p><p>考虑两个类，A 和 B。如果 A 通过构造器注入需要 B 的实例，并且 B 同样通过构造器注入需要 A 的实例，那么当这两个类被注入到彼此时，Spring IoC 容器会在运行时检测到这种循环引用，并抛出一个 <code>BeanCurrentlyInCreationException</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassB</span> classB<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token class-name">ClassB</span> classB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>classB <span class="token operator">=</span> classB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassA</span> classA<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">ClassB</span><span class="token punctuation">(</span><span class="token class-name">ClassA</span> classA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>classA <span class="token operator">=</span> classA<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>解决办法：为了解决这种问题，你可以更改某些类，使其通过 setter 方法而不是构造器来进行配置。这意味着，尽管不太推荐这种方式，但你可以使用 setter 注入来配置循环依赖。</p></div><p>下面是使用 Setter 注入来避免循环依赖的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ClassB</span> classB<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassB</span><span class="token punctuation">(</span><span class="token class-name">ClassB</span> classB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>classB <span class="token operator">=</span> classB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ClassA</span> classA<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassA</span><span class="token punctuation">(</span><span class="token class-name">ClassA</span> classA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>classA <span class="token operator">=</span> classA<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>Spring 的处理机制</strong></p><p>你通常可以信任 Spring 会做正确的事情。它在容器加载时检测配置问题，比如不存在的 bean 引用和循环依赖。Spring 会在 bean 实际被创建时尽可能晚地设置属性和解析依赖。这意味着，一个正确加载的 Spring 容器在你后续请求一个对象时可能会产生异常，例如，由于缺失或无效的属性，bean 抛出一个异常。 为了提前发现这些配置问题，<code>ApplicationContext</code> 默认会预先实例化单例 bean。但是，你仍然可以覆盖这个默认行为，使得单例 bean 按需进行懒加载，而不是预先实例化。 如果不存在循环依赖，当一个或多个合作的 bean 被注入到一个依赖的 bean 中时，每个合作的 bean 在被注入到依赖的 bean 之前都会被完全配置。这意味着，如果 bean A 依赖于 bean B，那么在调用 bean A 的 setter 方法之前，Spring IoC 容器会完全配置 bean B。</p></div><h4 id="_4-1-5-依赖注入示例" tabindex="-1"><a class="header-anchor" href="#_4-1-5-依赖注入示例" aria-hidden="true">#</a> 4.1.5 依赖注入示例</h4><p>依赖注入 (Dependency Injection) 是 Spring 框架的核心功能，它允许我们将一个对象的依赖（即其他对象）注入到该对象中，无需手动创建或查找这些依赖。我们可以通过构造器注入或者 setter 方法注入来实现这一点。 下面提供一些 Spring 官方的依赖注入示例。</p><ol><li><strong>Setter 注入</strong></li></ol><p>通过 setter 方法注入，我们可以在 bean 被创建后设置其属性。首先，让我们看看 Java 类的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanOne</span><span class="token punctuation">(</span><span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanOne <span class="token operator">=</span> beanOne<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanTwo</span><span class="token punctuation">(</span><span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanTwo <span class="token operator">=</span> beanTwo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIntegerProperty</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用 <code>@Autowired</code> 注解来标记需要 Spring 容器自动注入的 setter 方法。在 bean 实例化后，Spring 会自动查找与方法参数类型匹配的 bean 并注入它们。</p><ol start="2"><li><strong>构造器注入</strong></li></ol><p>另一种注入方式是通过构造器注入，这样我们可以在 bean 创建时注入依赖项：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">,</span> <span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">,</span> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanOne <span class="token operator">=</span> beanOne<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanTwo <span class="token operator">=</span> beanTwo<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，当 Spring 创建 <code>ExampleBean</code> 的实例时，它会查找合适的 bean 来满足构造器的参数，并自动注入它们。</p><ol start="3"><li><strong>静态工厂方法</strong></li></ol><p>我们还可以告诉 Spring 使用一个静态工厂方法来创建 bean 的实例，而不是直接调用构造器。在这种情况下，工厂方法的参数会被视为需要注入的依赖。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">,</span> <span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanOne <span class="token operator">=</span> beanOne<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanTwo <span class="token operator">=</span> beanTwo<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExampleBean</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>
        <span class="token class-name">AnotherBean</span> anotherBean<span class="token punctuation">,</span> <span class="token class-name">YetAnotherBean</span> yetAnotherBean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span>anotherBean<span class="token punctuation">,</span> yetAnotherBean<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中，<code>@Bean</code> 注解告诉 Spring 使用 <code>createInstance</code> 静态方法来创建 <code>ExampleBean</code> 的实例，并注入需要的依赖。</p><h3 id="_4-2-依赖关系与配置细节" tabindex="-1"><a class="header-anchor" href="#_4-2-依赖关系与配置细节" aria-hidden="true">#</a> 4.2 依赖关系与配置细节</h3><h3 id="_4-3-使用-dependson" tabindex="-1"><a class="header-anchor" href="#_4-3-使用-dependson" aria-hidden="true">#</a> 4.3 使用 @DependsOn</h3><p>在 Spring 中，通常当一个 bean 依赖于另一个 bean 时，意味着一个 bean 作为属性被设置在另一个 bean 中。这通常通过注入来实现。但是，有时候 beans 之间的依赖关系并不那么直接。例如，当需要触发类中的静态初始化器时，如数据库驱动注册。为了解决这样的问题，Spring 提供了 <code>@DependsOn</code> 注解，它可以明确地强制在初始化当前 bean 之前初始化一个或多个其他 beans。</p><p>下面是一个示例，表达了一个 bean 对另一个 bean 的依赖关系：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ManagerBean</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token string">&quot;manager&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 该 Bean 初始化前先初始化 ManagerBean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">beanOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 依赖于 ManagerBean</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>@DependsOn(&quot;manager&quot;)</code> 说明在初始化 <code>beanOne</code> 之前必须先初始化 <code>manager</code>。 要表达对多个 beans 的依赖，您可以在 <code>@DependsOn</code> 注解中提供一个 bean 名称列表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ManagerBean</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JdbcAccountDao</span> <span class="token function">accountDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcAccountDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;manager&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;accountDao&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">beanOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@DependsOn</code> 注解不仅可以指定初始化时的依赖，而且在单例 beans 的情况下，还可以指定相应的销毁时依赖。定义了 <code>depends-on</code> 关系的依赖 beans 会在给定的 bean 销毁之前先被销毁。因此，<code>@DependsOn</code> 也可以控制关闭顺序。</p><h3 id="_4-4-延迟初始化-bean" tabindex="-1"><a class="header-anchor" href="#_4-4-延迟初始化-bean" aria-hidden="true">#</a> 4.4 延迟初始化 Bean</h3><p>默认情况下，<code>ApplicationContext</code> 的实现会在初始化过程中急切地创建和配置所有单例 bean。通常，这种预实例化是可取的，因为配置或周围环境中的错误会立即被发现，而不是几小时或甚至几天后。但是，当这种行为不受欢迎时，您可以通过将 bean 定义标记为延迟初始化来防止单例 bean 的预实例化。延迟初始化的 bean 告诉 IoC 容器在首次请求时创建 bean 实例，而不是在启动时。</p><p>在 JavaConfig 中，你可以使用 <code>@Lazy</code> 注解来控制此行为。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Lazy</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExpensiveToCreateBean</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExpensiveToCreateBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AnotherBean</span> <span class="token function">notLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnotherBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当上述配置被一个 <code>ApplicationContext</code> 消费时，<code>lazy</code> bean 不会在 <code>ApplicationContext</code> 启动时急切地预实例化，而 <code>notLazy</code> bean 则会急切地预实例化。</p><p>然而，当一个延迟初始化的 bean 是一个非延迟初始化的单例 bean 的依赖项时，<code>ApplicationContext</code> 会在启动时创建延迟初始化的 bean，因为它必须满足单例的依赖关系。这个延迟初始化的 bean 会被注入到其他地方的一个非延迟初始化的单例 bean 中。</p><p>你还可以在容器级别控制延迟初始化，只需在主配置类上使用 <code>@Lazy</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Lazy</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在此配置类中定义的bean都不会被预实例化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，容器中的所有 beans 都不会被预实例化。</p><h3 id="_4-5-自动注入" tabindex="-1"><a class="header-anchor" href="#_4-5-自动注入" aria-hidden="true">#</a> 4.5 自动注入</h3><p>在 Spring 中，可以自动注入 bean 之间的协作关系。这意味着，Spring 可以自动地为你的 bean 找到并注入它所需要的其他 bean，只需根据 <code>ApplicationContext</code> 的内容进行检查。 自动注入有以下优势：</p><ul><li>它可以大大减少指定属性或构造函数参数的需要。</li><li>当你的对象发展时，自动注入可以更新配置。例如，如果你需要为一个类添加一个依赖，该依赖可以自动满足，而无需你修改配置。</li></ul><p>Spring 的自动注入主要是通过 <code>@Autowired</code> 注解来实现的。这个注解可以放在不同的位置，从而影响注入的方式。</p><h4 id="_4-5-1-自动注入方式" tabindex="-1"><a class="header-anchor" href="#_4-5-1-自动注入方式" aria-hidden="true">#</a> 4.5.1 自动注入方式</h4><h5 id="no-autowiring-默认-明确指定引用" tabindex="-1"><a class="header-anchor" href="#no-autowiring-默认-明确指定引用" aria-hidden="true">#</a> No Autowiring：(默认) 明确指定引用</h5><p>这是默认模式，不进行任何自动注入。你必须明确指定 bean 之间的引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">SomeBean</span> <span class="token function">someBean</span><span class="token punctuation">(</span><span class="token class-name">AnotherBean</span> anotherBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SomeBean</span><span class="token punctuation">(</span>anotherBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="byname-autowired-作用于-setter-方法" tabindex="-1"><a class="header-anchor" href="#byname-autowired-作用于-setter-方法" aria-hidden="true">#</a> byName：@Autowired 作用于 Setter 方法</h5><p>当你在某个 setter 方法上使用 <code>@Autowired</code>，Spring 会调用那个 setter 方法来注入依赖。Spring 会尝试查找与需要注入的属性同名的 bean，并将其注入。如果你有一个属性名为 <code>master</code>，那么 Spring 会查找一个名为 <code>master</code> 的 bean 并注入它。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MasterBean</span> master<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token class-name">MasterBean</span> master<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>master <span class="token operator">=</span> master<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅仅是 setter 方法，你实际上可以在任何方法上使用 <code>@Autowired</code>。当你这样做时，Spring 会在创建类的实例时调用该方法，方法的参数会被自动注入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">SomeService</span> someService<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">SomeService</span> someService<span class="token punctuation">,</span> <span class="token class-name">AnotherService</span> anotherService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>someService <span class="token operator">=</span> someService<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>anotherService <span class="token operator">=</span> anotherService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="bytype-autowired-作用于字段" tabindex="-1"><a class="header-anchor" href="#bytype-autowired-作用于字段" aria-hidden="true">#</a> byType：@Autowired 作用于字段</h5><p>当你在类的字段（成员变量）上使用 <code>@Autowired</code>，Spring 会在创建那个类的实例时自动为那个字段注入对应类型的 bean。如果容器中存在唯一一个与属性类型匹配的 bean，Spring 就会自动注入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MasterBean</span> master<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 Spring 容器中存在多个相同类型的 Bean，会产生冲突。为了解决这个问题，可以使用 <code>@Qualifier</code> 注解来指明需要注入哪一个具体的 Bean。 假设你有两个相同类型的 Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Engine</span> <span class="token function">petrolEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PetrolEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Engine</span> <span class="token function">dieselEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DieselEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，有两个类型为 <code>Engine</code> 的 Beans：<code>petrolEngine</code> 和 <code>dieselEngine</code>。如果我们想为一个属性自动注入一个具体的 <code>Engine</code> Bean，可以使用 <code>@Qualifier</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Engine</span> engine<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;petrolEngine&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Engine</span> engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>@Qualifier(&quot;petrolEngine&quot;)</code> 告诉 Spring 容器，我们想为 Car 类的 engine 属性注入 <code>petrolEngine</code> Bean，而不是 <code>dieselEngine</code>。</p><h5 id="constructor-autowired-作用于构造方法" tabindex="-1"><a class="header-anchor" href="#constructor-autowired-作用于构造方法" aria-hidden="true">#</a> constructor：@Autowired 作用于构造方法</h5><p>当你在构造函数上使用 <code>@Autowired</code>，Spring 会在创建类的实例时通过该构造函数注入依赖。类似于 byType，但适用于构造函数参数而已。如果容器中不只有一个与构造函数参数类型匹配的 bean，就会抛出错误。</p><blockquote><p>TIP：如果只有一个构造函数，从 Spring 4.3 开始，可以省略 <code>@Autowired</code>，Spring 默认会尝试使用那个构造函数进行注入。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MasterBean</span> master<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token class-name">MasterBean</span> master<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>master <span class="token operator">=</span> master<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>TIP：</p><ol><li>当使用 byType 或 constructor 自动注入模式时，你可以为数组和类型化集合进行自动注入。在这种情况下，容器中所有与预期类型匹配的自动注入候选者都会被用来满足依赖关系。</li><li>你还可以自动注入强类型的 Map 实例，如果预期的键类型为 String。一个自动注入的 Map 实例的值包括所有与预期类型匹配的 bean 实例，而 Map 实例的键包含相应的 bean 名称。</li></ol></blockquote><p>自动注入方式总结如下：</p><table><thead><tr><th>Mode</th><th>Explanation</th></tr></thead><tbody><tr><td>no（默认）</td><td>●不进行自动注入。 ●Bean 间的引用必须明确指定。</td></tr><tr><td>byName</td><td>●根据属性名称自动注入。 ●Spring 会查找与属性名相同的 bean 并注入。</td></tr><tr><td>byType</td><td>●根据属性的类型自动注入。 ●如果容器中存在一个与属性类型相匹配的 bean，Spring 会自动注入。 ●如果有多个相同类型的 bean，则会产生冲突。</td></tr><tr><td>constructor</td><td>●类似于 byType，但适用于构造函数参数。 ●依赖于构造函数的参数类型来注入 bean。</td></tr></tbody></table><p>除了上述方式，你还可以结合其他注解如 <code>@Resource</code> 进行注入。它同样可以作用于字段、方法和构造器（从 Java EE 7 开始，<code>@Resource</code> 支持构造函数注入，但这在 Spring 中可能并不是特别常见）。 <code>@Resource</code> 默认是按名称查找，这意味着如果你有以下的配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;specificService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">SomeService</span> someService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring 将会寻找名为 &quot;specificService&quot; 的 bean 并注入到 <code>someService</code> 字段上。如果没有指定名称，它会默认使用字段名或 setter 方法名作为 bean 的名称进行查找。如果按名称查找失败，<code>@Resource</code> 会尝试按类型来查找。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>@Resource vs @Autowired</strong></p><ul><li>来源：<code>@Resource</code> 是来自 Java 的 <code>javax.annotation</code> 包，而 <code>@Autowired</code> 是 Spring 特有的。</li><li>查找策略：如上所述，<code>@Resource</code> 默认是按名称查找，然后是按类型。而 <code>@Autowired</code> 默认是按类型查找。</li><li>配合其他注解：<code>@Autowired</code> 可以与 <code>@Qualifier</code> 注解一起使用，以指定注入哪个具体的 bean。而 <code>@Resource</code> 通过其 name 属性来实现类似的功能。</li></ul><p>总的来说，选择使用哪个注解取决于你的具体需求和你想如何进行注入。如果需要按名称注入，<code>@Resource</code> 可能是更直接的选择；如果按类型注入更方便，那么 <code>@Autowired</code> 可能更合适。</p><p>注意：尽管字段注入在简单场景下很方便，但它可能不是最佳的实践，因为这样的字段不能被标记为 final，并且可能使单元测试变得困难。构造函数注入是推荐的方式，因为它可以确保所有的依赖都被正确注入，而且类的字段可以被标记为 final，这样可以提供不变性。</p></div><h4 id="_4-5-2-自动注入的局限性与缺点" tabindex="-1"><a class="header-anchor" href="#_4-5-2-自动注入的局限性与缺点" aria-hidden="true">#</a> 4.5.2 自动注入的局限性与缺点</h4><p>自动注入最适合在整个项目中一致地使用。如果通常不使用自动注入，只为一两个 bean 定义使用自动注入可能会使开发人员感到困惑。 请考虑自动注入的以下限制和缺点：</p><ol><li>**属性和构造函数参数的明确依赖性总是优先于自动注入。**你不能自动注入简单的属性，如基本类型、字符串、类（及其数组）。这是故意设计的限制。</li><li>**自动注入不如明确的注入精确。**虽然如前所述，Spring 在面临可能产生意外结果的模糊性时会非常小心，但你的 Spring 管理的对象之间的关系不再明确地记录。</li><li><strong>工具可能无法从 Spring 容器生成文档，因为它们可能无法获取注入信息。</strong></li><li>**容器内的多个 bean 定义可能与要自动注入的 setter 方法或构造函数参数的类型匹配。**对于数组、集合或 Map 实例来说，这不一定是个问题。然而，对于期望单一值的依赖项，这种模糊性不会被随意解决。如果没有唯一的 bean 定义可用，则会抛出异常。</li></ol><p>面对上述情况，你有几种选择：</p><ul><li>放弃自动注入，选择明确的注入。</li><li>通过设置 bean 的 <code>autowire-candidate</code> 属性为 false 来避免为某个 bean 定义使用自动注入。</li><li>使用注解基于配置提供的更细粒度的控制。</li></ul><p>对于避免某个 bean 被自动注入的情况，可以使用 <code>@Primary</code> 注解来指示哪个 bean 应该被优先考虑进行自动注入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> <span class="token class-name">Engine</span> <span class="token function">primaryEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PetrolEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Engine</span> <span class="token function">secondaryEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DieselEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，如果你有一个组件需要一个 <code>Engine</code> 类型的 bean 进行自动注入，那么 <code>primaryEngine</code> bean（也就是 <code>PetrolEngine</code> 实例）将被优先考虑，因为它被标记为 <code>@Primary</code>。</p><h4 id="_4-5-3-从自动注入中排除-bean" tabindex="-1"><a class="header-anchor" href="#_4-5-3-从自动注入中排除-bean" aria-hidden="true">#</a> 4.5.3 从自动注入中排除 Bean</h4><p>你可以为每个 Bean 设定是否要从自动注入中排除。在 Spring 的 XML 格式中，有一个 <code>autowire-candidate</code> 属性来控制这个功能。当这个属性设为 <code>false</code> 时，Spring 容器会将该特定 Bean 排除出自动注入的考虑范围（包括像 <code>@Autowired</code> 这样的注解配置方式）。</p><p>要在基于 Java 的配置中达到这个效果，你可以使用 <code>@Qualifier</code> 注解配合 <code>@Autowired</code> 注解来明确指定 Bean 的名称，从而避免使用被排除的 Bean。 定义两个不同的 Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;mainEngine&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainEngine</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;backupEngine&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackupEngine</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你想注入其中一个 Bean，而不希望 Spring 因为类型匹配而混淆它们，可以这样做：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MainEngine</span> engine<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">CarService</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;mainEngine&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MainEngine</span> engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，尽管 <code>BackupEngine</code> 也是一个有效的 <code>MainEngine</code> 类型的 Bean，但由于我们明确地使用了 <code>@Qualifier(&quot;mainEngine&quot;)</code>，因此 <code>MainEngine</code> Bean 将被注入，而不是 <code>BackupEngine</code>。 这种方式不仅可以帮助你排除某些 Bean 从自动注入的候选中，还可以使你的代码更加明确，清晰地表示你的意图，而不仅仅依赖于自动注入的机制。</p><p>总之，要排除一个 Bean 从自动注入中，最简单的方法是在注入时使用 <code>@Qualifier</code> 注解来明确指定所需的 Bean，从而避免使用不想要的 Bean。</p><h3 id="_4-6-方法注入" tabindex="-1"><a class="header-anchor" href="#_4-6-方法注入" aria-hidden="true">#</a> 4.6 方法注入</h3><p>在大多数应用场景中，容器中的大多数 beans 都是单例模式。当一个单例 bean 需要与另一个单例 bean 合作，或一个非单例 bean 需要与另一个非单例 bean 合作时，通常通过定义一个 bean 作为另一个 bean 的属性来处理依赖关系。</p><p>但当 bean 的生命周期不同时，就会出现问题。假设单例 bean A 需要使用非单例（原型）bean B，可能在 A 上的每次方法调用都需要。容器只创建一次单例 bean A，因此只有一次机会设置属性。容器不能每次 bean A 需要它时都为它提供一个新的 bean B 实例。</p><p>一个解决方案是放弃一些控制反转。您可以通过实现 <code>ApplicationContextAware</code> 接口，使 bean A 意识到容器，并通过向容器发出 <code>getBean(&quot;B&quot;)</code> 调用，每次 bean A 需要它时都请求一个 bean B 实例。 但这种方法不是很理想，因为业务代码意识到并与 Spring 框架耦合。Spring IoC 容器的方法注入功能，让你可以干净地处理这个用例。</p><p>下面的示例使用基于 Java 的配置，展示如何使用 <code>@Lookup</code> 注解实现方法注入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>	<span class="token comment">// 默认单例 Bean</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Map</span> commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Command</span> command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Lookup</span><span class="token punctuation">(</span><span class="token string">&quot;command&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 方法注入一个原型 Bean（作用域不同）</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;command&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 原型 Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span> state<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">Map</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 业务逻辑</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>CommandManager</code> 是一个单例，但每次调用 <code>createCommand</code> 时，都会获取一个新的 <code>Command</code> 实例，因为它标记为原型范围，并使用 <code>@Lookup</code> 注解进行方法注入。这样，我们就不需要使业务代码与 Spring 框架紧密耦合也能使一个单例 Bean 在每次使用时都为它提供一个新的原型 Bean。</p>`,273),d={href:"https://spring.io/blog/2004/08/06/method-injection/",target:"_blank",rel:"noopener noreferrer"},r=t(`<h4 id="_4-6-1-查找方法注入" tabindex="-1"><a class="header-anchor" href="#_4-6-1-查找方法注入" aria-hidden="true">#</a> 4.6.1 查找方法注入</h4><p>当您的 Spring 应用中有一个单例（singleton）bean，每次使用时都需要一个新的原型（prototype）bean 实例时，查找方法注入就显得非常有用。</p><p>传统的方法是，您可以让单例 bean 通过实现 <code>ApplicationContextAware</code> 接口感知到 Spring 容器，并每次需要原型 bean 时都调用 <code>getBean()</code> 方法。但这样做会让您的业务代码与 Spring 框架耦合，这并不是一个好的实践。 而查找方法注入提供了一个解决方案：通过 Spring 动态覆盖 bean 中的方法，每次该方法被调用时，都会返回一个新的 bean 实例。这样做的优势是您的业务代码不需要依赖 Spring，而且写起来也更简洁。</p><p>原型 Bean（每次请求都返回一个新的实例）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;myCommand&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 你的实现细节</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用查找方法注入的单例 Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Object</span> commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Command</span> command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Lookup</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述 <code>CommandManager</code> 示例中，每次调用 <code>createCommand</code> 方法时，都会从 Spring 容器中获取一个新的 <code>AsyncCommand</code> 实例，而 <code>CommandManager</code> 本身是一个单例。</p><p>这里的关键点是 <code>@Lookup</code> 注解和 <code>createCommand</code> 方法是抽象的。Spring 在运行时动态生成 <code>CommandManager</code> 的子类，覆盖 <code>createCommand</code> 方法，使其返回一个新的 <code>AsyncCommand</code> 实例。</p><blockquote><p>查找方法注入主要用于以下场景：</p><ol><li>单例 bean 需要多次与原型 bean 交互。例如，一个缓存管理器（singleton）需要为每个请求创建一个新的缓存项（prototype）。</li><li>您想避免业务代码与 Spring 框架的耦合。</li></ol></blockquote><h4 id="_4-6-2-任意方法替换" tabindex="-1"><a class="header-anchor" href="#_4-6-2-任意方法替换" aria-hidden="true">#</a> 4.6.2 任意方法替换</h4><p>在 Spring 框架中，除了查找方法注入外，还有一个功能叫做 “任意方法替换”（Arbitrary Method Replacement）。这项功能允许我们替换 bean 中现有的方法实现。尽管这个功能不如查找方法注入那么常用，但在某些特殊的场景下可能会很有用。</p><ol><li><strong>原始的类：</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyValueCalculator</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">computeValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// some real code...</span>
        <span class="token keyword">return</span> input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// some other methods...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>替换方法的实现：</strong></li></ol><p>我们需要一个类来实现 <code>MethodReplacer</code> 接口，该接口只有一个方法：<code>reimplement()</code>。此方法将被用来替换原始方法的实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplacementComputeValue</span> <span class="token keyword">implements</span> <span class="token class-name">MethodReplacer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">reimplement</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> m<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// get the input value, work with it, and return a computed result</span>
        <span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// ... your new implementation</span>
        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>JavaConfig 配置：</strong></li></ol><p>在 JavaConfig 中，我们不直接使用 “方法替换” 的概念。相反，我们通常会利用 Java 的多态性和组合来达到类似的目的。但严格说来，Spring 的 JavaConfig 并没有一个直接等价于 XML 的 <code>&lt;replaced-method&gt;</code> 的注解方式。</p><p>例如在 XML 配置文件中，我们可以这样进行配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;myValueCalculator&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;x.y.z.MyValueCalculator&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> arbitrary method replacement <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>replaced<span class="token operator">-</span>method name<span class="token operator">=</span><span class="token string">&quot;computeValue&quot;</span> replacer<span class="token operator">=</span><span class="token string">&quot;replacementComputeValue&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>arg<span class="token operator">-</span>type<span class="token operator">&gt;</span><span class="token class-name">String</span><span class="token operator">&lt;</span><span class="token operator">/</span>arg<span class="token operator">-</span>type<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>replaced<span class="token operator">-</span>method<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;replacementComputeValue&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;a.b.c.ReplacementComputeValue&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 JavaConfig 中并没有提供有用的注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MyValueCalculator</span> <span class="token function">myValueCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyValueCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ReplacementComputeValue</span> <span class="token function">replacementComputeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReplacementComputeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述配置中，我们定义了两个bean：<code>MyValueCalculator</code> 和 <code>ReplacementComputeValue</code>。但这并不真正地 “替换” 了原始方法的实现。如果您真的需要替换方法的功能，您可能需要考虑其他方法，例如使用代理或者 AOP（面向切面编程）。</p><blockquote><p>总结：尽管任意方法替换在 XML 配置中是可行的，但在基于 Java 的配置中，我们通常会使用其他技术和模式来达到相同的目的。</p></blockquote><h2 id="_5-bean-作用域" tabindex="-1"><a class="header-anchor" href="#_5-bean-作用域" aria-hidden="true">#</a> 5.Bean 作用域</h2><p>当您创建一个 bean 定义时，您创建了一个配方，用于创建由该 bean 定义的类的实际实例。bean 定义是一个配方的想法很重要，因为这意味着，与使用类一样，您可以从一个配方创建许多对象实例。</p><p>您不仅可以控制要插入到从特定 bean 定义创建的对象中的各种依赖项和配置值，还可以控制从特定 bean 定义创建的对象的范围。这种方法功能强大且灵活，因为您可以通过配置选择创建的对象的作用域，而不必在 Java 类级别上设置对象的作用域。可以将 bean 定义为部署在多个作用域中的一个。Spring 框架支持 6 个作用域，其中 4 个只有在使用 web 感知的 <code>ApplicationContext</code> 时才可用。您还可以创建自定义作用域。</p><p>Spring 支持的作用域如下表：</p>`,29),k=n("thead",null,[n("tr",null,[n("th",null,[n("strong",null,"Scope")]),n("th",null,[n("strong",null,"Description")])])],-1),v={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#beans-factory-scopes-singleton",target:"_blank",rel:"noopener noreferrer"},m=n("td",null,"(默认) 将单个 bean 定义作用于每个 Spring IoC 容器的单个对象实例。",-1),b={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#beans-factory-scopes-prototype",target:"_blank",rel:"noopener noreferrer"},g=n("td",null,"将单个 bean 定义限定为任意数量的对象实例。",-1),y={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#beans-factory-scopes-request",target:"_blank",rel:"noopener noreferrer"},w=n("td",null,"将单个 bean 定义限定在单个 HTTP 请求的生命周期内。也就是说，每个 HTTP 请求都有自己的 bean 实例，该实例是在单个 bean 定义的后面创建的。只在具有 web 感知的 Spring ApplicationContext 上下文中有效。",-1),h={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#beans-factory-scopes-session",target:"_blank",rel:"noopener noreferrer"},f=n("td",null,"将单个 bean 定义限定在 HTTP 会话的生命周期内。只在具有 web 感知的 Spring ApplicationContext 上下文中有效。",-1),S={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#beans-factory-scopes-application",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,"将单个 bean 定义限定在 ServletContext 的生命周期内。只在具有 web 感知的 Spring ApplicationContext 上下文中有效。",-1),B={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/web.html#websocket-stomp-websocket-scope",target:"_blank",rel:"noopener noreferrer"},x=n("td",null,"将单个 bean 定义限定在 WebSocket 的生命周期内。只在具有 web 感知的 Spring ApplicationContext 上下文中有效。",-1),j=t(`<h3 id="_5-1-单例作用域-the-singleton-scope" tabindex="-1"><a class="header-anchor" href="#_5-1-单例作用域-the-singleton-scope" aria-hidden="true">#</a> 5.1 单例作用域 (The Singleton Scope)</h3><p>在 Spring 中，当一个 bean 的作用域被定义为 “单例” 时，意味着该 bean 的定义对应的类只有一个实例会被 Spring IoC 容器创建并管理。无论你多少次请求这个 bean，容器都会返回这个唯一的实例。</p><p>为了更明白地理解，当你在 Spring 的 Java 配置中定义了一个 bean，并将其标记为单例，Spring IoC 容器会为这个 bean 的定义创建一个且仅一个的实例。这个唯一的实例会被储存到一个缓存中，以后所有对这个名为 “单例” 的 bean 的请求和引用都会返回这个已经缓存的对象实例。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-12-145121.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是，Spring 的单例 bean 的概念与 “四人帮”（Gang of Four, GoF)设计模式书中定义的单例模式是不同的。GoF 的单例模式是硬编码的，确保每个 ClassLoader 只创建该类的一个实例。而 Spring 的单例作用域更好地描述为 “每个容器每个 bean”。这意味着，如果你在一个 Spring 容器中为特定的类定义了一个 bean，那么 Spring 容器只会为该 bean 的定义创建该类的一个实例。而且，单例作用域是 Spring 的默认作用域。 现在，我们用 Java 注解和 JavaConfig 的形式看看如何定义一个单例 bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token comment">// 这就是一个默认的单例bean，因为singleton是Spring的默认作用域</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DefaultAccountService</span> <span class="token function">accountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 显式地标记为singleton，但实际上这是多余的，因为singleton已经是默认值</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;singleton&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">DefaultAccountService</span> <span class="token function">anotherAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了两个 bean，一个是默认的单例 bean，另一个显式地标记为单例。但实际上，无论你是否添加了 <code>@Scope(&quot;singleton&quot;)</code>，它们都是单例的。</p><h3 id="_5-2-原型作用域-the-prototype-scope" tabindex="-1"><a class="header-anchor" href="#_5-2-原型作用域-the-prototype-scope" aria-hidden="true">#</a> 5.2 原型作用域 (The Prototype Scope)</h3><p>当一个 bean 的作用域被定义为 “原型” 时，这意味着每次请求该特定 bean 时，都会创建该 bean 的一个新实例。这种情况适用于当 bean 被注入到另一个 bean 中或通过容器的 <code>getBean()</code> 方法请求时。通常，对于所有有状态的 bean，你应该使用原型作用域，而对于无状态的 bean，使用单例作用域。</p><p>要注意，与其他作用域不同，Spring 不管理原型 bean 的完整生命周期。容器实例化、配置和组装一个原型对象后，会将其交给客户端，但之后不会再记录该原型实例。因此，尽管所有对象的初始化生命周期回调方法都会被调用，无论其作用域如何，但在原型的情况下，配置的销毁生命周期回调不会被调用。客户端代码必须清理原型作用域的对象并释放原型 bean 持有的昂贵资源。要让 Spring 容器释放原型作用域 bean 持有的资源，你可以尝试使用一个自定义的 bean 后置处理器，它保持对需要清理的 bean 的引用。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-12-145131.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从某些方面看，Spring 容器对原型作用域 bean 的角色可以看作是 Java 的 new 操作符的替代品。从那一点之后的所有生命周期管理都必须由客户端处理。 现在，我们用 Java 注解和 JavaConfig 的形式看看如何定义一个原型 bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token comment">// 定义一个原型作用域的bean</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">DefaultAccountService</span> <span class="token function">accountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们定义了一个原型作用域的 bean。每次请求 <code>accountService</code> 时，都会得到一个新的 <code>DefaultAccountService</code> 实例。</p>`,14),A={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#beans-factory-scopes",target:"_blank",rel:"noopener noreferrer"},q=t(`<h2 id="_6-自定义-bean-的性质" tabindex="-1"><a class="header-anchor" href="#_6-自定义-bean-的性质" aria-hidden="true">#</a> 6.自定义 Bean 的性质</h2><blockquote><p>Spring 框架提供了许多可用于自定义 bean 性质的接口。</p></blockquote><h3 id="_6-1-生命周期回调" tabindex="-1"><a class="header-anchor" href="#_6-1-生命周期回调" aria-hidden="true">#</a> 6.1 生命周期回调</h3><p>在 Spring 框架中，bean 的生命周期是由容器来管理的。为了能够与 bean 的生命周期互动，你可以采用多种方式来定义在 bean 初始化和销毁时需要执行的操作。</p><ol><li><strong>Spring 特定的接口</strong>：你可以让你的 bean 实现 Spring 的 <code>InitializingBean</code> 和 <code>DisposableBean</code> 接口。当 bean 初始化完成后，容器会调用 <code>afterPropertiesSet()</code> 方法；当 bean 被销毁之前，容器会调用 <code>destroy()</code> 方法。</li><li><strong>JSR-250 注解</strong>：在现代的 Spring 应用中，使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解是通常被认为的最佳实践来接收生命周期回调。使用这些注解的好处是，你的 bean 不会与 Spring 的特定接口耦合。 <ol><li><code>@PostConstruct</code>：该注解表示该方法应该在 bean 所有属性都设置完毕后被调用。</li><li><code>@PreDestroy</code>：该注解表示在 bean 被销毁之前需要执行的方法。</li></ol></li><li><strong>Bean 后置处理器</strong>：Spring 内部使用 <code>BeanPostProcessor</code> 实现来处理找到的任何回调接口，并调用相应的方法。如果你需要 Spring 默认未提供的自定义特性或其他生命周期行为，你可以自己实现 <code>BeanPostProcessor</code>。</li></ol><p>除了初始化和销毁回调外，由 Spring 管理的对象还可以实现 <code>Lifecycle</code> 接口，这样这些对象就可以参与容器的启动和关闭过程。</p><h4 id="_6-1-1-初始化回调" tabindex="-1"><a class="header-anchor" href="#_6-1-1-初始化回调" aria-hidden="true">#</a> 6.1.1 初始化回调</h4><p>在 Spring 中，有时候你可能想要在 bean 的所有必要属性都被容器设置完之后，执行一些初始化工作。为了实现这个目的，Spring 提供了几种方式来为 bean 定义初始化回调。</p><ol><li><strong>通过 InitializingBean 接口：</strong></li></ol><p><code>InitializingBean</code> 接口允许 bean 在容器设置了所有必要的属性后执行初始化工作。这个接口只有一个方法：<code>void afterPropertiesSet() throws Exception;</code> 。但是，我们通常不建议使用 <code>InitializingBean</code> 接口，因为它不必要地将代码与 Spring 耦合在一起。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些初始化工作</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>使用 @PostConstruct 注解或指定一个 POJO 初始化方法：</strong></li></ol><p>使用 Java 配置时，你可以使用 <code>@Bean</code> 的 <code>initMethod</code> 属性来指定一个初始化方法。这个方法应该没有参数并返回 <code>void</code>。这种方式的好处是你的代码不会与 Spring 特定的接口耦合。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">exampleInitBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些初始化工作</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@PostConstruct</code> 是 JSR-250 提供的注解，它在 Spring 中被用作初始化回调。当容器对所有属性进行依赖注入后，它会调用带有 <code>@PostConstruct</code> 注解的方法。这提供了一种机会来执行任何必要的后处理设置或启动。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token comment">// 可以是其他属性和依赖注入</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些初始化工作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean is going through init.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 其他业务方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>init</code> 方法被标记为 <code>@PostConstruct</code>，这意味着每当 <code>ExampleBean</code> 的实例被 Spring 容器创建和初始化时，<code>init</code> 方法都会被自动调用。</p><blockquote><p>综上所述，第二种方法（使用 <code>@PostConstruct</code> 或指定 POJO 初始化方法）更为推荐，因为它避免了代码与 Spring 的耦合。</p></blockquote><h4 id="_6-1-2-销毁回调" tabindex="-1"><a class="header-anchor" href="#_6-1-2-销毁回调" aria-hidden="true">#</a> 6.1.2 销毁回调</h4><p>Spring 提供了方法，以便在 Spring 容器销毁 bean 之前执行某些操作。一种方法是通过实现 <code>DisposableBean</code> 接口，但建议不要这样做，因为它不必要地将代码与 Spring 耦合起来。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些销毁工作（例如释放连接池中的连接）</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐的方式是使用 <code>@PreDestroy</code> 注解或指定一个普通的销毁方法。对于基于 Java 的配置，您可以在 <code>@Bean</code> 注解中使用 <code>destroyMethod</code> 属性来指定销毁方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PreDestroy</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些销毁工作（例如释放连接池中的连接）</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean is being destroyed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，当 <code>ExampleBean</code> 实例在 Spring 容器销毁时，<code>cleanup</code> 方法会被自动调用，因为它被 <code>@PreDestroy</code> 注解标记。</p><p>如果您正在使用 Java 配置类，可以使用 <code>@Bean</code> 的 <code>destroyMethod</code> 属性来指定一个普通的销毁方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">&quot;cleanup&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span> <span class="token function">exampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行一些销毁工作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean is being destroyed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，当 Spring 容器销毁 <code>ExampleBean</code> 的实例时，它将自动调用 <code>cleanup</code> 方法，因为在 <code>@Bean</code> 注解中指定了 <code>destroyMethod</code> 属性。</p><blockquote><p>总结：<code>@PreDestroy</code> 注解和 <code>@Bean</code> 的 <code>destroyMethod</code> 属性都为 Spring 提供了销毁 bean 之前需要执行的方法的信息，但建议使用 <code>@PreDestroy</code> 注解，因为它使代码与 Spring 的具体实现解耦。</p></blockquote><h4 id="_6-1-3-默认初始化和销毁方法" tabindex="-1"><a class="header-anchor" href="#_6-1-3-默认初始化和销毁方法" aria-hidden="true">#</a> 6.1.3 默认初始化和销毁方法</h4><p>在 Spring 中，您可以定义默认的初始化和销毁方法，这样您就不必为每个 Bean 单独指定这些方法。这有助于确保项目中的命名一致性。</p><p>如果是传统的 XML 方式，你可以像如下这么进行配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultBlogService</span> <span class="token keyword">implements</span> <span class="token class-name">BlogService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlogDao</span><span class="token punctuation">(</span><span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">=</span> blogDao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// this is (unsurprisingly) the initialization callback method</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;The [blogDao] property must be set.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 统一定义所有 Bean 的初始化方法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">default-init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultBlogService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogDao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Java 配置中，虽然没有直接的等价功能，但我们可以通过定义一个基类或接口来实现相似的效果，并让所有其他的 Bean 都继承或实现它。</p><p>假设您的初始化回调方法名为 <code>init()</code>，销毁回调方法名为 <code>destroy()</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DefaultLifecycleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认的初始化逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Default initialization logic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认的销毁逻辑</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Default destroy logic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您的实际 Bean 可以继承这个基类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultBlogService</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultLifecycleBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;The [blogDao] property must be set.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ... 其他方法 ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Java 配置中，您可以这样定义 Bean 并指定初始化和销毁方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">&quot;destroy&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">DefaultBlogService</span> <span class="token function">blogService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultBlogService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ... 其他Bean定义 ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当 Spring 容器创建并组装 <code>DefaultBlogService</code> Bean 时，它会在适当的时候调用 <code>init()</code> 方法。销毁时同样会调用 <code>destroy()</code> 方法。</p><blockquote><p>注意：Spring 容器保证配置的初始化回调在 Bean 提供所有依赖项后立即被调用。这意味着在初始化回调被调用的这个阶段，Bean 还是它原始的版本，还没有被任何 AOP 拦截器所 “装饰” 或 “修改”。这意味着，如果您在初始化方法中调用 Bean 的其他方法，那么这些方法调用不会被 AOP 拦截器捕获。由于 AOP 拦截器在初始化阶段尚未应用到 Bean 上，这确保了初始化方法的调用不受任何外部影响，它仅仅是 Bean 原始代码的一部分。这意味着初始化方法不会因为某个拦截器而产生意外的行为。因为初始化是在原始 Bean 上完成的，所以无论何时与这个 Bean 交互，都可以保证得到预期的结果，而不会受到 AOP 拦截器的影响。</p></blockquote><h4 id="_6-1-4-组合生命周期机制" tabindex="-1"><a class="header-anchor" href="#_6-1-4-组合生命周期机制" aria-hidden="true">#</a> 6.1.4 组合生命周期机制</h4><p>当我们谈论 Spring 中 Bean 的生命周期时，我们实际上是指 Bean 从创建到销毁的过程。在这个过程中，Spring 提供了多种机制来允许我们插入自定义的逻辑，例如在 Bean 创建后初始化一些资源或在 Bean 销毁之前释放一些资源。</p><p>从 Spring 2.5 开始，我们有以下三种控制 Bean 生命周期行为的选项：</p><ol><li>使用 <code>InitializingBean</code> 和 <code>DisposableBean</code> 回调接口；</li><li>自定义的 <code>init()</code> 和 <code>destroy()</code> 方法；</li><li>使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解。</li></ol><hr><p><strong>使用 InitializingBean 和 DisposableBean 回调接口：</strong></p><p>当你的 Bean 实现 <code>InitializingBean</code> 接口时，必须重写 <code>afterPropertiesSet()</code> 方法。此方法在 Spring 容器为 Bean 设置了所有属性之后会被调用。同样地，当 Bean 实现 <code>DisposableBean</code> 接口时，必须重写 <code>destroy()</code> 方法。此方法在 Bean 销毁时会被调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Initialization logic</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Cleanup logic</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>自定义的 init() 和 destroy() 方法：</strong></p><p>你可以为你的 Bean 定义自己的初始化和销毁方法。这些方法可以随意命名，并在 Bean 配置中进行指定。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">&quot;myInit&quot;</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">&quot;myDestroy&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MyCustomBean</span> <span class="token function">myCustomBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Initialization logic</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Cleanup logic</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>使用 @PostConstruct 和 @PreDestroy 注解：</strong></p><p>这两个注解用于标记一个方法，表示该方法应在 Bean 的某个生命周期阶段被执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnotatedBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Initialization logic</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Cleanup logic</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>组合使用</strong></p><p>当 Bean 配置了多种生命周期机制时，它们将按照以下顺序执行： 初始化方法执行顺序：</p><ol><li><code>@PostConstruct</code> 注解的方法；</li><li><code>afterPropertiesSet()</code> 方法（<code>InitializingBean</code> 接口定义）</li><li>自定义的 <code>init()</code> 方法（<code>initMethod</code> 属性指定）</li></ol><p>销毁方法执行顺序：</p><ol><li><code>@PreDestroy</code> 注解的方法；</li><li><code>destroy()</code> 方法（<code>DisposableBean</code> 接口定义）</li><li>自定义的 <code>destroy()</code> 方法（<code>destroyMethod</code> 属性指定）</li></ol><p>如果同一生命周期阶段配置了多个相同名称的方法（例如，多个 <code>init()</code> 方法），则该方法只会执行一次。</p></div><h4 id="_6-1-5-bean-的启动和关闭回调" tabindex="-1"><a class="header-anchor" href="#_6-1-5-bean-的启动和关闭回调" aria-hidden="true">#</a> 6.1.5 Bean 的启动和关闭回调</h4><p>在 Spring 中，你可以为 Bean 定义启动和关闭的生命周期。这主要通过 <code>Lifecycle</code> 接口实现，这个接口定义了三个核心方法：</p><ul><li><code>start()</code>: 启动 Bean</li><li><code>stop()</code>: 关闭 Bean</li><li><code>isRunning()</code>: 判断 Bean 是否正在运行</li></ul><p>示例使用代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLifecycleBean</span> <span class="token keyword">implements</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 启动逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 关闭逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 根据实际情况返回</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LifecycleProcessor</code>（生命周期处理器）是 <code>Lifecycle</code> 的扩展，它还添加了其他两个方法来响应上下文的刷新和关闭： <img src="https://cdn.nlark.com/yuque/0/2023/png/28699456/1692269024707-c33b0c55-61ff-4ee0-8d3e-4a03603a7c68.png#averageHue=%231a1c27&amp;clientId=u76ef3b47-9c00-4&amp;from=paste&amp;height=164&amp;id=u54429eb7&amp;originHeight=164&amp;originWidth=709&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33076&amp;status=done&amp;style=shadow&amp;taskId=ud4b1c7d5-16b3-44b4-9201-92dc9a1c741&amp;title=&amp;width=709" alt="image.png" loading="lazy"></p><ul><li><code>onRefresh()</code>: 当 <code>ApplicationContext</code> 刷新时调用。</li><li><code>onClose()</code>: 当 <code>ApplicationContext</code> 关闭时调用。</li></ul><p>普通的 <code>Lifecycle</code> 接口仅为显式的启动和停止提供合同，并不暗示在上下文刷新时自动启动。<code>SmartLifecycle</code>（智能生命周期）为生命周期添加了更多的智能功能。这包括自动启动、异步关闭和定义启动/关闭的顺序。 核心方法：</p><ul><li><code>isAutoStartup()</code>: 是否在上下文刷新时自动启动。</li><li><code>stop(Runnable callback)</code>: 带有回调的停止方法。</li><li><code>getPhase()</code>: 获取阶段值，决定 Bean 的启动和关闭顺序。</li></ul><p>下面是使用示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySmartLifecycleBean</span> <span class="token keyword">implements</span> <span class="token class-name">SmartLifecycle</span> <span class="token punctuation">{</span>

    <span class="token comment">// 在上下文刷新时自动启动 Bean</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 带有回调的停止方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 关闭逻辑</span>
        callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取阶段值，决定 Bean 的启动和关闭顺序</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 启动逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 关闭逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 根据实际情况返回</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你有多个 <code>SmartLifecycle</code> Beans 时，它们的启动和关闭顺序可能很重要。<code>SmartLifecycle</code> 提供了 <code>getPhase()</code> 方法来定义这个顺序。对象的启动顺序由其阶段值从低到高决定，而关闭顺序则相反，从高到低。默认情况下，任何不实现 SmartLifecycle 的 Lifecycle 对象的阶段值为 0。</p><p>例如，<code>getPhase()</code> 返回 <code>Integer.MIN_VALUE</code> 的对象将首先启动且最后关闭。而返回 <code>Integer.MAX_VALUE</code> 的对象将最后启动并首先关闭。</p><p><code>SmartLifecycle</code> 的 <code>stop(Runnable callback)</code> 方法允许异步关闭。你必须在 Bean 的关闭过程完成后调用 <code>callback.run()</code> 方法。默认情况下，<code>DefaultLifecycleProcessor</code>（<code>LifecycleProcessor</code> 的默认实现）会等待其超时值以等待每个阶段中的对象组调用该回调。默认的每个阶段超时是 30 秒。你可以在上下文中定义一个名为 <code>lifecycleProcessor</code> 的 bean 来覆盖默认的生命周期处理器实例。</p><h4 id="_6-1-6-在非-web-应用程序中优雅地关闭-spring-ioc-容器" tabindex="-1"><a class="header-anchor" href="#_6-1-6-在非-web-应用程序中优雅地关闭-spring-ioc-容器" aria-hidden="true">#</a> 6.1.6 在非 Web 应用程序中优雅地关闭 Spring IoC 容器</h4><p>在 Web 应用中，Spring 的基于 Web 的 <code>ApplicationContext</code> 实现已经包含了代码来优雅地关闭 IoC 容器。但在非 Web 应用程序中，我们需要额外进行设置。</p><p>为了确保在非 Web 应用程序中 Spring 的 IoC 容器能够优雅地关闭，释放所有资源，并正确地调用所有单例 bean 的 <code>destroy()</code> 方法，你需要在 JVM 中注册一个 <code>shutdown</code> 钩子（shutdown hook）。 如何注册 <code>shutdown</code> 钩子？</p><p>你可以通过调用 <code>ConfigurableApplicationContext</code> 接口上的 <code>registerShutdownHook()</code> 方法来注册 <code>shutdown</code> 钩子。</p><p>下面是一个简单的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Boot</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 JavaConfig 加载 Spring 上下文</span>
        <span class="token class-name">ConfigurableApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 为上面的上下文添加一个 shutdown 钩子</span>
        ctx<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 应用程序的主要逻辑在这里运行...</span>

        <span class="token comment">// main方法退出时，会在应用程序关闭之前调用钩子</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这是一个简单的 JavaConfig 配置类</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义你的 beans 和其他配置...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例使用 <code>AnnotationConfigApplicationContext</code> 来加载基于 Java 的配置。当你注册 <code>shutdown</code> 钩子后，无论应用程序何时结束，都会确保 IoC 容器优雅地关闭，并调用所有相关的 <code>destroy()</code> 方法。</p><h3 id="_6-2-applicationcontextaware-和-baennameaware" tabindex="-1"><a class="header-anchor" href="#_6-2-applicationcontextaware-和-baennameaware" aria-hidden="true">#</a> 6.2 ApplicationContextAware 和 BaenNameAware</h3><p>Spring 提供了一些特殊的接口，允许 Bean 在被 Spring IoC 容器创建时获取特定的环境信息。</p><h4 id="_6-2-1-applicationcontextaware" tabindex="-1"><a class="header-anchor" href="#_6-2-1-applicationcontextaware" aria-hidden="true">#</a> 6.2.1 ApplicationContextAware</h4><p>如果你的 Bean 实现了 <code>ApplicationContextAware</code> 接口，那么当 Spring 容器创建这个 Bean 的实例时，这个 Bean 可以获得对创建它的 <code>ApplicationContext</code> 的引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">displayOtherBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 context 获取其他 beans</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：虽然你可以这样做，但通常最好避免直接在代码中使用 <code>ApplicationContext</code>，因为这会与 Spring 耦合，并违背控制反转（IoC）原则。Spring 提供了其他方式来注入依赖。</p></blockquote><h4 id="_6-2-2-baennameaware" tabindex="-1"><a class="header-anchor" href="#_6-2-2-baennameaware" aria-hidden="true">#</a> 6.2.2 BaenNameAware</h4><p>如果你的 Bean 实现了 <code>BeanNameAware</code> 接口，当 Spring 容器创建这个 Bean 的实例时，这个 Bean 会被提供其在 Spring 容器中定义的名称。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanNameAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NamedBean</span> <span class="token keyword">implements</span> <span class="token class-name">BeanNameAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> beanName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean&#39;s name is: &quot;</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此回调发生在正常 bean 属性被填充之后，但在初始化回调（如 <code>InitializingBean.afterPropertiesSet()</code> 或自定义的初始化方法）之前。</p><p>最后，记住，使用 <code>@Autowired</code> 注解是获取 <code>ApplicationContext</code> 引用的另一种方法。你可以简单地在需要自动注入的属性、构造函数或方法上添加 <code>@Autowired</code> 注解。</p><h3 id="_6-3-其他-aware-接口" tabindex="-1"><a class="header-anchor" href="#_6-3-其他-aware-接口" aria-hidden="true">#</a> 6.3 其他 Aware 接口</h3>`,96),M={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#aware-list",target:"_blank",rel:"noopener noreferrer"},P=t(`<h2 id="_7-bean-定义继承" tabindex="-1"><a class="header-anchor" href="#_7-bean-定义继承" aria-hidden="true">#</a> 7.Bean 定义继承</h2><p>Spring 允许一个 Bean 的定义继承另一个 Bean 的定义，这意味着你可以基于一个已经配置的 Bean 来创建一个新的 Bean，从而避免重复配置相同的属性。使用 Bean 定义继承可以节省大量的输入工作。这实际上是一种模板化的形式。</p><p>在 JavaConfig 中，我们可以通过使用 <code>@Bean</code> 注解定义的方法来模拟继承。方法的返回值作为 Bean，并且可以使用另一个 <code>@Bean</code> 方法的返回值来模拟从父 Bean 继承。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ParentBean</span> <span class="token function">parentBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ParentBean</span> parentBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParentBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        parentBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;parent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        parentBean<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> parentBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ChildBean</span> <span class="token function">childBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChildBean</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildBean</span><span class="token punctuation">(</span><span class="token function">parentBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继承父 Bean</span>
        child<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;override&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 覆盖父 Bean 的属性</span>
        <span class="token keyword">return</span> child<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParentBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChildBean</span> <span class="token keyword">extends</span> <span class="token class-name">ParentBean</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个类可以选择覆盖 ParentBean 的属性或方法，或者添加新的属性和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要点如下：</p><ol><li>子 Bean 可以覆盖父 Bean 的属性和方法。</li><li>如果子 Bean 没有指定某个属性的值，它将使用父 Bean 的值。</li><li>子 Bean 继承了父 Bean 的作用域、构造函数参数值、属性值和方法覆盖，但也可以选择添加新的值。</li><li>任何在子 Bean 上指定的作用域、初始化方法、销毁方法或静态工厂方法设置都会覆盖父 Bean 的相应设置。</li><li>如果你只打算将一个 Bean 定义作为模板使用（即，你永远不会实例化它），那么在 JavaConfig 中，你只需要不为它创建一个 <code>@Bean</code> 方法即可。</li></ol><h2 id="_8-容器的扩展点" tabindex="-1"><a class="header-anchor" href="#_8-容器的扩展点" aria-hidden="true">#</a> 8.容器的扩展点</h2><p>通常，应用程序开发者无需子类化 <code>ApplicationContext</code> 实现类。相反，通过插入特定的集成接口的实现，可以扩展 Spring IoC 容器。以下部分描述了这些集成接口。</p><h3 id="_8-1-使用-beanpostprocessor-自定义-beans" tabindex="-1"><a class="header-anchor" href="#_8-1-使用-beanpostprocessor-自定义-beans" aria-hidden="true">#</a> 8.1 使用 BeanPostProcessor 自定义 Beans</h3><p><code>BeanPostProcessor</code> 接口定义了回调方法，您可以实现这些方法来提供自己的实例化逻辑、依赖解析逻辑等，或者覆盖容器的默认逻辑。如果您想在 Spring 容器完成 Bean 的实例化、配置和初始化后执行某些自定义逻辑，您可以插入一个或多个自定义 <code>BeanPostProcessor</code> 实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在初始化之前执行的逻辑</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在初始化之后执行的逻辑</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 控制执行顺序</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要点如下：</p><ul><li><p>可以配置多个 <code>BeanPostProcessor</code> 实例，并通过设置 <code>order</code> 属性来控制这些 <code>BeanPostProcessor</code> 实例的执行顺序。</p></li><li><p><code>BeanPostProcessor</code> 实例对 bean 或对象实例进行操作。</p></li><li><p><code>BeanPostProcessor</code> 实例在每个容器中都是有作用域的。如果在一个容器中定义了一个 <code>BeanPostProcessor</code>，它只会对该容器中的 beans 进行后处理。</p></li><li><p>若要更改实际的 bean 定义，您需要使用 <code>BeanFactoryPostProcessor</code>。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>BeanPostProcessor 说明</strong></p><p><code>BeanPostProcessor</code> 接口只有两个回调方法 <code>postProcessBeforeInitialization</code> 和 <code>postProcessAfterInitialization</code> 作用在 Bean 初始化的前后。容器为每个由创建的 bean 实例从容器获得回调，都在容器初始化方法之前和之后。后处理器可以采取任何与 bean 实例相关的操作。一个 bean 后处理器通常会检查回调接口，或者可能会使用代理包装一个 bean。</p><p><code>ApplicationContext</code> 会自动检测在配置元数据中定义的实现 <code>BeanPostProcessor</code> 接口的任何 beans。<code>ApplicationContext</code> 会将这些检测到的 beans 注册为后处理器，以便稍后在创建其他 bean 时调用它们的回调方法。与其他 beans 一样，Bean 后处理器可以在容器中部署。</p><p>在使用 <code>@Bean</code> 工厂方法在配置类上声明 <code>BeanPostProcessor</code> 时，工厂方法的返回类型应该至少是 <code>org.springframework.beans.factory.config.BeanPostProcessor</code> 接口，明确地表示该 bean 的后处理器特性。</p><p>实现 <code>BeanPostProcessor</code> 接口的类是特殊的，并由容器以不同的方式处理。所有 <code>BeanPostProcessor</code> 实例和它们直接引用的 beans 在启动时都会被实例化。</p></div></li></ul><hr><p>Spring 的 <code>BeanPostProcessor</code> 是一个非常强大的工具，允许开发者在 Spring 创建并准备好 bean 实例后，但在 bean 真正被应用程序使用之前（初始化），插入自己的逻辑。通常情况下，我们会在 Spring 配置中直接声明它，然后 Spring 容器会自动检测并应用它。但有时，您可能希望在注册 <code>BeanPostProcessor</code> 之前进行某些评估或判断。</p><p>举一个例子：您可能有一个特定的 <code>BeanPostProcessor</code>，但只希望在某些条件满足时（例如，配置文件设置为某个特定值时）才将其注册到 Spring 容器中。在这种情况下，您不能仅仅在 Spring 配置中声明它，因为这样做会导致它始终被注册。相反，您需要编程地根据您的条件判断来注册它。</p><p>这就是 <code>ConfigurableBeanFactory</code> 的 <code>addBeanPostProcessor</code> 方法发挥作用的地方。您可以使用它来动态、编程地将您的 <code>BeanPostProcessor</code> 添加到 Spring 容器中。</p><p>此外，有时候，您可能有多个 Spring 容器（上下文）的层次结构。例如，有一个父容器和多个子容器。在这种情况下，您可能希望将父容器中定义的 <code>BeanPostProcessor</code> 复制到其中一个或多个子容器中。再次，<code>addBeanPostProcessor</code> 方法在这里就非常有用。</p><p>以下是一个简单的示例，说明如何使用 <code>addBeanPostProcessor</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 实现 BeanPostProcessor 的方法</span>
<span class="token punctuation">}</span>

<span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token comment">//... 获取您的 Spring 上下文</span>
<span class="token class-name">ConfigurableBeanFactory</span> beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 基于某种条件逻辑判断是否要注册 BeanPostProcessor</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">someConditionIsMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MyCustomBeanPostProcessor</span> processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们首先获取 <code>ConfigurableBeanFactory</code>，然后基于某些条件逻辑来决定是否注册 <code>BeanPostProcessor</code>。</p><hr><p><strong>Example: Hello World, BeanPostProcessor-style（官方示例）</strong></p><p>首先，让我们从 <code>BeanPostProcessor</code> 实现开始：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">scripting</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanPostProcessor</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstantiationTracingBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span> <span class="token comment">// 在bean初始化之前不做任何操作，只是返回bean本身</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bean &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;&#39; created : &quot;</span> <span class="token operator">+</span> bean<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span> <span class="token comment">// 在bean初始化之后打印bean的信息，然后返回bean本身</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们使用 Java 配置来代替 XML：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">scripting<span class="token punctuation">.</span></span><span class="token class-name">InstantiationTracingBeanPostProcessor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token comment">// 将InstantiationTracingBeanPostProcessor注册为一个bean，这样Spring就会自动检测到它</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">InstantiationTracingBeanPostProcessor</span> <span class="token function">tracingBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InstantiationTracingBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们有一个 Java 应用程序来运行以上代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scripting<span class="token punctuation">.</span></span><span class="token class-name">Messenger</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Boot</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 此时，由于我们未在Java配置中定义Messenger bean，所以下面的代码只是为了示例</span>
        <span class="token comment">// Messenger messenger = ctx.getBean(&quot;messenger&quot;, Messenger.class);</span>
        <span class="token comment">// System.out.println(messenger);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>AutowiredAnnotationBeanPostProcessor</strong></p><p><code>AutowiredAnnotationBeanPostProcessor</code> 是 Spring 框架中的一个内建 <code>BeanPostProcessor</code> 实现，它允许自动注入功能。具体地说，它检查所有的 bean，看看它们是否有 <code>@Autowired</code> 注解，如果有，它会尝试自动注入相应的依赖。</p><p>当您在 Spring 配置中启用 <code>@Autowired</code> 功能（例如，通过使用 <code>@ComponentScan</code> 注解），这个 <code>BeanPostProcessor</code> 就会自动被注册到 Spring 容器中。这意味着您不需要手动配置或理解其内部工作机制，只需知道 <code>@Autowired</code> 注解如何在您的 bean 中工作即可。</p></div><h3 id="_8-2-使用-beanfactorypostprocessor-自定义配置元数据" tabindex="-1"><a class="header-anchor" href="#_8-2-使用-beanfactorypostprocessor-自定义配置元数据" aria-hidden="true">#</a> 8.2 使用 BeanFactoryPostProcessor 自定义配置元数据</h3><p><code>BeanFactoryPostProcessor</code> 是 Spring 提供的一个扩展点，使您可以在容器实例化任何其他 bean 之前，读取和修改 bean 的配置元数据。简单来说，您可以在 Spring 实际创建 bean 之前，对其配置进行某些更改。</p><p>与 <code>BeanPostProcessor</code> 相似，您可以配置多个 <code>BeanFactoryPostProcessor</code> 实例。如果您希望控制它们的执行顺序，可以让您的 <code>BeanFactoryPostProcessor</code> 实现 <code>Ordered</code> 接口并设置 <code>order</code> 属性。</p><p>假设我们有一个自定义的 <code>BeanFactoryPostProcessor</code>，它会更改某个 bean 的属性值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanFactoryPostProcessor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableListableBeanFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 示例：修改某个 bean 的某个属性值</span>
        <span class="token comment">// BeanDefinition bd = beanFactory.getBeanDefinition(&quot;someBeanName&quot;);</span>
        <span class="token comment">// bd.getPropertyValues().addPropertyValue(&quot;someProperty&quot;, &quot;newValue&quot;);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了将其注册到 Spring 容器中，我们可以在 Java 配置类中声明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomBeanFactoryPostProcessor</span> <span class="token function">customBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点如下：</p><ul><li><p>如果您想更改实际的 bean 实例，您应该使用 <code>BeanPostProcessor</code> 而不是 <code>BeanFactoryPostProcessor</code>。</p></li><li><p>尽管在 <code>BeanFactoryPostProcessor</code> 中可以获取并工作于 bean 实例，但这会导致提前 bean 实例化，违反了标准容器生命周期，可能带来负面影响。</p></li><li><p><code>BeanFactoryPostProcessor</code> 是按容器范围定义的。这意味着，如果您在一个容器中定义了 <code>BeanFactoryPostProcessor</code>，它只会应用于该容器中的 bean 定义。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>当您在应用上下文中声明一个 <code>BeanFactoryPostProcessor</code> 时，它会自动运行，以便对容器的配置元数据进行更改。与 <code>BeanPostProcessors</code> 一样，您通常不希望为 <code>BeanFactoryPostProcessors</code> 配置懒加载。如果没有其他 bean 引用它，那么该后处理器可能根本不会被实例化。因此，即使您尝试将其标记为懒加载，它仍然会被提前实例化。</p></div><p>Spring 也提供了一些预定义的 <code>BeanFactoryPostProcessors</code>，例如 <code>PropertyOverrideConfigurer</code> 和 <code>PropertySourcesPlaceholderConfigurer</code>，帮助您在 bean 创建之前做一些额外的处理。 <img src="https://cdn.nlark.com/yuque/0/2023/png/28699456/1692273785985-eec59d5a-6137-4652-a9e3-ed4ab1bbce92.png#averageHue=%23181a24&amp;clientId=u76ef3b47-9c00-4&amp;from=paste&amp;height=257&amp;id=ueb288421&amp;originHeight=257&amp;originWidth=975&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=59495&amp;status=done&amp;style=shadow&amp;taskId=u018cfdcf-4334-4caf-83a0-90979fd8c99&amp;title=&amp;width=975" alt="image.png" loading="lazy"></p></li></ul><hr><p><strong>Example：使用 PropertySourcesPlaceholderConfigurer 进行类名替换（官方示例）</strong></p><p>使用 <code>PropertySourcesPlaceholderConfigurer</code>，您可以将 bean 定义中的属性值外部化到单独的文件中，这些文件使用标准的 Java 属性格式。这样做的好处是可以让部署应用程序的人在不修改主要的容器配置文件的情况下，定制特定环境的属性，如数据库 URL 和密码。</p><p>假设我们有一个使用占位符值的 <code>DataSource</code> 配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span> <span class="token function">propertySourcesPlaceholderConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PropertySourcesPlaceholderConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置配置文件的位置</span>
        configurer<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;com/something/jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> configurer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">&quot;close&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BasicDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jdbc.driverClassName}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> driverClassName<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jdbc.url}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jdbc.username}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jdbc.password}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BasicDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外部属性文件 <code>jdbc.properties</code> 的内容如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">jdbc.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">org.hsqldb.jdbcDriver</span>
<span class="token key attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:hsqldb:hsql://production:9002</span>
<span class="token key attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token value attr-value">sa</span>
<span class="token key attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在运行时，<code>PropertySourcesPlaceholderConfigurer</code> 会读取 jdbc.properties 文件，并将 bean 定义中的 <code>\${...}</code> 格式的占位符替换为相应的值。</p><blockquote><p>注意：</p><ol><li><code>PropertySourcesPlaceholderConfigurer</code> 不仅仅在您指定的属性文件中查找属性。默认情况下，如果在指定的属性文件中找不到某个属性，它会检查 Spring 的环境属性和普通的 Java 系统属性。</li><li>您还可以使用 <code>PropertySourcesPlaceholderConfigurer</code> 替换类名，这在运行时需要选择特定的实现类时非常有用。</li></ol></blockquote><p>例如，您可以如下配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span> <span class="token function">strategyConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PropertySourcesPlaceholderConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置配置文件的位置</span>
        configurer<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;com/something/strategy.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加属性</span>
        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;custom.strategy.class&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;com.something.DefaultStrategy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configurer<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> configurer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">serviceStrategy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${custom.strategy.class}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> strategyClassName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 反射创建实例</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>strategyClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外部属性文件 strategy.properties 的内容可能如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">custom.strategy.class</span><span class="token punctuation">=</span><span class="token value attr-value">com.something.AnotherStrategy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果在运行时，该类名不存在或不可用（可能是因为它没有被正确地编译或部署），Spring 容器在尝试实例化这个 bean 时就会遇到问题，因为它找不到该类。进一步说，当 Spring ApplicationContext（应用上下文）启动时，它默认会尝试创建所有的 singleton bean（单例 bean），除非我们明确告诉它延迟这个过程（这就是所谓的懒加载或 lazy initialization）。这个默认的 bean 创建阶段称为 <code>preInstantiateSingletons()</code> 阶段。在这个阶段，如果有任何 bean 不能被正确实例化，Spring 会抛出一个异常，并且应用上下文的启动会失败。</p><hr><p><strong>Example：PropertyOverrideConfigurer（官方示例）</strong><code>PropertyOverrideConfigurer</code> 是一个 bean 工厂后处理器（bean factory post-processor）。与 <code>PropertySourcesPlaceholderConfigurer</code> 相似，但有一个关键的区别：原始的 bean 定义可以为 bean 的属性设置默认值，或者不设置任何值。如果覆盖属性的文件中没有某个 bean 属性的条目，那么会使用默认的上下文定义。</p><p>需要注意的是，bean 定义并不知道它被覆盖了，所以当使用 <code>PropertyOverrideConfigurer</code> 时，从 bean 的配置中并不容易看出。如果有多个 <code>PropertyOverrideConfigurer</code> 实例为同一个 bean 属性定义了不同的值，那么最后一个会胜出，这是因为覆盖机制。 假设我们有以下 JavaBeans：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tom</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Fred</span> fred<span class="token punctuation">;</span>
    <span class="token comment">// getter and setter</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fred</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Bob</span> bob<span class="token punctuation">;</span>
    <span class="token comment">// getter and setter</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bob</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> sammy<span class="token punctuation">;</span>
    <span class="token comment">// getter and setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设 override.properties 属性文件的配置行格式为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>tom<span class="token punctuation">.</span>fred<span class="token punctuation">.</span>bob<span class="token punctuation">.</span>sammy<span class="token operator">=</span><span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定的覆盖值始终是文字值。它们不会转化为 bean 引用。这种约定也适用于 XML bean 定义中指定的原始值是 bean 引用的情况。</p><p>上面这种复合属性名称的设置，实际上，它意味着我们有一个名为 <code>tom</code> 的 bean，在这个 bean 中有一个属性名为 <code>fred</code>，<code>fred</code> 属性是一个对象，这个对象又有一个名为 <code>bob</code> 的属性，<code>bob</code> 也是一个对象，它有一个名为 <code>sammy</code> 的属性。我们想要设置或覆盖这个 <code>sammy</code> 属性的值为 123。</p><p>配置示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Tom</span> <span class="token function">tom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Tom</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tom<span class="token punctuation">.</span><span class="token function">setFred</span><span class="token punctuation">(</span><span class="token function">fred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tom<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Fred</span> <span class="token function">fred</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Fred</span> fred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fred<span class="token punctuation">.</span><span class="token function">setBob</span><span class="token punctuation">(</span><span class="token function">bob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> fred<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Bob</span> <span class="token function">bob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Bob</span> bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bob<span class="token punctuation">.</span><span class="token function">setSammy</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 默认值为 100</span>
        <span class="token keyword">return</span> bob<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">PropertyOverrideConfigurer</span> <span class="token function">propertyOverrideConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PropertyOverrideConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyOverrideConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configurer<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;override.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> configurer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个 JavaConfig 示例中，我们创建了一个 <code>PropertyOverrideConfigurer</code> bean，并为其设置了一个 <code>ClassPathResource</code>，指向我们的 override.properties 文件。在容器中的 Bean 初始化前会使用 <code>123</code> 覆盖 <code>sammy</code> 的属性值。</p><p>总之，<code>PropertyOverrideConfigurer</code> 提供了一种灵活的方式来覆盖 bean 属性的默认值，而无需更改 bean 的原始定义。这在多环境部署中特别有用，因为您可以为每个环境提供一个不同的属性文件，而不必更改基本的 bean 配置。</p><h3 id="_8-3-使用-factorybean-自定义实例化逻辑" tabindex="-1"><a class="header-anchor" href="#_8-3-使用-factorybean-自定义实例化逻辑" aria-hidden="true">#</a> 8.3 使用 FactoryBean 自定义实例化逻辑</h3><p>Spring 提供了一个接口叫做 <code>FactoryBean</code>，允许您创建对象，这些对象本身就是工厂。这意味着，当您有一些复杂的初始化逻辑，并认为用 Java 描述比用 XML 更合适时，您可以考虑使用 <code>FactoryBean</code>。 <code>FactoryBean</code> 是一个插入到 Spring IoC 容器实例化逻辑中的接口。如果你的初始化代码很复杂，用 XML 来描述可能会很冗长，那么你可以创建自己的 <code>FactoryBean</code>，在该类中写入复杂的初始化代码，然后将你的自定义 <code>FactoryBean</code> 插入到容器中。</p><p><code>FactoryBean&lt;T&gt;</code> 接口提供了三个方法：</p><ul><li><code>T getObject()</code>: 返回此工厂创建的对象的一个实例。根据此工厂返回的是单例还是原型，该实例可能是共享的。</li><li><code>boolean isSingleton()</code>: 如果这个 <code>FactoryBean</code> 返回单例，则返回 true，否则返回 false。这个方法的默认实现返回 true。</li><li><code>Class&lt;?&gt; getObjectType()</code>: 返回 <code>getObject()</code> 方法返回的对象类型，或者如果事先不知道类型则返回 null。</li></ul><p>Spring 框架本身内部使用了 <code>FactoryBean</code> 接口的概念和实现。Spring 本身也附带了超过 80 种 <code>FactoryBean</code> 的实现。 <img src="https://cdn.nlark.com/yuque/0/2023/png/28699456/1692285347088-54b2ac68-204c-4f69-b83b-c3ba19e6ee71.png#averageHue=%23161821&amp;clientId=u51090e27-296b-4&amp;from=paste&amp;height=184&amp;id=ucd0056a2&amp;originHeight=184&amp;originWidth=735&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37514&amp;status=done&amp;style=shadow&amp;taskId=u240dfb9c-629e-481c-b110-feb1f97432a&amp;title=&amp;width=735" alt="image.png" loading="lazy"> 假设您有一个复杂的 <code>ComplexObject</code>，您想通过 <code>FactoryBean</code> 来创建：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComplexObject</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...其他方法和属性...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComplexObjectFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ComplexObject</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ComplexObject</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里是创建 ComplexObject 的复杂逻辑...</span>
        <span class="token class-name">ComplexObject</span> complexObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComplexObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...初始化操作...</span>
        <span class="token keyword">return</span> complexObject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ComplexObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Spring 容器中，您可以这样使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ComplexObjectFactoryBean</span> <span class="token function">complexObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComplexObjectFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，您可以从容器中获取 <code>ComplexObject</code> 的实例，或者直接获取 <code>ComplexObjectFactoryBean</code> 实例。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>当您需要从容器中获取实际的 <code>FactoryBean</code> 实例本身，而不是它产生的 bean 时，调用 <code>ApplicationContext</code> 的 <code>getBean()</code> 方法时，bean 的 id 前要加上和号 (<code>&amp;</code>)。因此，对于一个 id 为 <code>myBean</code> 的 <code>FactoryBean</code>，在容器上调用 <code>getBean(&quot;myBean&quot;)</code> 会返回 <code>FactoryBean</code> 的产物，而调用 <code>getBean(&quot;&amp;myBean&quot;)</code> 则返回 <code>FactoryBean</code> 实例本身。</p></div><h2 id="_9-基于注解的容器配置" tabindex="-1"><a class="header-anchor" href="#_9-基于注解的容器配置" aria-hidden="true">#</a> 9.基于注解的容器配置</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>注解和 XML 配置在 Spring 中哪个更好?</strong></p><p>随着基于注解的配置的引入，人们开始质疑这种方法是否比 XML “更好”。简单的回答是 “看情况”。每种方法都有其优缺点，通常由开发者决定哪种策略更适合他们。由于注解的定义方式，它们在声明时提供了大量的上下文，导致配置更短、更简洁。但是，XML 擅长于不触及组件源代码或重新编译它们的情况下连接组件。一些开发者更喜欢将配置靠近源代码，而另一些人认为注解类不再是 POJOs，配置变得分散且难以控制。 无论选择哪种方式，Spring 都可以同时适应两种风格，甚至可以混合它们。值得指出的是，通过 JavaConfig 选项，Spring 允许在不触及目标组件源代码的情况下以非侵入性的方式使用注解。</p></div><p>与基于 XML 的配置相比，基于注解的配置通过字节码元数据来连接组件，而不是通过尖括号声明。开发者可以使用注解在相关的类、方法或字段声明上将配置移到组件类本身，而不是使用 XML 来描述 bean 的连接。</p><p>例如，Spring 2.0 引入了使用 <code>@Required</code> 注解来强制执行所需属性的可能性。Spring 2.5 允许遵循相同的通用方法来驱动 Spring 的依赖注入。实际上，<code>@Autowired</code> 注解提供了与自动装配协作者中描述的相同功能，但控制更为精细，适用范围更广。Spring 2.5 还增加了对 JSR-250 注解的支持，如 <code>@PostConstruct</code> 和 <code>@PreDestroy</code>。Spring 3.0 增加了对 JSR-330 (Java 的依赖注入) 注解的支持，如 <code>@Inject</code> 和 <code>@Named</code>。</p><blockquote><p>注意：注解注入在 XML 注入之前执行，因此，通过两种方法连接的属性，XML 配置会覆盖注解。</p></blockquote><p>考虑一个简单的服务类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>	<span class="token comment">// 注册为业务 Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MyRepository</span> repository<span class="token punctuation">;</span>

    <span class="token comment">// 构造注入（根据类型查找）</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">MyRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>repository <span class="token operator">=</span> repository<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 初始化前回调</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化代码...</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 初始后回调</span>
    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 清理资源...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaConfig 中，您可以这样配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.example&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 会扫描指定包下的所有注解配置</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里可以添加其他@Bean定义，如果需要的话</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-1-使用-required" tabindex="-1"><a class="header-anchor" href="#_9-1-使用-required" aria-hidden="true">#</a> 9.1 使用 @Required</h3><p><code>@Required</code> 注解主要用于 bean 的属性 setter 方法。这意味着，当 Spring 容器创建这个 bean 时，标有 <code>@Required</code> 的属性必须被设置，否则容器会抛出异常。</p><p>这个注解的目的是确保在配置时对特定的属性进行设置，可以是通过明确的 bean 定义的属性值或通过自动装配。如果影响的 bean 属性没有被设置，容器会抛出异常。这样可以尽早明确地发现错误，避免后续出现空指针异常或类似问题。尽管如此，我们仍然建议您在 bean 类中加入断言（例如，在初始化方法中）。这样即使在容器外部使用类时，也可以确保所需的引用和值。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>为了启用 <code>@Required</code> 注解的支持，必须注册 <code>RequiredAnnotationBeanPostProcessor</code>。 值得注意的是，从 Spring 框架 5.1 开始，官方已经弃用了 <code>@Required</code> 注解和 <code>RequiredAnnotationBeanPostProcessor</code>，推荐使用构造函数注入或者结合 bean 的 setter 方法使用自定义的 <code>InitializingBean.afterPropertiesSet()</code> 或 <code>@PostConstruct</code> 方法。</p></div><p>考虑一个电影列表服务：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// 使用 @Autowired 替代 @Required</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 其他代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>@Autowired</code> 代替 <code>@Required</code>，表示该属性需要被自动注入。如果 Spring 容器中没有匹配的 bean，它会抛出异常。</p><p>为了强制 bean 属性在初始化后进行验证，可以使用 <code>@PostConstruct</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">validateProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>movieFinder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Property &#39;movieFinder&#39; is required&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 其他代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>validateProperties</code> 方法会在 bean 初始化后立即执行，确保 <code>movieFinder</code> 属性已被设置。</p><h3 id="_9-2-使用-autowired" tabindex="-1"><a class="header-anchor" href="#_9-2-使用-autowired" aria-hidden="true">#</a> 9.2 使用 @Autowired</h3><p><code>@Autowired</code> 是一个 Spring 特有的注解，它告诉框架通过匹配数据类型自动注入 beans。</p><h4 id="_9-2-1-构造函数注入" tabindex="-1"><a class="header-anchor" href="#_9-2-1-构造函数注入" aria-hidden="true">#</a> 9.2.1 构造函数注入</h4><p>您可以在构造函数上使用 <code>@Autowired</code> 注解。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CustomerPreferenceDao</span> customerPreferenceDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieRecommender</span><span class="token punctuation">(</span><span class="token class-name">CustomerPreferenceDao</span> customerPreferenceDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>customerPreferenceDao <span class="token operator">=</span> customerPreferenceDao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>TIP：从 Spring 4.3 开始，如果您的类只有一个构造函数，您甚至不需要 <code>@Autowired</code> 注解。Spring 默认会使用它。但是，如果有多个构造函数，您应使用 <code>@Autowired</code> 来指定 Spring 应该使用哪一个。</p></blockquote><h4 id="_9-2-2-setter-和字段注入" tabindex="-1"><a class="header-anchor" href="#_9-2-2-setter-和字段注入" aria-hidden="true">#</a> 9.2.2 Setter 和字段注入</h4><p>您可以在方法（通常是 setter）或直接在字段上使用 <code>@Autowired</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着 Spring 将尝试查找 <code>MovieFinder</code> 类型的 bean 并将其注入到 <code>SimpleMovieLister</code> 中。</p><h4 id="_9-2-3-集合和映射注入" tabindex="-1"><a class="header-anchor" href="#_9-2-3-集合和映射注入" aria-hidden="true">#</a> 9.2.3 集合和映射注入</h4><p>如果您想注入某种类型的所有 beans，可以使用数组或集合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MovieCatalog</span><span class="token punctuation">&gt;</span></span> movieCatalogs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您想要一个 bean 名称到 bean 的映射，请使用 <code>Map&lt;String, YourType&gt;</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MovieCatalog</span><span class="token punctuation">&gt;</span></span> movieCatalogs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-4-处理可选的依赖项" tabindex="-1"><a class="header-anchor" href="#_9-2-4-处理可选的依赖项" aria-hidden="true">#</a> 9.2.4 处理可选的依赖项</h4><p>默认情况下，如果 Spring 找不到匹配的 bean，它会抛出错误。但有时，依赖关系可能是可选的。您可以通过多种方式处理它。 将 <code>required</code> 属性设置为 <code>false</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Java 8 的 <code>Optional</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MovieFinder</span><span class="token punctuation">&gt;</span></span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>@Nullable</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-5-特殊的-beans" tabindex="-1"><a class="header-anchor" href="#_9-2-5-特殊的-beans" aria-hidden="true">#</a> 9.2.5 特殊的 Beans</h4><p>Spring 有一些内置的类型，如 <code>ApplicationContext</code>、<code>Environment</code> 等，您可以直接使用 <code>@Autowired</code> 进行注入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-6-幕后工作原理" tabindex="-1"><a class="header-anchor" href="#_9-2-6-幕后工作原理" aria-hidden="true">#</a> 9.2.6 幕后工作原理</h4><p>在内部，<code>@Autowired</code> 及类似的注解是因为 Spring 的 <code>BeanPostProcessor</code> 实现而起作用的。这意味着您不应在自定义的 <code>BeanPostProcessor</code> 或 <code>BeanFactoryPostProcessor</code> 类中使用 <code>@Autowired</code>。而是使用 JavaConfig 或 XML 明确设置它们。</p><blockquote><p>请记住，虽然 <code>@Autowired</code> 非常方便，但始终确保您的设计保持清晰和可维护。过度使用自动装配有时会使您的应用程序变得难以理解和调试。</p></blockquote><h3 id="_9-3-使用-primary-精细调整基于注解的自动装配" tabindex="-1"><a class="header-anchor" href="#_9-3-使用-primary-精细调整基于注解的自动装配" aria-hidden="true">#</a> 9.3 使用 @Primary 精细调整基于注解的自动装配</h3><p>当你使用按类型的自动装配 (<code>@Autowired</code>) 时，可能会遇到多个符合条件的 bean。在这种情况下，我们需要有一种方式来指定哪一个 bean 是首选的，这可以通过使用 Spring 的 <code>@Primary</code> 注解来实现。即当有多个相同类型的 bean，并且只有一个需要被首选进行自动注入时，我们就可以使用 <code>@Primary</code>。</p><p>考虑以下配置，它定义了一个名为 <code>firstMovieCatalog</code> 的 bean 作为首选的 <code>MovieCatalog</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieCatalog</span> <span class="token function">firstMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieCatalog</span> <span class="token function">secondMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述配置，当 <code>MovieRecommender</code> 里的 <code>MovieCatalog</code> 类型属性需要一个 bean 进行自动注入时，<code>firstMovieCatalog</code> 会被选为首选，因为它被标记为 <code>@Primary</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MovieCatalog</span> movieCatalog<span class="token punctuation">;</span>

    <span class="token comment">// 其他的代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着，在这种情况下，<code>movieCatalog</code> 属性会自动注入 <code>firstMovieCatalog</code> bean，而不是 <code>secondMovieCatalog</code> bean。</p><h3 id="_9-4-使用-qualifier-注解微调基于注解的自动注入" tabindex="-1"><a class="header-anchor" href="#_9-4-使用-qualifier-注解微调基于注解的自动注入" aria-hidden="true">#</a> 9.4 使用 @Qualifier 注解微调基于注解的自动注入</h3><p>在 Spring 中，有时我们有多个相同类型的 Bean，但我们希望在进行自动注入时能够指定特定的 Bean。例如，当我们有两个或多个 <code>MovieCatalog</code> 类型的 Bean 时，我们可能需要明确指定希望注入哪个。Spring 提供了两个注解来帮助我们做到这一点：<code>@Primary</code> 和 <code>@Qualifier</code>。</p><p>上一节我们已经讲过，<code>@Primary</code> 注解允许我们指定一个主要的 Bean，当有多个相同类型的 Bean 存在时，Spring 会优先选择标记为 <code>@Primary</code> 的 Bean 进行注入。但有时我们需要更精细的控制，这时可以使用 <code>@Qualifier</code> 注解。通过为 <code>@Qualifier</code> 注解提供一个值，我们可以指定希望注入哪个具体的 Bean。 首先，我们定义两个 <code>MovieCatalog</code> Bean 并使用 <code>@Qualifier</code> 分别给它们指定一个名称：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieCatalog</span> <span class="token function">mainMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;action&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieCatalog</span> <span class="token function">actionMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述配置中，我们定义了两个 <code>MovieCatalog</code> 的 Bean，一个有 &quot;main&quot; 的限定符，另一个有 &quot;action&quot; 的限定符。</p><p>接下来，我们可以在 <code>MovieRecommender</code> 类中使用 <code>@Autowired</code> 和 <code>@Qualifier</code> 注解来指定希望注入哪个 <code>MovieCatalog</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieCatalog</span> movieCatalog<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MovieCatalog</span> movieCatalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieCatalog <span class="token operator">=</span> movieCatalog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们明确指定希望将 &quot;main&quot; 的 <code>MovieCatalog</code> Bean 注入到 <code>MovieRecommender</code> 的 <code>prepare</code> 方法中。</p><p>如果需要同时注入多个不同的 Bean，只需为每个参数使用 <code>@Qualifier</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieCatalog</span> mainMovieCatalog<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">MovieCatalog</span> actionMovieCatalog<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MovieCatalog</span> mainMovieCatalog<span class="token punctuation">,</span> 
                        <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;action&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MovieCatalog</span> actionMovieCatalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mainMovieCatalog <span class="token operator">=</span> mainMovieCatalog<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>actionMovieCatalog <span class="token operator">=</span> actionMovieCatalog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>相关补充：</strong></p><ol><li><strong>Bean 名称作为默认的 Qualifier 限定符</strong></li></ol><p>如果你没有指定 <code>@Qualifier</code>, Spring 会考虑 bean 的名称作为默认的限定符。这意味着，如果你有一个名为 &quot;main&quot; 的 bean，那么它会自动与标有 <code>@Qualifier(&quot;main&quot;)</code> 的注入点匹配。但请注意，尽管你可以这样做，<code>@Autowired</code> 的核心目的是基于类型的注入，<code>@Qualifier</code> 只是为了在有多个同类型的 Bean 时进行进一步的筛选。</p><ol start="2"><li><strong>Qualifiers 和集合的使用</strong></li></ol><p>当你有一个需要注入 <code>Set&lt;MovieCatalog&gt;</code> 的字段或参数时，<code>@Qualifier</code> 可以用来筛选合适的 Beans。例如，如果你有多个 <code>MovieCatalog</code> Beans 都有 &quot;action&quot; 作为限定符，它们都会被注入到用 <code>@Qualifier(&quot;action&quot;)</code> 标注的 <code>Set&lt;MovieCatalog&gt;</code> 中。</p><ol start="3"><li><strong>注入的命名约定</strong></li></ol><p>如果没有明确的 <code>@Qualifier</code> 或 <code>@Primary</code> 指示，Spring 会尝试根据注入点的名称（字段名或参数名）来匹配 Bean 名称。但如果你打算通过名称进行注入，推荐使用 JSR-250 的 <code>@Resource</code> 注解，它明确地按名称匹配，而不是类型。</p><ol start="4"><li><strong>自引用注入</strong></li></ol><p>从 Spring 4.3 版本开始，<code>@Autowired</code> 允许进行自引用注入，即一个 Bean 可以注入其自身的引用。但这是一种回退机制，仅在没有其他合适的 Bean 可用时才会发生。在实际开发中，你应该尽量避免这种做法。例如，尝试在同一个配置类中注入由 <code>@Bean</code> 方法返回的结果其实是自引用。要解决这种情况，可以将 <code>@Bean</code> 方法定义为 <code>static</code>，这样它就与包含它的配置类实例及其生命周期解耦。</p><ol start="5"><li><strong>@Autowired vs @Resource</strong></li></ol><p><code>@Autowired</code> 可以应用于字段、构造函数和多参数方法，允许在参数级别通过限定符进行筛选。相反，<code>@Resource</code> 仅支持字段和带有单个参数的 <code>setter</code> 方法。因此，如果你的注入目标是构造函数或多参数方法，建议使用 <code>@Autowired</code> 和 <code>@Qualifier</code>。</p></div><hr><p><strong>创建自定义限定符注解：</strong> 在 Spring 中，我们可以通过在自定义注解中加上 <code>@Qualifier</code> 注解来创建自定义限定符。 例如，定义一个叫 <code>Genre</code> 的限定符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Qualifier</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Genre</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在想注入的字段或方法参数上使用这个限定符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@Genre</span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">MovieCatalog</span> actionCatalog<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieCatalog</span> comedyCatalog<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setComedyCatalog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Genre</span><span class="token punctuation">(</span><span class="token string">&quot;Comedy&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MovieCatalog</span> comedyCatalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>comedyCatalog <span class="token operator">=</span> comedyCatalog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaConfig 中使用也可以使用自定义限定符注解来定义 Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Genre</span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieCatalog</span> <span class="token function">actionMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Genre</span><span class="token punctuation">(</span><span class="token string">&quot;Comedy&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieCatalog</span> <span class="token function">comedyMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，您还可以定义接受多个属性的自定义限定符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Qualifier</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MovieQualifier</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">genre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Format</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Format</span> <span class="token punctuation">{</span>
    <span class="token constant">VHS</span><span class="token punctuation">,</span> <span class="token constant">DVD</span><span class="token punctuation">,</span> <span class="token constant">BLURAY</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这个限定符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token annotation punctuation">@MovieQualifier</span><span class="token punctuation">(</span>format<span class="token operator">=</span><span class="token class-name">Format</span><span class="token punctuation">.</span><span class="token constant">VHS</span><span class="token punctuation">,</span> genre<span class="token operator">=</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">MovieCatalog</span> actionVhsCatalog<span class="token punctuation">;</span>

    <span class="token comment">// ... 其他字段</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaConfig 中定义 Bean 时同样可以使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@MovieQualifier</span><span class="token punctuation">(</span>format<span class="token operator">=</span><span class="token class-name">Format</span><span class="token punctuation">.</span><span class="token constant">VHS</span><span class="token punctuation">,</span> genre<span class="token operator">=</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MovieCatalog</span> <span class="token function">actionVhsCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMovieCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ... 其他 Bean 定义</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结：自定义限定符为您提供了更多的灵活性来选择正确的 bean 进行注入。通过 JavaConfig，您可以完全摆脱 XML 并用类型安全的方式定义和注入 bean。</p></blockquote><h3 id="_9-5-使用泛型作为自动装配限定符" tabindex="-1"><a class="header-anchor" href="#_9-5-使用泛型作为自动装配限定符" aria-hidden="true">#</a> 9.5 使用泛型作为自动装配限定符</h3><p>在 Spring 中，除了使用 <code>@Qualifier</code> 注解来指定特定的 Bean 进行注入外，您还可以使用 Java 的泛型作为一种隐式的限定方式。这种方式允许我们根据泛型的类型自动注入对应的 Bean。</p><p>假设您有如下的配置类，其中定义了两个 Bean：<code>StringStore</code> 和 <code>IntegerStore</code>。它们分别实现了泛型接口 <code>Store&lt;String&gt;</code> 和 <code>Store&lt;Integer&gt;</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">StringStore</span> <span class="token function">stringStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">IntegerStore</span> <span class="token function">integerStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IntegerStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>StringStore</code> 和 <code>IntegerStore</code> 分别实现了泛型接口 <code>Store&lt;String&gt;</code> 和 <code>Store&lt;Integer&gt;</code>。它们的定义可能如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringStore</span> <span class="token keyword">implements</span> <span class="token class-name">Store</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerStore</span> <span class="token keyword">implements</span> <span class="token class-name">Store</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Store</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，当您需要自动注入 <code>Store</code> 接口的实现时，可以使用泛型作为限定符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">Store</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> s1<span class="token punctuation">;</span>  <span class="token comment">// 使用 &lt;String&gt; 作为限定符，自动注入 stringStore bean</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">Store</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s2<span class="token punctuation">;</span> <span class="token comment">// 使用 &lt;Integer&gt; 作为限定符，自动注入 integerStore bean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，s1 会自动注入 <code>StringStore</code> 的实例，而 s2 会自动注入 <code>IntegerStore</code> 的实例。 您还可以使用泛型来自动注入列表，这是非常有用的，特别是当您有多个相同类型但泛型不同的 Bean 时：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注入所有类型为 Store&lt;Integer&gt; 的 bean</span>
<span class="token comment">// 类型为 Store&lt;String&gt; 的 bean 不会被注入到这个列表中</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Store</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stores<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结：泛型在 Spring 的自动装配中可以作为一种隐式的限定符，它为我们提供了一种更简洁和类型安全的方式来选择特定的 Bean 进行注入。</p></blockquote><h3 id="_9-6-使用-customautowireconfigurer" tabindex="-1"><a class="header-anchor" href="#_9-6-使用-customautowireconfigurer" aria-hidden="true">#</a> 9.6 使用 CustomAutowireConfigurer</h3><p>在 Spring 中，<code>CustomAutowireConfigurer</code> 是一个 <code>BeanFactoryPostProcessor</code> 实现。它允许您注册自己的自定义限定符注解类型，即使这些注解并没有使用 Spring 的 <code>@Qualifier</code> 进行标注。</p><p>这个功能的核心意义在于：Spring 提供了默认的 <code>@Qualifier</code> 注解来做限定符，但在某些情况下，您可能希望定义自己的注解来做为限定符。<code>CustomAutowireConfigurer</code> 提供了这样的能力。</p><p>首先，假设您有一个自定义的限定符注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">CustomQualifier</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，为了让 Spring 识别这个自定义的注解作为限定符，您需要配置 <code>CustomAutowireConfigurer</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomAutowireConfigurer</span> <span class="token function">customAutowireConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CustomAutowireConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomAutowireConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> customQualifierTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        customQualifierTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">CustomQualifier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configurer<span class="token punctuation">.</span><span class="token function">setCustomQualifierTypes</span><span class="token punctuation">(</span>customQualifierTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> configurer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的配置中，我们创建了 <code>CustomAutowireConfigurer</code> 的 Bean，并为其设置了自定义的限定符注解类型。 再介绍一下 <code>AutowireCandidateResolver</code> ，它也是一个核心组件，负责确定哪些 Bean 是自动装配的候选者。</p><p>考虑以下因素：</p><ol><li>每个 Bean 定义的 <code>autowire-candidate</code> 属性值。</li><li>在上下文配置中设定的任何默认的 <code>autowire-candidates</code>。</li><li><code>@Qualifier</code> 注解的存在以及通过 <code>CustomAutowireConfigurer</code> 注册的任何自定义注解。</li></ol><p>当有多个 Bean 作为自动装配的候选者时，如何确定一个 “主要” 的 Bean 呢？答案是：如果候选者中只有一个 Bean 定义的 <code>primary</code> 属性设置为 true，那么它将被选中。</p><p>例如，您可以在您的配置中这样做：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">primaryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PrimaryServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">secondaryService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecondaryServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述情况中，如果您尝试自动装配 <code>MyService</code> 类型的 Bean，那么 <code>primaryService</code> 会被选中，因为它被标记为 <code>@Primary</code>。</p><h3 id="_9-7-使用-resource-进行注入" tabindex="-1"><a class="header-anchor" href="#_9-7-使用-resource-进行注入" aria-hidden="true">#</a> 9.7 使用 @Resource 进行注入</h3><p>Spring 支持通过 JSR-250 的 <code>@Resource</code> 注解 (位于 <code>javax.annotation.Resource</code> 包内) 在字段或 Bean 属性的 setter 方法上进行注入。这是 Java EE 中的一个常见模式，例如在 JSF-managed beans 和 JAX-WS 端点中。Spring 也支持这种模式，用于管理 Spring 对象。</p><p><code>@Resource</code> 接受一个 <code>name</code> 属性。默认情况下，Spring 将该值解释为要注入的 bean 的名称，换句话说，它按名称进行注入。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;myMovieFinder&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，通过 <code>@Resource(name=&quot;myMovieFinder&quot;)</code> 将名为 &quot;myMovieFinder&quot; 的 bean 注入到 <code>setMovieFinder</code> 方法中。</p><p>如果没有明确指定名称，那么默认的名称将从字段名或 setter 方法派生。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，因为我们没有指定 bean 的名称，所以 Spring 将尝试找一个名为 <code>movieFinder</code> 的 bean 来注入。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>@Resource 注解的高级用法和注意事项</strong></p><ol><li><strong>Bean 名称与 ApplicationContext</strong></li></ol><p>当我们使用 <code>@Resource</code> 注解并为其提供了一个 <code>name</code> 属性，例如 <code>@Resource(name=&quot;myBean&quot;)</code>，那么 Spring 会从其管理的 beans 中寻找一个名为 <code>myBean</code> 的 bean，并将其注入到相应的字段或方法中。 JNDI（Java Naming and Directory Interface）是 Java 提供的一种命名和目录服务的 API，使得应用程序可以与目录服务（如 LDAP）互动，以获取关于对象和查找对象等信息。在某些高级的 Spring 配置中，bean 的名称可以从 JNDI 中解析而来。但在大多数常规应用中，你可能并不需要使用 JNDI 功能。这里的建议是，除非有特殊需求，否则我们建议你依赖 Spring 的默认行为（即直接从 <code>ApplicationContext</code> 中查找 bean）并避免使用 JNDI。</p><ol start="2"><li><strong>类型匹配 vs 名称匹配</strong></li></ol><p>如果你使用 <code>@Resource</code> 注解，但没有明确指定 <code>name</code> 属性，Spring 将采用以下策略：</p><ul><li>首先，尝试按照字段名或 setter 方法的属性名作为 bean 的名称进行查找。例如，对于 <code>@Resource</code> 注解的 <code>private CustomerPreferenceDao customerPreferenceDao;</code>，Spring 将尝试查找名为 <code>customerPreferenceDao</code> 的 bean。</li><li>如果没有找到匹配的 bean 名称，Spring 将尝试按类型查找 bean。例如，它会查找实现了 <code>CustomerPreferenceDao</code> 接口的 bean。</li></ul><ol start="3"><li><strong>特殊的可解析依赖</strong></li></ol><p>除了常规的 bean，<code>@Resource</code> 还能自动注入以下类型的特殊对象：</p><ul><li><p><code>BeanFactory</code>: Spring 的核心工厂接口，提供访问应用对象的能力。</p></li><li><p><code>ApplicationContext</code>: 继承自 <code>BeanFactory</code>，提供应用级服务。</p></li><li><p><code>ResourceLoader</code>: 提供对外部资源（如文件或 URL）的访问能力。</p></li><li><p><code>ApplicationEventPublisher</code>: 允许 beans 发布事件给其它 beans。</p></li><li><p><code>MessageSource</code>: 提供国际化消息的解析、格式化和检索。</p></li></ul></div><p>例如，下面的 <code>MovieRecommender</code> 类中，<code>customerPreferenceDao</code> 字段由于 <code>@Resource</code> 注解没有指定 name 属性，Spring 首先会基于字段名查找名为 &quot;customerPreferenceDao&quot; 的 bean，如果没有找到，则会回退到 <code>CustomerPreferenceDao</code> 类型进行匹配：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">CustomerPreferenceDao</span> customerPreferenceDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MovieRecommender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// ... 其他方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>MovieRecommender</code> 类中，<code>context</code> 字段被注入了一个 <code>ApplicationContext</code> 实例。这是因为 <code>ApplicationContext</code> 是上述列表中的一个已知的可解析依赖类型。</p><h3 id="_9-8-使用-value" tabindex="-1"><a class="header-anchor" href="#_9-8-使用-value" aria-hidden="true">#</a> 9.8 使用 @Value</h3><p><code>@Value</code> 注解主要用于注入属性值。这些值通常来源于外部化的配置文件，例如 properties 或 yml 文件。Spring 提供了内置的转换器来处理简单的数据类型转换，如 <code>String</code> 转 <code>Integer</code>。</p><h4 id="_9-8-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_9-8-1-基本使用" aria-hidden="true">#</a> 9.8.1 基本使用</h4><p>考虑以下类，其中我们注入了一个属性 <code>catalog.name</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> catalog<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MovieRecommender</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${catalog.name}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> catalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>catalog <span class="token operator">=</span> catalog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使这个配置生效，我们需要在配置类中使用 <code>@PropertySource</code> 注解指定属性文件的位置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:application.properties&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 application.properties 文件中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>catalog<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token class-name">MovieCatalog</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9-8-2-严格控制属性值" tabindex="-1"><a class="header-anchor" href="#_9-8-2-严格控制属性值" aria-hidden="true">#</a> 9.8.2 严格控制属性值</h4><p>默认情况下，如果 <code>@Value</code> 中指定的属性找不到，Spring 会注入属性名作为值。例如，如果 <code>catalog.name</code> 不存在，<code>this.catalog</code> 就会被设置为 &quot;\${catalog.name}&quot;。但如果你想严格控制此行为并确保属性值必须存在，你可以添加一个 <code>PropertySourcesPlaceholderConfigurer</code> bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span> <span class="token function">propertyPlaceholderConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：使用 JavaConfig 配置 <code>PropertySourcesPlaceholderConfigurer</code> 时，<code>@Bean</code> 方法必须是 <code>static</code> 的。</p></blockquote><h4 id="_9-8-3-提供默认值" tabindex="-1"><a class="header-anchor" href="#_9-8-3-提供默认值" aria-hidden="true">#</a> 9.8.3 提供默认值</h4><p>如果你想为某个属性提供一个默认值，你可以这样做：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> catalog<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MovieRecommender</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${catalog.name:defaultCatalog}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> catalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>catalog <span class="token operator">=</span> catalog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-8-4-自定义转换" tabindex="-1"><a class="header-anchor" href="#_9-8-4-自定义转换" aria-hidden="true">#</a> 9.8.4 自定义转换</h4><p>Spring 提供了内置的转换器来处理简单的数据类型转换，如 String 转 Integer。如果超出该范围，你也可以为自己的自定义类型（如 <code>MyCustomConverter</code>）提供转换支持，只需要配置一个 <code>ConversionService</code> Bean 并在其默认实现 <code>DefaultFormattingConversionService</code> 中进行添加即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ConversionService</span> <span class="token function">conversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultFormattingConversionService</span> conversionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFormattingConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conversionService<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> conversionService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-8-5-使用-spel-表达式" tabindex="-1"><a class="header-anchor" href="#_9-8-5-使用-spel-表达式" aria-hidden="true">#</a> 9.8.5 使用 SpEL 表达式</h4><p>SpEL (Spring Expression Language) 允许我们在 <code>@Value</code> 中进行动态计算：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> catalog<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MovieRecommender</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{systemProperties[&#39;user.catalog&#39;] + &#39;Catalog&#39; }&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> catalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>catalog <span class="token operator">=</span> catalog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以使用更复杂的数据结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> countOfMoviesPerCatalog<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MovieRecommender</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{{&#39;Thriller&#39;: 100, &#39;Comedy&#39;: 300}}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> countOfMoviesPerCatalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>countOfMoviesPerCatalog <span class="token operator">=</span> countOfMoviesPerCatalog<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,215),_={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#expressions",target:"_blank",rel:"noopener noreferrer"},F=t(`<h3 id="_9-9-使用-postconstruct-和-predestroy" tabindex="-1"><a class="header-anchor" href="#_9-9-使用-postconstruct-和-predestroy" aria-hidden="true">#</a> 9.9 使用 @PostConstruct 和 @PreDestroy</h3><p>Spring 提供了两个重要的注解 <code>@PostConstruct</code> 和 <code>@PreDestroy</code>，允许你定义在 Spring 容器中创建 bean 后和销毁 bean 前需要执行的方法。</p><ul><li><code>@PostConstruct</code>：这个注解标记的方法会在 bean 的所有属性都被初始化并由 Spring 容器管理之后立即调用，可以用于执行一些初始化工作，比如数据加载或其他只需要执行一次的操作。</li><li><code>@PreDestroy</code>：当 bean 即将从 Spring 容器中移除或应用上下文即将关闭时，这个注解标记的方法会被调用。它通常用于执行资源清理操作。</li></ul><p>考虑一个 <code>CachingMovieLister</code> 类，它在启动时需要填充电影缓存，并在应用结束时清除此缓存：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingMovieLister</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">populateMovieCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在bean初始化后填充电影缓存...</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearMovieCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在bean销毁前清除电影缓存...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>populateMovieCache</code> 方法会在 <code>CachingMovieLister</code> bean 完全初始化并由 Spring 容器管理后立即执行。<code>clearMovieCache</code> 方法会在 Spring 容器关闭或 <code>CachingMovieLister</code> bean 被销毁之前执行。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>Java 版本注意事项</strong> 从 JDK 6 到 JDK 8，<code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解都是标准 Java 库的一部分。但从 JDK 9 开始，整个 <code>javax.annotation</code> 包被从核心 Java 模块中分离，并在 JDK 11 中最终被移除。如果你正在使用 JDK 11 或更高版本，你需要从 Maven Central 获取 <code>javax.annotation-api</code> 依赖，并像其他库一样添加到应用的类路径中才可以使用这两个注解。 对于 Maven 项目，你可以在 pom.xml 文件中添加以下依赖：</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>annotation<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>annotation<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.3</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-类路径扫描与托管组件" tabindex="-1"><a class="header-anchor" href="#_10-类路径扫描与托管组件" aria-hidden="true">#</a> 10.类路径扫描与托管组件</h2><p>在 Spring 框架中，我们可以利用特定的注解对类进行标记，使得 Spring 在启动时扫描特定的包（package）中的类，从而自动识别并生成对应的 Bean，这样，我们就不必显式地在配置文件中进行 Bean 的注册。</p><ol><li><strong>扫描机制</strong>: 使用特定注解如 <code>@Component</code>（及其衍生注解，如 <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code> 等）可以标记一个类作为 Spring 管理的 Bean。当 Spring 启动并扫描特定包时，它会自动找到这些带有注解的类，并生成对应的 Bean 定义，进而在 Spring 容器中管理它们。</li><li><strong>JavaConfig</strong>: 从 Spring 3.0 开始，许多由 Spring JavaConfig 项目提供的特性已被集成到 Spring 核心框架中。这意味着你可以用 Java 代码代替传统的 XML 来定义 Bean。以下是一些常用的注解说明： <ol><li><code>@Configuration</code>: 标记一个类为 Spring 的配置类，表示这个类中可能包含有 Bean 定义。</li><li><code>@Bean</code>: 用在方法上，表示该方法返回的对象应该被注册为一个 Spring 管理的 Bean。</li><li><code>@Import</code>: 允许从其他的配置类中导入 Bean 定义。</li><li><code>@DependsOn</code>: 表示当前的 Bean 依赖于另一个或多个 Bean。</li></ol></li></ol><p>考虑以下的简单服务：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task performed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让 Spring 知道在哪里找到带有 <code>@Service</code> 注解的类，我们需要定义一个配置类并启用类路径扫描：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.example.myapp&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 替代 XML 中的类路径扫描指令</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以在这里定义更多的 @Bean 方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用 <code>@Configuration</code> 标记了 <code>AppConfig</code> 类作为一个配置类，并用 <code>@ComponentScan</code> 来指定 Spring 扫描的包路径。</p><p>通过上述方式，Spring 在启动时会扫描指定的 <code>com.example.myapp</code> 包下的所有类，寻找如 <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code> 等注解，并为它们自动生成 Bean 定义。</p><h3 id="_10-1-component-及其衍生注解" tabindex="-1"><a class="header-anchor" href="#_10-1-component-及其衍生注解" aria-hidden="true">#</a> 10.1 @Component 及其衍生注解</h3><p>在 Spring 中，我们有一系列的注解来标记和分类我们的组件，这些注解被称为 &quot;stereotype&quot; 注解。</p><table><thead><tr><th><strong>注解</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>@Component</td><td>这是一个通用的注解，用于标记任何 Spring 管理的组件。</td></tr><tr><td>@Repository</td><td>专门用于标记数据访问对象（DAO）或仓库类，它具有自动异常转换的功能。</td></tr><tr><td>@Service</td><td>专门用于标记服务层的类。</td></tr><tr><td>@Controller</td><td>专门用于标记表示层的类，如 MVC 控制器。</td></tr></tbody></table><p>虽然你可以使用 <code>@Component</code> 来标记任何组件，但使用 <code>@Repository</code>、<code>@Service</code> 或 <code>@Controller</code> 可以为你的类提供更具体的语义。这些特定的注解使得工具处理或与切面关联更为合适。例如，它们是切入点的理想目标。此外，这些注解在未来的 Spring 版本中可能还会带有额外的语义。</p><p>因此，如果你在服务层选择使用 <code>@Component</code> 或 <code>@Service</code>，那么 <code>@Service</code> 显然是更好的选择。同样地，如前所述，<code>@Repository</code> 已经支持作为自动异常转换的标记。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 通用组件</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeComponent</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 数据访问对象</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 服务层</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 控制器</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们使用了 <code>@Component</code>, <code>@Repository</code>, <code>@Service</code>, 和 <code>@Controller</code> 注解来标记不同的组件。这样，当 Spring 扫描我们的代码时，它可以识别并正确地管理这些组件。</p><h3 id="_10-2-使用元注解和组合注解" tabindex="-1"><a class="header-anchor" href="#_10-2-使用元注解和组合注解" aria-hidden="true">#</a> 10.2 使用元注解和组合注解</h3><p>在 Spring 中，许多注解都可以作为元注解（meta-annotations）在你的代码中使用。元注解是可以应用于另一个注解的注解。例如，我们之前提到的 <code>@Service</code> 注解实际上是用 <code>@Component</code> 作为元注解的，这意味着 <code>@Service</code> 在功能上与 <code>@Component</code> 是相似的。</p><p>你还可以组合多个元注解来创建 “组合注解”（composed annotations）。例如，Spring MVC 中的 <code>@RestController</code> 注解是由 <code>@Controller</code> 和 <code>@ResponseBody</code> 组合而成的。</p><p>此外，组合注解可以选择性地重新声明元注解的属性以允许自定义。这在你只想公开元注解的部分属性时特别有用。例如，Spring 的 <code>@SessionScope</code> 注解将作用域名称硬编码为 session，但仍允许自定义 <code>proxyMode</code>。</p><blockquote><p>TIP： 在 Spring 中，<code>@SessionScope</code> 是一个注解，用于定义 bean 的生命周期。当一个 bean 被标记为 session 作用域时，它意味着对于一个 HTTP 会话，该 bean 只会被创建一次。换句话说，同一个 HTTP 会话中的所有请求都会共享同一个 bean 实例，但不同的 HTTP 会话会有各自的 bean 实例。</p></blockquote><p><code>@Service</code> 注解的定义，展示其是如何使用 <code>@Component</code> 作为元注解的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Component</span> 
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@SessionScope</code> 注解的定义，展示其如何允许自定义 <code>proxyMode</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span><span class="token constant">SCOPE_SESSION</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SessionScope</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Alias for <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Scope</span><span class="token punctuation">#</span><span class="token field">proxyMode</span></span><span class="token punctuation">}</span>.
     * Defaults to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ScopedProxyMode</span><span class="token punctuation">#</span><span class="token field">TARGET_CLASS</span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">Scope</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">ScopedProxyMode</span> <span class="token function">proxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>@SessionScope</code> 注解的服务类，不声明 <code>proxyMode</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@SessionScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionScopedService</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>SessionScopedService</code> 是 session 作用域的，这意味着每个用户会话都有其自己的 <code>SessionScopedService</code> 实例。</p><p><code>@SessionScope</code> 注解允许你自定义 <code>proxyMode</code>。这主要涉及到 Spring 如何在不同的上下文中管理 session 作用域的 bean。大多数情况下，默认的 <code>ScopedProxyMode.TARGET_CLASS</code> 就足够了，但在某些情况下，你可能需要使用接口代理，这时可以设置为 <code>ScopedProxyMode.INTERFACES</code>。</p><p>使用 <code>@SessionScope</code> 注解的服务类，并重写 <code>proxyMode</code> 的值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@SessionScope</span><span class="token punctuation">(</span>proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">INTERFACES</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionScopedUserService</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：</p><ol><li>使用 <code>@SessionScope</code> 时，确保你的应用是 web 应用，并且已经配置了 Spring 的 web 上下文。</li><li>session 作用域的 bean 通常与 HTTP 会话有关，因此在非 web 环境中使用可能会导致问题。</li></ol></blockquote><h3 id="_10-3-自动检测类并注册-bean-定义" tabindex="-1"><a class="header-anchor" href="#_10-3-自动检测类并注册-bean-定义" aria-hidden="true">#</a> 10.3 自动检测类并注册 Bean 定义</h3><p>Spring 可以自动检测带有特定注解（如 <code>@Service</code>, <code>@Repository</code> 等）的类，并在 <code>ApplicationContext</code> 中为它们注册相应的 Bean 定义。</p><p>例如，以下两个类适合这种自动检测：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SimpleMovieLister</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaMovieFinder</span> <span class="token keyword">implements</span> <span class="token class-name">MovieFinder</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现省略以简化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要自动检测这些类并注册相应的 beans，你需要在你的 <code>@Configuration</code> 类中添加 <code>@ComponentScan</code>，其中 <code>basePackages</code> 属性是这两个类的共同父包。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;org.example&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span>  <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简洁，上面的示例也可以使用 <code>@ComponentScan</code> 注解的 <code>value</code> 属性（即 <code>@ComponentScan(&quot;org.example&quot;)</code>）。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>注意事项：</strong></p><ol><li><strong>类路径扫描</strong>：</li></ol><p>当 Spring 扫描你的项目以查找带有特定注解的类时（例如 <code>@Service</code> 或 <code>@Repository</code>），它会查看你的项目的类路径。如果你使用 Ant 工具来构建你的项目并生成 JAR 文件，确保你没有设置 JAR 任务以仅包含文件，而不是目录结构。否则，Spring 可能无法正确扫描你的类。在某些特定的环境或 Java 版本中，可能存在安全策略，这些策略可能会隐藏类路径目录，这也会影响 Spring 的扫描功能。</p><ol start="2"><li><strong>JDK 9 的模块路径</strong>：</li></ol><p>JDK 9 引入了一个新的特性，叫做模块系统（也称为 Jigsaw）。这意味着你可以将你的应用程序分解为多个模块，并明确指定哪些模块可以访问哪些资源。当使用 Spring 扫描类时，你需要确保你的模块描述符（module-info.java 文件）允许 Spring 访问你的类。如果你希望 Spring 能够访问和调用你类中的非公共成员（例如私有字段或方法），你需要在你的模块描述符中使用 <code>opens</code> 声明，而不是 <code>exports</code> 声明。</p><ol start="3"><li><strong>自动注入</strong>：</li></ol><p>当你使用 <code>@ComponentScan</code>，Spring 会自动启用一些功能，使得你可以使用 <code>@Autowired</code> 注解来自动注入依赖。这是由 <code>AutowiredAnnotationBeanPostProcessor</code> 和 <code>CommonAnnotationBeanPostProcessor</code> 这两个组件实现的，它们确保 Spring 可以自动检测和连接你的组件。如果你不希望启用这种自动注入功能，可以通过设置特定的属性来禁用这两个处理器。例如，可以通过包含 <code>annotation-config</code> 属性并为其设置值 <code>false</code> 来禁用 <code>AutowiredAnnotationBeanPostProcessor</code> 和 <code>CommonAnnotationBeanPostProcessor</code> 的注册。</p></div><h3 id="_10-4-使用过滤器自定义扫描" tabindex="-1"><a class="header-anchor" href="#_10-4-使用过滤器自定义扫描" aria-hidden="true">#</a> 10.4 使用过滤器自定义扫描</h3><p>默认情况下，只有带有 <code>@Component</code>, <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>, <code>@Configuration</code> 或带有 <code>@Component</code> 的自定义注解的类会被 Spring 自动检测并注册为 Bean。但是，你可以通过应用自定义过滤器来修改和扩展此行为。你可以在 <code>@ComponentScan</code> 注解中使用 <code>includeFilters</code> 或 <code>excludeFilters</code> 属性来添加这些过滤器。</p><p>以下是可用的过滤选项：</p><table><thead><tr><th><strong>过滤器选项</strong></th><th><strong>示例</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>annotation (默认)</td><td>org.example.SomeAnnotation</td><td>目标组件应该有的注解。</td></tr><tr><td>assignable</td><td>org.example.SomeClass</td><td>目标组件可以分配给的类或接口（即它们应该扩展或实现的类或接口）。</td></tr><tr><td>aspectj</td><td>org.example..*Service+</td><td>目标组件应匹配的 AspectJ 类型表达式。</td></tr><tr><td>regex</td><td>org\\.example\\.Default.*</td><td>目标组件的类名应匹配的正则表达式。</td></tr><tr><td>custom</td><td>org.example.MyTypeFilter</td><td>自定义实现的过滤器，它应该实现 org.springframework.core.type.TypeFilter 接口。</td></tr></tbody></table><p>以下示例配置将忽略所有带有 <code>@Repository</code> 注解的类，并仅包括名称中包含 &quot;Stub&quot; 且以 &quot;Repository&quot; 结尾的类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;org.example&quot;</span><span class="token punctuation">,</span>
        includeFilters <span class="token operator">=</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">REGEX</span><span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token string">&quot;.*Stub.*Repository&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        excludeFilters <span class="token operator">=</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span><span class="token class-name">Repository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此配置意味着 Spring 在扫描 &quot;org.example&quot; 包时，会忽略所有带有 <code>@Repository</code> 注解的类，并只包括那些类名中包含 &quot;Stub&quot; 且以 &quot;Repository&quot; 结尾的类。</p><p>你还可以通过在 <code>@ComponentScan</code> 注解上设置 <code>useDefaultFilters=false</code> 来禁用默认的过滤器。这实际上会禁用自动检测带有或带有 <code>@Component</code>, <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>, <code>@RestController</code>, 或 <code>@Configuration</code> 的类。</p><h3 id="_10-5-在组件中定义-bean-元数据" tabindex="-1"><a class="header-anchor" href="#_10-5-在组件中定义-bean-元数据" aria-hidden="true">#</a> 10.5 在组件中定义 Bean 元数据</h3><p>在 Spring 中，你可以在组件类中定义 Bean，就像在 <code>@Configuration</code> 类中一样。这是通过使用 <code>@Bean</code> 注解来完成的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMethodComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TestBean</span> <span class="token function">publicInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token string">&quot;publicInstance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述类 <code>FactoryMethodComponent</code> 是一个 Spring 组件，其中 <code>doWork()</code> 方法包含应用程序特定的代码。但是，它还定义了一个 Bean，该 Bean 的工厂方法是 <code>publicInstance()</code>。</p><p>你还可以在 <code>@Bean</code> 方法中使用 <code>@Autowired</code> 和 <code>@Value</code> 注解来自动注入依赖和属性值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMethodComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">protected</span> <span class="token class-name">TestBean</span> <span class="token function">protectedInstance</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span> <span class="token class-name">TestBean</span> spouse<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{privateInstance.age}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> country<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestBean</span> tb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token string">&quot;protectedInstance&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tb<span class="token punctuation">.</span><span class="token function">setSpouse</span><span class="token punctuation">(</span>spouse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tb<span class="token punctuation">.</span><span class="token function">setCountry</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>protectedInstance()</code> 方法自动注入了一个名为 &quot;public&quot; 的 <code>TestBean</code> Bean，并从另一个名为 &quot;privateInstance&quot; 的 Bean 中获取其 &quot;age&quot; 属性的值。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>注意事项：</strong></p><ol><li><strong>@Bean 方法的处理</strong>：</li></ol><p>在普通的 <code>@Component</code> 类中的 <code>@Bean</code> 方法与在 <code>@Configuration</code> 类中的处理方式不同。在 <code>@Configuration</code> 类中，Spring 使用 CGLIB 代理来拦截方法和字段的调用，以提供特定的生命周期管理和代理。但在普通的 <code>@Component</code> 类中，方法调用具有标准的 Java 语义。</p><ol start="2"><li><strong>静态 @Bean 方法</strong>：</li></ol><p>你可以声明 <code>@Bean</code> 方法为静态，这样它们可以在不创建其包含的配置类实例的情况下被调用。这在定义某些特定的 Bean（如 <code>BeanFactoryPostProcessor</code>）时非常有用。</p><ol start="3"><li><strong>@Bean 方法的可见性</strong>：</li></ol><p><code>@Bean</code> 方法的 Java 语言可见性（如 <code>public</code>, <code>protected</code>, <code>private</code>）对于 Spring 容器中的结果 Bean 定义没有直接影响。但是，在 <code>@Configuration</code> 类中的常规 <code>@Bean</code> 方法需要是可覆盖的，也就是说，它们不能被声明为 <code>private</code> 或 <code>final</code>。</p><ol start="4"><li><strong>多个 @Bean 方法</strong>：</li></ol><p>一个类可以为同一个 Bean 持有多个 <code>@Bean</code> 方法，这取决于运行时可用的依赖项。Spring 容器会选择具有最大数量可满足依赖项的变体。</p></div><h3 id="_10-6-自动检测组件的命名" tabindex="-1"><a class="header-anchor" href="#_10-6-自动检测组件的命名" aria-hidden="true">#</a> 10.6 自动检测组件的命名</h3><p>当 Spring 扫描你的项目并自动检测到一个组件时，这个组件的 Bean 名称是由 <code>BeanNameGenerator</code> 策略生成的。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>默认命名规则：</strong></p><ol><li>如果你在 Spring 的特定注解（如 <code>@Component</code>, <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>）中提供了名称，那么这个名称将被用作对应的 Bean 定义的名称。</li><li>如果没有提供名称，或者是其他类型的组件（例如通过自定义过滤器发现的），默认的 Bean 名称生成器会返回未大写的非限定类名。</li></ol></div><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;myMovieLister&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieFinderImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MovieFinder</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>SimpleMovieLister</code> 类的 Bean 名称是 &quot;myMovieLister&quot;，而 <code>MovieFinderImpl</code> 类的 Bean 名称是 &quot;movieFinderImpl&quot;。</p><hr><p>如果你不想依赖默认的 Bean 命名策略，可以提供自定义的命名策略。首先，你需要实现 <code>BeanNameGenerator</code> 接口，并确保包含一个默认的无参数构造函数。然后，在配置 <code>@ComponentScan</code> 扫描时，通过 <code>nameGenerator</code> 属性提供完全限定的类名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;org.example&quot;</span><span class="token punctuation">,</span> nameGenerator <span class="token operator">=</span> <span class="token class-name">MyNameGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用了自定义的 <code>MyNameGenerator</code> 类来生成 Bean 的名称。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>注意事项：</strong> 如果由于多个自动检测的组件具有相同的非限定类名（即，名称相同但位于不同的包中的类）而导致命名冲突，你可能需要配置一个默认使用完全限定类名作为生成的 Bean 名称的 <code>BeanNameGenerator</code>。从 Spring Framework 5.2.3 开始，你可以使用 <code>org.springframework.context.annotation.FullyQualifiedAnnotationBeanNameGenerator</code> 来实现这一目的。</p><p>作为一般规则，当其他组件可能明确引用某个组件时，考虑在注解中指定名称。另一方面，当容器负责连接时，自动生成的名称是足够的。</p></div><h3 id="_10-7-为自动检测的组件提供作用域" tabindex="-1"><a class="header-anchor" href="#_10-7-为自动检测的组件提供作用域" aria-hidden="true">#</a> 10.7 为自动检测的组件提供作用域</h3><p>在 Spring 中，组件默认的作用域是单例（singleton）。但有时，你可能需要不同的作用域。这可以通过 <code>@Scope</code> 注解来指定。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieFinderImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MovieFinder</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>MovieFinderImpl</code> 组件的作用域被设置为原型（prototype），这意味着每次请求该 Bean 时都会创建一个新的实例。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>注意事项：</strong></p><ol><li><code>@Scope</code> 注解只在具体的 Bean 类或工厂方法上进行检查。</li><li>与 XML Bean 定义不同，这里没有 Bean 定义继承的概念，类层次结构在元数据方面是不相关的。</li><li>Spring 还提供了一些 Web 特定的作用域，如 &quot;request&quot; 或 &quot;session&quot;。你也可以使用 Spring 的元注解方法来组合自己的作用域注解。</li></ol></div><hr><p>如果你不想依赖基于注解的方法来解析作用域，可以实现 <code>ScopeMetadataResolver</code> 接口。<code>ScopeMetadataResolver</code> 接口定义了如何为特定的 Bean 定义解析作用域元数据。简单来说，它决定了一个 Bean 应该有哪个作用域（如 <code>singleton</code>, <code>prototype</code>, <code>request</code>, <code>session</code> 等）。</p><p>当你使用 <code>@ComponentScan</code> 进行组件扫描时，Spring 默认使用一个内置的 <code>ScopeMetadataResolver</code> 实现，它基于 <code>@Scope</code> 注解来确定 Bean 的作用域。但在某些情况下，你可能想要自定义如何为 Bean 分配作用域。这时，可以实现自己的 <code>ScopeMetadataResolver</code> 并在 <code>@ComponentScan</code> 中指定它。</p><p>假设你想要所有的 <code>Repository</code> Beans 默认都是 <code>prototype</code> 作用域，而不是 <code>singleton</code>，你可以这样做：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomScopeMetadataResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ScopeMetadataResolver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ScopeMetadata</span> <span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScopeMetadata</span> metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScopeMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Repository&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            metadata<span class="token punctuation">.</span><span class="token function">setScopeName</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span><span class="token constant">SCOPE_PROTOTYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            metadata<span class="token punctuation">.</span><span class="token function">setScopeName</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span><span class="token constant">SCOPE_SINGLETON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> metadata<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;org.example&quot;</span><span class="token punctuation">,</span> scopeResolver <span class="token operator">=</span> <span class="token class-name">CustomScopeMetadataResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>当你有一个非单例作用域的 Bean（如 <code>request</code> 或 <code>session</code> 作用域）并且你想在一个单例 Bean 中注入它时，你会遇到问题。因为单例 Bean 在启动时只被创建一次，而你可能希望每次请求都能得到一个新的 request-scoped Bean 实例。</p><p>为了解决这个问题，Spring 提供了代理机制。通过为非单例作用域的 Bean 创建一个代理，每次访问该 Bean 时，代理都会确保返回正确作用域的实例。</p><p><code>@ComponentScan</code> 注解的 <code>scopedProxy</code> 属性允许你指定如何创建这些代理：</p><ul><li><code>ScopedProxyMode.NO</code>：不创建代理。</li><li><code>ScopedProxyMode.INTERFACES</code>：使用 JDK 动态代理，这要求你的 Bean 至少实现一个接口。</li><li><code>ScopedProxyMode.TARGET_CLASS</code>：使用 CGLIB 创建代理。这不需要接口，但会为目标类创建一个子类。</li></ul><p>假设你有一个 request-scoped Bean，并且你想在一个单例 Bean 中注入它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span><span class="token constant">SCOPE_REQUEST</span><span class="token punctuation">,</span> proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserPreferences</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserPreferences</span> userPreferences<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>UserPreferences</code> 是 request-scoped 的，并使用 CGLIB 代理。这意味着即使 <code>UserService</code> 是一个单例，每次请求时它都会看到一个新的 <code>UserPreferences</code> 实例。</p><h3 id="_10-8-为组件提供限定符元数据" tabindex="-1"><a class="header-anchor" href="#_10-8-为组件提供限定符元数据" aria-hidden="true">#</a> 10.8 为组件提供限定符元数据</h3><p>在 Spring 中，当你有多个相同类型的 bean 并且想要注入其中的一个特定 bean 时，你可能会遇到一个问题：Spring 如何知道注入哪一个？这时，<code>@Qualifier</code> 注解就派上用场了。</p><p><code>@Qualifier</code> 注解可以帮助你指定注入哪一个特定的 bean。除了使用 <code>@Qualifier</code>，你还可以创建自定义的限定符注解，以便更细粒度地控制自动装配。</p><p>以下是一些示例，展示如何在组件类上使用这些注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActionMovieCatalog</span> <span class="token keyword">implements</span> <span class="token class-name">MovieCatalog</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用了 <code>@Qualifier</code> 注解并为其提供了一个值 &quot;Action&quot;。这意味着当我们在其他地方需要一个类型为 <code>MovieCatalog</code> 并且限定符为 &quot;Action&quot; 的 bean 时，Spring 会选择这个 bean 进行注入。</p><p>你还可以使用自定义的限定符注解，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Genre</span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActionMovieCatalog</span> <span class="token keyword">implements</span> <span class="token class-name">MovieCatalog</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用了一个名为 <code>@Genre</code> 的自定义注解，并为其提供了一个值 &quot;Action&quot;。 还有另一个示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Offline</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingMovieCatalog</span> <span class="token keyword">implements</span> <span class="token class-name">MovieCatalog</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们使用了一个名为 <code>@Offline</code> 的自定义注解，没有为其提供任何值。</p><blockquote><p>需要注意的是，当你使用注解来提供元数据时，这些元数据是绑定到类定义本身的。这意味着，对于同一类型的 bean，你不能为其提供不同的限定符元数据，因为这些元数据是基于类而不是基于实例的。如果你使用 XML 配置，你可以为同一类型的多个 bean 提供不同的限定符元数据，但在使用 Java 注解和 JavaConfig 的情况下，这是不可能的。</p></blockquote><h3 id="_10-9-生成候选组件的索引" tabindex="-1"><a class="header-anchor" href="#_10-9-生成候选组件的索引" aria-hidden="true">#</a> 10.9 生成候选组件的索引</h3><p>当你在一个大型的 Spring 项目中工作时，Spring 需要知道哪些类是组件，例如 <code>@Component</code>, <code>@Service</code>, <code>@Repository</code> 等。通常，Spring 会在启动时扫描你的类路径，查找这些注解并注册相应的 beans。这种扫描过程在大型项目中可能会消耗一些时间。</p><p>为了优化这个过程，Spring 提供了一个工具：<code>spring-context-indexer</code>。这个工具的工作原理是在编译时生成一个索引文件，该文件列出了所有的组件。这样，Spring 在启动时就可以直接读取这个索引文件，而不需要扫描整个类路径，从而加速启动过程。当你使用这种模式时，所有目标为组件扫描的模块都必须使用此机制。</p><p>即使你使用这种索引，你现有的 <code>@ComponentScan</code> 指令仍然需要保持不变，以便告诉 Spring 在哪些包中扫描组件。当 Spring 的 <code>ApplicationContext</code> 检测到这样的索引时，它会自动使用它，而不是扫描类路径。</p><p>为了生成这个索引，你需要为每个包含目标组件的模块添加一个额外的依赖。以下是如何使用 Maven 添加这个依赖的示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context-indexer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.29<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>spring-context-indexer</code> 依赖会生成一个名为 <code>META-INF/spring.components</code> 的索引文件，并将其包含在 jar 文件中。它包含了所有 Spring 组件的列表，这样 Spring 就不需要在启动时扫描整个类路径。</p><p>当你在开发过程中添加或删除组件时，为了确保索引文件是最新的，你需要在你的 IDE 中启用 <code>spring-context-indexer</code> 作为一个注解处理器。这样，每次你编译代码时，索引文件都会自动更新。</p><p>注解处理器是 Java 编译器的一部分，它们可以在编译时处理注解，并根据这些注解生成额外的源代码或其他文件。<code>spring-context-indexer</code> 就是这样的一个注解处理器，它会在编译时扫描你的代码，查找 Spring 组件注解（如 <code>@Component</code>, <code>@Service</code> 等），并生成相应的索引文件。</p><p>不同的 IDE 可能有不同的配置方法，但大多数现代 IDE（如 IntelliJ IDEA 或 Eclipse）都支持注解处理器，并允许你为项目启用或禁用它们。</p><p>以 IntelliJ IDEA 为例，以下是如何启用注解处理器的步骤：</p><ol><li>打开你的 Spring 项目。</li><li>转到 File &gt; Project Structure。</li><li>在左侧导航栏中，选择 Modules。</li><li>在顶部，选择你的模块，然后点击 Dependencies 选项卡。</li><li>确保你已经添加了 spring-context-indexer 作为依赖。</li><li>返回左侧导航栏，选择 Annotation Processors。</li><li>勾选 Enable annotation processing 选项。</li><li>确保 Processor path 设置为使用项目的类路径。</li><li>点击 OK 保存设置。</li></ol><p>现在，每次你编译项目时，<code>spring-context-indexer</code> 都会运行，并更新 <code>META-INF/spring.components</code> 文件。 当类路径上找到 <code>META-INF/spring.components</code> 文件时，索引会自动启用。如果索引只为某些库（或用例）部分可用，但不能为整个应用程序构建，你可以通过设置 <code>spring.index.ignore</code> 为 <code>true</code> 来回退到常规的类路径安排（就像根本没有索引一样）。这可以作为 JVM 系统属性或通过 SpringProperties 机制来设置。</p><h2 id="_11-使用-jsr-330-标准注解" tabindex="-1"><a class="header-anchor" href="#_11-使用-jsr-330-标准注解" aria-hidden="true">#</a> 11.使用 JSR 330 标准注解</h2><p>从 Spring 3.0 开始，Spring 开始支持 JSR-330 标准注解，这是一个关于依赖注入的标准。这些注解的扫描方式与 Spring 的注解相同。为了使用它们，你需要在你的类路径中包含相关的 jar 文件。</p><p>JSR-330 提供了一些基本的注解，如 <code>@Inject</code>，它可以作为 Spring 的 <code>@Autowired</code> 注解的替代品。 要在 Maven 项目中使用 JSR-330 注解，你需要添加 <code>javax.inject</code> 依赖。以下是如何在 Maven 项目中添加这个依赖的示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.inject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.inject<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-1-使用-inject-和-named-进行依赖注入" tabindex="-1"><a class="header-anchor" href="#_11-1-使用-inject-和-named-进行依赖注入" aria-hidden="true">#</a> 11.1 使用 @Inject 和 @Named 进行依赖注入</h3><p>在 Spring 中，我们通常使用 <code>@Autowired</code> 进行依赖注入。但除此之外，还可以使用 <code>@javax.inject.Inject</code> 进行注入。以下是一个简单的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Inject</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Inject</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder<span class="token punctuation">.</span><span class="token function">findMovies</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>@Autowired</code> 类似，你可以在字段、方法和构造函数参数级别使用 <code>@Inject</code>。此外，你还可以将注入点声明为 <code>Provider</code>，这允许按需访问较短作用域的 bean 或通过 <code>Provider.get()</code> 调用延迟访问其他 bean。</p><p><code>javax.inject.Provider&lt;T&gt;</code> 是 JSR-330 标准中定义的一个接口，它允许用户在需要时按需获取对象实例，而不是在对象创建时立即注入。这种按需获取的方式在某些场景中非常有用，例如：</p><ol><li><strong>延迟初始化</strong>：如果你的 bean 需要进行复杂或耗时的初始化，但你又不希望在应用启动时立即进行这种初始化，那么 <code>Provider</code> 可以帮助你实现这种延迟初始化。</li><li><strong>原型作用域的 bean</strong>：当你想每次从 <code>Provider</code> 获取 bean 时都获得一个新的实例，这在原型作用域的 bean 中非常有用。</li><li><strong>动态查找</strong>：在某些情况下，你可能希望在运行时动态地决定要注入哪个具体的 bean 实例。使用 <code>Provider</code> 可以帮助你实现这种动态查找。</li></ol><p>以下是一个示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Inject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Provider</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Provider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MovieFinder</span><span class="token punctuation">&gt;</span></span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Inject</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">Provider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MovieFinder</span><span class="token punctuation">&gt;</span></span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findMovies</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你希望为应该注入的依赖使用限定名，你应该使用 <code>@Named</code> 注解。以下是一个示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Inject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Named</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Inject</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>@Autowired</code> 类似，<code>@Inject</code> 也可以与 <code>java.util.Optional</code> 或 <code>@Nullable</code> 一起使用。这在这里更为适用，因为 <code>@Inject</code> 没有 <code>required</code> 属性。以下是如何使用 <code>@Inject</code> 和 <code>@Nullable</code> 的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Inject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Inject</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用 <code>Optional</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Inject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Inject</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MovieFinder</span><span class="token punctuation">&gt;</span></span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2-使用-named-和-managedbean-component-注解的标准等价物" tabindex="-1"><a class="header-anchor" href="#_11-2-使用-named-和-managedbean-component-注解的标准等价物" aria-hidden="true">#</a> 11.2 使用 @Named 和 @ManagedBean：@Component 注解的标准等价物</h3><p>在 Spring 中，我们通常使用 <code>@Component</code> 注解来标记一个类作为组件，这样它就可以被 Spring 容器管理。但除此之外，还有两个等价的注解：<code>@javax.inject.Named</code> 和 <code>javax.annotation.ManagedBean</code>。 以下是一个使用 <code>@Named</code> 的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Inject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Named</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">&quot;movieListener&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Inject</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 <code>@ManagedBean(&quot;movieListener&quot;)</code> 替代 <code>@Named(&quot;movieListener&quot;)</code>，效果是相同的。 通常，我们使用 <code>@Component</code> 注解一个类时不指定名称，<code>@Named</code> 也可以这样使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Inject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>inject<span class="token punctuation">.</span></span><span class="token class-name">Named</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Named</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Inject</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你使用 <code>@Named</code> 或 <code>@ManagedBean</code> 时，组件扫描的方式与使用 Spring 的注解完全相同。以下是一个配置类的示例，它启用了组件扫描：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;org.example&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span>  <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意的是，与 <code>@Component</code> 不同，JSR-330 的 <code>@Named</code> 和 JSR-250 的 <code>@ManagedBean</code> 注解不是可组合的。如果你想构建自定义的组件注解，应该使用 Spring 的原型模型。</p></blockquote><h3 id="_11-3-jsr-330-标准注解的局限性" tabindex="-1"><a class="header-anchor" href="#_11-3-jsr-330-标准注解的局限性" aria-hidden="true">#</a> 11.3 JSR-330 标准注解的局限性</h3><p>当你使用标准注解时，应该知道有一些重要的功能是不可用的。以下是 Spring 组件模型元素与 JSR-330 变体之间的对比：</p><table><thead><tr><th><strong>Spring</strong></th><th><strong>javax.inject.</strong>*</th><th><strong>说明 / 限制</strong></th></tr></thead><tbody><tr><td>@Autowired</td><td>@Inject</td><td>@Inject 没有 &#39;required&#39; 属性。但可以与 Java 8 的 Optional 一起使用。</td></tr><tr><td>@Component</td><td>@Named / @ManagedBean</td><td>JSR-330 不提供一个可组合的模型，只提供了一种标识命名组件的方式。</td></tr><tr><td>@Scope(&quot;singleton&quot;)</td><td>@Singleton</td><td>JSR-330 的默认作用域类似于 Spring 的原型。但为了与 Spring 的默认设置保持一致，在 Spring 容器中声明的 JSR-330 bean 默认是单例的。要使用除单例之外的作用域，你应该使用 Spring 的 @Scope 注解。尽管 javax.inject 也提供了一个 @Scope 注解，但这只是用于创建自己的注解。</td></tr><tr><td>@Qualifier</td><td>@Qualifier / @Named</td><td>javax.inject.Qualifier 只是用于构建自定义限定符的元注解。具体的 String 限定符（如带有值的 Spring 的 @Qualifier）可以通过 javax.inject.Named 关联。</td></tr><tr><td>@Value</td><td>-</td><td>没有等价物。</td></tr><tr><td>@Required</td><td>-</td><td>没有等价物。</td></tr><tr><td>@Lazy</td><td>-</td><td>没有等价物。</td></tr><tr><td>ObjectFactory</td><td>Provider</td><td>javax.inject.Provider 是 Spring 的 ObjectFactor<strong>y</strong> 的直接替代品，只是 get() 方法名更短。它也可以与 Spring 的 @Autowired 或非注解的构造函数和 setter 方法结合使用。</td></tr></tbody></table><h2 id="_12-基于-java-的容器配置" tabindex="-1"><a class="header-anchor" href="#_12-基于-java-的容器配置" aria-hidden="true">#</a> 12.基于 Java 的容器配置</h2><h3 id="_12-1-基本概念-bean-和-configuration" tabindex="-1"><a class="header-anchor" href="#_12-1-基本概念-bean-和-configuration" aria-hidden="true">#</a> 12.1 基本概念：@Bean 和 @Configuration</h3><p>在 Spring 的 Java 配置支持中，最核心的部分是使用 <code>@Configuration</code> 注解的类和 <code>@Bean</code> 注解的方法。</p><ul><li><code>@Bean</code>：<code>@Bean</code> 注解用于标识一个方法，该方法负责创建、配置和初始化一个新对象，这个对象将由 Spring IoC 容器管理。对于熟悉 Spring XML 配置的人来说，<code>@Bean</code> 注解与 XML 中的 <code>&lt;bean/&gt;</code> 元素起到相同的作用。你可以在任何使用了 Spring <code>@Component</code> 注解的类中使用 <code>@Bean</code> 注解的方法，但它们最常与 <code>@Configuration</code> 一起使用。</li><li><code>@Configuration</code>：使用 <code>@Configuration</code> 注解一个类表示该类的主要目的是作为 bean 定义的来源。此外，<code>@Configuration</code> 类允许你通过在同一类中调用其他 <code>@Bean</code> 方法来定义 bean 之间的依赖关系。</li></ul><p>以下是一个简单的 <code>@Configuration</code> 类的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MyServiceImpl</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>AppConfig</code> 类与之前的 Spring XML 配置功能相同，但我们已经将其转换为 JavaConfig 形式。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>完整的 @Configuration 与 “轻量级” @Bean 模式是什么？</strong> 当 <code>@Bean</code> 方法在没有使用 <code>@Configuration</code> 注解的类中声明时，我们称它们处于 “轻量级” 模式。在 <code>@Component</code> 或普通类中声明的 <code>@Bean</code> 方法被视为 “轻量级”，因为它们的主要目的与包含它们的类不同，而 <code>@Bean</code> 方法只是一个额外的功能。</p><p>与完整的 <code>@Configuration</code> 不同，轻量级的 <code>@Bean</code> 方法不能声明 bean 之间的依赖关系。它们只操作其包含组件的内部状态。因此，这样的 <code>@Bean</code> 方法不应调用其他 <code>@Bean</code> 方法。</p><p>在常见的场景中，<code>@Bean</code> 方法应在 <code>@Configuration</code> 类中声明，确保始终使用 “完整” 模式，从而确保跨方法引用被重定向到容器的生命周期管理。这可以防止同一个 <code>@Bean</code> 方法被意外地通过常规的 Java 调用，从而帮助减少在 “轻量级 ”模式下难以追踪的微妙错误。</p><p>接下来的部分将深入讨论 <code>@Bean</code> 和 <code>@Configuration</code> 注解。但首先，我们将介绍使用基于 Java 的配置创建 Spring 容器的各种方法。</p></div><h3 id="_12-2-使用-annotationconfigapplicationcontext-实例化-spring-容器" tabindex="-1"><a class="header-anchor" href="#_12-2-使用-annotationconfigapplicationcontext-实例化-spring-容器" aria-hidden="true">#</a> 12.2 使用 AnnotationConfigApplicationContext 实例化 Spring 容器</h3><p>在 Spring 框架中，我们可以使用不同的方式来实例化 Spring 容器。传统的方式是使用 XML 文件作为配置，然后通过 <code>ClassPathXmlApplicationContext</code> 来加载这些配置。但随着 Java 注解的普及，Spring 也提供了基于注解的配置方式，即使用 <code>AnnotationConfigApplicationContext</code>。</p><p>Spring 的 <code>AnnotationConfigApplicationContext</code> 是一个强大的 <code>ApplicationContext</code> 实现，它可以接受 <code>@Configuration</code> 类、普通的 <code>@Component</code> 类和带有 JSR-330 注解的类作为输入。</p><p>当你向 <code>AnnotationConfigApplicationContext</code> 提供一个带有 <code>@Configuration</code> 注解的类，以下两件事会发生：</p><ol><li>这个 <code>@Configuration</code> 类本身会被注册到 Spring 容器中，这意味着你可以像其他的 bean 一样注入和使用它。</li><li>这个 <code>@Configuration</code> 类中所有带有 <code>@Bean</code> 注解的方法都会被注册为单独的 bean 定义。这些方法定义了如何创建、配置和初始化这些 bean。</li></ol><p>而当你提供带有 <code>@Component</code> 或 JSR-330 注解（如 <code>@Named</code>）的类时，这些类会被注册为 bean 定义。这意味着 Spring 容器会管理这些类的实例。此外，这些类中的字段和方法可以使用依赖注入注解，如 <code>@Autowired</code> 或 <code>@Inject</code>，来自动注入所需的依赖。</p><h4 id="_12-2-1-使用-configuration-类实例化" tabindex="-1"><a class="header-anchor" href="#_12-2-1-使用-configuration-类实例化" aria-hidden="true">#</a> 12.2.1 使用 @Configuration 类实例化</h4><p>与使用 XML 文件不同，我们可以直接使用带有 <code>@Configuration</code> 注解的 Java 类来实例化 <code>AnnotationConfigApplicationContext</code>。这种方式的好处是我们可以完全摆脱 XML，使配置更加简洁。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MyService</span> myService <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myService<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-2-2-不仅限于-configuration" tabindex="-1"><a class="header-anchor" href="#_12-2-2-不仅限于-configuration" aria-hidden="true">#</a> 12.2.2 不仅限于 @Configuration</h4><p>虽然 <code>@Configuration</code> 是一个常用的注解，但 <code>AnnotationConfigApplicationContext</code> 的构造函数也接受其他注解，如 <code>@Component</code> 或 JSR-330 标准的注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">MyServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Dependency1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Dependency2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MyService</span> myService <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myService<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-2-3-程序化构建容器" tabindex="-1"><a class="header-anchor" href="#_12-2-3-程序化构建容器" aria-hidden="true">#</a> 12.2.3 程序化构建容器</h4><p>如果你希望更加灵活地构建容器，可以使用无参数的构造函数来创建 <code>AnnotationConfigApplicationContext</code>，然后通过 <code>register()</code> 方法来注册配置类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个 AnnotationConfigApplicationContext 对象，用于加载 Spring 配置类和 Bean</span>
    <span class="token class-name">AnnotationConfigApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 注册 Spring 的 Bean</span>
    ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">OtherConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AdditionalConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 刷新 Spring 上下文，使注册的 Bean 生效</span>
    ctx<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 从 Spring 上下文中获取 MyService 类的实例</span>
    <span class="token class-name">MyService</span> myService <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myService<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-2-4-启用组件扫描" tabindex="-1"><a class="header-anchor" href="#_12-2-4-启用组件扫描" aria-hidden="true">#</a> 12.2.4 启用组件扫描</h4><p>组件扫描是 Spring 的一个强大功能，它可以自动发现并注册 Spring 容器中的 beans。要启用这个功能，你可以在 <code>@Configuration</code> 类上使用 <code>@ComponentScan</code> 注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.acme&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span>  <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<code>AnnotationConfigApplicationContext</code> 也提供了 <code>scan()</code> 方法，实现相同的功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个 AnnotationConfigApplicationContext 对象，用于加载 Spring 配置类和容器管理 Bean</span>
    <span class="token class-name">AnnotationConfigApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 扫描指定包路径下的 Spring 配置类，并将其注册到容器中</span>
    ctx<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">&quot;com.acme&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 刷新容器，使之前通过注解或 XML 配置的 Bean 得以初始化并注入到容器中</span>
    ctx<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 从容器中获取 MyService 类型的 Bean 实例</span>
    <span class="token class-name">MyService</span> myService <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-2-5-web-应用程序支持" tabindex="-1"><a class="header-anchor" href="#_12-2-5-web-应用程序支持" aria-hidden="true">#</a> 12.2.5 Web 应用程序支持</h4><p>对于 Web 应用程序，Spring 提供了 <code>AnnotationConfigWebApplicationContext</code>，它是 <code>AnnotationConfigApplicationContext</code> 的 Web 版本。这使得我们可以在 Web 环境中，如配置 Spring 的 <code>ContextLoaderListener</code> servlet 监听器、Spring MVC <code>DispatcherServlet</code> 等，使用基于注解的配置方式。 如果你需要更多的灵活性，可以考虑使用 <code>GenericWebApplicationContext</code>，它是 <code>AnnotationConfigWebApplicationContext</code> 的一个替代品，适用于更加程序化的使用场景。</p><h3 id="_12-3-使用-bean-注解" tabindex="-1"><a class="header-anchor" href="#_12-3-使用-bean-注解" aria-hidden="true">#</a> 12.3 使用 @Bean 注解</h3><h4 id="_12-3-1-bean-注解简介" tabindex="-1"><a class="header-anchor" href="#_12-3-1-bean-注解简介" aria-hidden="true">#</a> 12.3.1 @Bean 注解简介</h4><p><code>@Bean</code> 是一个方法级别的注解，用于定义一个 Spring 容器中的 bean。你可以在带有 <code>@Configuration</code> 或 <code>@Component</code> 注解的类中使用它。</p><h4 id="_12-3-2-声明一个-bean" tabindex="-1"><a class="header-anchor" href="#_12-3-2-声明一个-bean" aria-hidden="true">#</a> 12.3.2 声明一个 Bean</h4><p>要声明一个 bean，你可以使用 <code>@Bean</code> 注解标注一个方法。这个方法的返回值定义了 bean 的类型，而方法名默认作为 bean 的名称。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferServiceImpl</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置定义了一个名为 <code>transferService</code> 的 bean，其类型为 <code>TransferServiceImpl</code>。</p><h4 id="_12-3-3-使用接口定义-bean" tabindex="-1"><a class="header-anchor" href="#_12-3-3-使用接口定义-bean" aria-hidden="true">#</a> 12.3.3 使用接口定义 Bean</h4><p>你可以使用接口（或基类）作为 <code>@Bean</code> 方法的返回类型，这意味着当你定义一个 Bean 时，你可以让 <code>@Bean</code> 方法返回一个接口类型，而不是一个具体的实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这样做可能会限制高级类型预测的可见性。这意味着，如果你使用接口作为 <code>@Bean</code> 方法的返回类型，某些高级的实现类型特性或方法可能不会被直接暴露或可见，因为你是通过接口来引用它的，而不是具体的实现类。</p><p>如果你始终按照声明的服务接口引用类型，那么你的 <code>@Bean</code> 返回类型可以安全地遵循这个设计决策。也就是说，如果你在应用中总是通过接口来引用这个 Bean（即，你不需要知道或使用到具体实现的特定方法），那么使用接口作为 <code>@Bean</code> 的返回类型是一个安全的做法。</p><h4 id="_12-3-4-bean-依赖" tabindex="-1"><a class="header-anchor" href="#_12-3-4-bean-依赖" aria-hidden="true">#</a> 12.3.4 Bean 依赖</h4><p>一个带有 <code>@Bean</code> 注解的方法可以有任意数量的参数，这些参数描述了构建该 bean 所需的依赖。例如，如果我们的 <code>TransferService</code> 需要一个 <code>AccountRepository</code>，我们可以通过方法参数来实现这个依赖：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token class-name">AccountRepository</span> accountRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span>accountRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种解决机制与基于构造函数的依赖注入非常相似。</p><h4 id="_12-3-5-接收生命周期回调" tabindex="-1"><a class="header-anchor" href="#_12-3-5-接收生命周期回调" aria-hidden="true">#</a> 12.3.5 接收生命周期回调</h4><p>使用 <code>@Bean</code> 定义的类支持常规的生命周期回调，并可以使用 JSR-250 的 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解。</p><p>此外，如果一个 bean 实现了 <code>InitializingBean</code>、<code>DisposableBean</code> 或 <code>Lifecycle</code>，它们的相应方法也会被容器调用。</p><p>你还可以使用 <code>@Bean</code> 注解来指定任意的初始化和销毁回调方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanOne</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// initialization logic</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanTwo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// destruction logic</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BeanOne</span> <span class="token function">beanOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">&quot;cleanup&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BeanTwo</span> <span class="token function">beanTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-3-6-指定-bean-作用域" tabindex="-1"><a class="header-anchor" href="#_12-3-6-指定-bean-作用域" aria-hidden="true">#</a> 12.3.6 指定 Bean 作用域</h4><p>Spring 提供了 <code>@Scope</code> 注解，以便你可以指定 bean 的范围。默认范围是单例，但你可以使用 <code>@Scope</code> 注解来覆盖这个默认值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Encryptor</span> <span class="token function">encryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-3-7-自定义-bean-命名" tabindex="-1"><a class="header-anchor" href="#_12-3-7-自定义-bean-命名" aria-hidden="true">#</a> 12.3.7 自定义 Bean 命名</h4><p>默认情况下，配置类使用 <code>@Bean</code> 方法的名称作为结果 bean 的名称。但这个功能可以使用 <code>name</code> 属性来覆盖：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;myThing&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Thing</span> <span class="token function">thing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-3-8-bean-别名" tabindex="-1"><a class="header-anchor" href="#_12-3-8-bean-别名" aria-hidden="true">#</a> 12.3.8 Bean 别名</h4><p>有时，为一个 bean 设置多个名称是很有用的。<code>@Bean</code> 注解的 <code>name</code> 属性接受一个字符串数组，用于此目的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;dataSource&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;subsystemA-dataSource&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;subsystemB-dataSource&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// instantiate, configure and return DataSource bean...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-3-9-bean-描述" tabindex="-1"><a class="header-anchor" href="#_12-3-9-bean-描述" aria-hidden="true">#</a> 12.3.9 Bean 描述</h4><p>有时，为 bean 提供更详细的文本描述是很有帮助的。为了给 <code>@Bean</code> 添加描述，你可以使用 <code>@Description</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Description</span><span class="token punctuation">(</span><span class="token string">&quot;Provides a basic example of a bean&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Thing</span> <span class="token function">thing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-4-使用-configuration-注解" tabindex="-1"><a class="header-anchor" href="#_12-4-使用-configuration-注解" aria-hidden="true">#</a> 12.4 使用 @Configuration 注解</h3><p><code>@Configuration</code> 是一个类级别的注解，表示该类是 bean 定义的来源。在 <code>@Configuration</code> 类中，你可以通过 <code>@Bean</code> 注解的方法来声明 bean。此外，你还可以通过在 <code>@Configuration</code> 类中调用 <code>@Bean</code> 方法来定义 bean 之间的依赖关系。</p><h4 id="_12-4-1-注入-bean-之间的依赖关系" tabindex="-1"><a class="header-anchor" href="#_12-4-1-注入-bean-之间的依赖关系" aria-hidden="true">#</a> 12.4.1 注入 Bean 之间的依赖关系</h4><p>当一个 bean 依赖于另一个 bean 时，你可以简单地在一个 <code>@Bean</code> 方法中调用另一个 <code>@Bean</code> 方法来表示这种依赖关系。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">BeanOne</span> <span class="token function">beanOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanOne</span><span class="token punctuation">(</span><span class="token function">beanTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">BeanTwo</span> <span class="token function">beanTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>beanOne</code> 通过构造函数注入获得了对 <code>beanTwo</code> 的引用。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>这种声明 bean 之间依赖关系的方法只在 <code>@Configuration</code> 类中的 <code>@Bean</code> 方法中有效。你不能在普通的 <code>@Component</code> 类中声明 bean 之间的依赖关系。</p></div><h4 id="_12-4-2-查找方法注入" tabindex="-1"><a class="header-anchor" href="#_12-4-2-查找方法注入" aria-hidden="true">#</a> 12.4.2 查找方法注入</h4><p>查找方法注入是一个高级功能，通常很少使用。但在某些情况下，例如当一个单例作用域的 bean 依赖于一个原型作用域的 bean 时，它是非常有用的。以下示例展示了如何使用查找方法注入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Object</span> commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Command</span> command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">AsyncCommand</span> <span class="token function">asyncCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CommandManager</span> <span class="token function">commandManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommandManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">protected</span> <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">asyncCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-4-3-关于-java-配置如何在内部工作的进一步信息" tabindex="-1"><a class="header-anchor" href="#_12-4-3-关于-java-配置如何在内部工作的进一步信息" aria-hidden="true">#</a> 12.4.3 关于 Java 配置如何在内部工作的进一步信息</h4><p>考虑以下示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ClientService</span> <span class="token function">clientService1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClientServiceImpl</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        clientService<span class="token punctuation">.</span><span class="token function">setClientDao</span><span class="token punctuation">(</span><span class="token function">clientDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ClientService</span> <span class="token function">clientService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClientServiceImpl</span> clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        clientService<span class="token punctuation">.</span><span class="token function">setClientDao</span><span class="token punctuation">(</span><span class="token function">clientDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ClientDao</span> <span class="token function">clientDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClientDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>clientDao()</code> 被 <code>clientService1()</code> 和 <code>clientService2()</code> 各调用了一次。由于这个方法每次都创建并返回一个新的 <code>ClientDaoImpl</code> 实例，你可能会认为会有两个实例（每个服务一个）。但实际上，Spring 默认将实例化的 bean 设置为单例作用域。这是因为所有的 <code>@Configuration</code> 类在启动时都会被 CGLIB 子类化。在子类中，子方法首先检查容器中是否有缓存的 bean，然后再调用父方法创建新实例。这种行为可能会根据你的 bean 的作用域而有所不同。这里我们讨论的是单例。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>从 Spring 3.2 开始，你不再需要将 CGLIB 添加到你的类路径中，因为 CGLIB 类已经被重新打包到 <code>org.springframework.cglib</code> 下，并直接包含在 <code>spring-core</code> JAR 中。</p><p>由于 CGLIB 在启动时动态地添加了一些功能，所以有一些限制。特别是，配置类不能是 <code>final</code> 的。但从 Spring 4.3 开始，配置类上允许使用任何构造函数，包括使用 <code>@Autowired</code> 或声明一个单一的非默认构造函数进行默认注入。</p><p>如果你希望避免任何 CGLIB 带来的限制，可以考虑在非 <code>@Configuration</code> 类上声明你的 <code>@Bean</code> 方法（例如，在普通的 <code>@Component</code> 类上）。这样，<code>@Bean</code> 方法之间的跨方法调用不会被拦截，所以你必须完全依赖于构造函数或方法级别的依赖注入。</p></div><h3 id="_12-5-组合基于-java-的配置" tabindex="-1"><a class="header-anchor" href="#_12-5-组合基于-java-的配置" aria-hidden="true">#</a> 12.5 组合基于 Java 的配置</h3><p>Spring 基于 Java 的配置特性允许您编写 XML 注释，这可以降低配置的复杂性。</p><h4 id="_12-5-1-使用-import-注解" tabindex="-1"><a class="header-anchor" href="#_12-5-1-使用-import-注解" aria-hidden="true">#</a> 12.5.1 使用 @Import 注解</h4><p>在 Spring 中，我们经常需要将多个配置组合在一起。为了实现这一点，Spring 提供了一个名为 <code>@Import</code> 的注解，它允许我们从一个配置类加载另一个配置类中的 <code>@Bean</code> 定义。 考虑以下示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigA</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">ConfigA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigB</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">B</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们有两个配置类：<code>ConfigA</code> 和 <code>ConfigB</code>。<code>ConfigB</code> 通过 <code>@Import</code> 注解导入了 <code>ConfigA</code>，这意味着当我们初始化 Spring 上下文并只提供 <code>ConfigB</code> 时，<code>ConfigA</code> 中定义的所有 bean 也将被加载。 这是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigB</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 现在，A和B两个bean都可以获取...</span>
    <span class="token class-name">A</span> a <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">B</span> b <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法简化了容器的实例化，因为我们只需要处理一个类，而不是在构建时记住多个 <code>@Configuration</code> 类。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>从 Spring 框架 4.2 开始，<code>@Import</code> 还支持引用常规组件类，这与 <code>AnnotationConfigApplicationContext.register</code> 方法类似。这在你想避免组件扫描并使用几个配置类作为入口点来明确定义所有组件时特别有用。</p></div><h4 id="_12-5-2-在导入的-bean-定义中注入依赖" tabindex="-1"><a class="header-anchor" href="#_12-5-2-在导入的-bean-定义中注入依赖" aria-hidden="true">#</a> 12.5.2 在导入的 @Bean 定义中注入依赖</h4><p>在实际的应用场景中，不同的配置类中定义的 beans 经常会互相依赖。当使用 <code>@Configuration</code> 类时，我们必须确保对其他 beans 的引用是有效的 Java 语法。</p><p>幸运的是，Spring 提供了简单的方法来解决这个问题。一个 <code>@Bean</code> 方法可以有任意数量的参数，这些参数描述了 bean 的依赖关系。以下是一个更实际的示例，其中有几个 <code>@Configuration</code> 类，每个类都依赖于其他类中声明的 beans：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token class-name">AccountRepository</span> accountRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span>accountRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepositoryConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AccountRepository</span> <span class="token function">accountRepository</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcAccountRepository</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ServiceConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RepositoryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemTestConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建并返回一个新的DataSource</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SystemTestConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TransferService</span> transferService <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TransferService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    transferService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">100.00</span><span class="token punctuation">,</span> <span class="token string">&quot;A123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>此外，还有另一种方法来实现相同的结果。由于 <code>@Configuration</code> 类本身也是容器中的一个 bean，这意味着它们可以利用 <code>@Autowired</code> 和 <code>@Value</code> 注入和其他 beans 一样的功能。</p><p>但是，请确保你以这种方式注入的依赖关系只是最简单的类型。<code>@Configuration</code> 类在上下文的初始化过程中很早就被处理了，强制以这种方式注入依赖关系可能会导致意外的早期初始化。因此，尽可能使用基于参数的注入，如上面的示例所示。</p><p>特别注意，通过 <code>@Bean</code> 定义的 <code>BeanPostProcessor</code> 和 <code>BeanFactoryPostProcessor</code> 应该通常声明为静态 <code>@Bean</code> 方法，不触发其包含的配置类的实例化。否则，<code>@Autowired</code> 和 <code>@Value</code> 可能无法在配置类本身上工作，因为可能会在 <code>AutowiredAnnotationBeanPostProcessor</code> 之前将其创建为一个 bean 实例。</p></div><p>以下示例显示了如何将一个 bean 自动装配到另一个 bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AccountRepository</span> accountRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span>accountRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepositoryConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RepositoryConfig</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AccountRepository</span> <span class="token function">accountRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcAccountRepository</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ServiceConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RepositoryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemTestConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建并返回一个新的DataSource</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SystemTestConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TransferService</span> transferService <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TransferService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    transferService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">100.00</span><span class="token punctuation">,</span> <span class="token string">&quot;A123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>TIP：从 Spring 框架 4.3 开始，<code>@Configuration</code> 类支持构造函数注入。此外，如果目标 bean 只定义了一个构造函数，那么不需要指定 <code>@Autowired</code>。</p></blockquote><h4 id="_12-5-3-为了便于导航而完全限定导入的-beans" tabindex="-1"><a class="header-anchor" href="#_12-5-3-为了便于导航而完全限定导入的-beans" aria-hidden="true">#</a> 12.5.3 为了便于导航而完全限定导入的 beans</h4><p>在前面的场景中，使用 <code>@Autowired</code> 很有效，并提供了所需的模块化，但确定哪里声明了自动装配的 bean 定义仍然有些模糊。例如，作为开发者，当你查看 <code>ServiceConfig</code> 时，你如何确切地知道 <code>@Autowired AccountRepository</code> bean 在哪里声明的？代码中并没有明确指出。</p><p>为了解决这种模糊性，并希望在 IDE 中从一个 <code>@Configuration</code> 类直接导航到另一个，你可以考虑自动装配配置类本身。以下示例展示了如何做到这一点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RepositoryConfig</span> repositoryConfig<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span>repositoryConfig<span class="token punctuation">.</span><span class="token function">accountRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述情况中，<code>AccountRepository</code> 的定义是完全明确的。但是，<code>ServiceConfig</code> 现在与 <code>RepositoryConfig</code> 紧密耦合。这是一个权衡。通过使用基于接口或基于抽象类的 <code>@Configuration</code> 类，可以在某种程度上减轻这种紧密耦合。考虑以下示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RepositoryConfig</span> repositoryConfig<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span>repositoryConfig<span class="token punctuation">.</span><span class="token function">accountRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RepositoryConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">AccountRepository</span> <span class="token function">accountRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRepositoryConfig</span> <span class="token keyword">implements</span> <span class="token class-name">RepositoryConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AccountRepository</span> <span class="token function">accountRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcAccountRepository</span><span class="token punctuation">(</span><span class="token comment">/* 数据源参数等 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ServiceConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DefaultRepositoryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemTestConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建并返回一个新的DataSource</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SystemTestConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TransferService</span> transferService <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TransferService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    transferService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">100.00</span><span class="token punctuation">,</span> <span class="token string">&quot;A123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，<code>ServiceConfig</code> 与具体的 <code>DefaultRepositoryConfig</code> 松散耦合，而内置的 IDE 工具仍然很有用：你可以轻松地获取 <code>RepositoryConfig</code> 实现的类型层次结构。这样，导航 <code>@Configuration</code> 类及其依赖关系与通常导航基于接口的代码的过程没有什么不同。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果你想影响某些 beans 的启动创建顺序，可以考虑将其中一些声明为 <code>@Lazy</code>（首次访问时创建，而不是在启动时）或者 <code>@DependsOn</code> 某些其他 beans（确保在当前 bean 之前创建特定的其他 beans，超出后者的直接依赖关系）。</p></div><h4 id="_12-5-4-根据条件选择性地包含-configuration-类或-bean-方法" tabindex="-1"><a class="header-anchor" href="#_12-5-4-根据条件选择性地包含-configuration-类或-bean-方法" aria-hidden="true">#</a> 12.5.4 根据条件选择性地包含 @Configuration 类或 @Bean 方法</h4><p>在 Spring 中，有时我们希望根据某些条件来决定是否启用某个配置类或某个 Bean 方法。这样，我们可以根据不同的环境或其他条件来动态地调整应用程序的配置。</p><p>一个常见的用例是使用 <code>@Profile</code> 注解。这个注解允许我们仅在 Spring 环境中启用了特定的配置文件时激活某些 beans。</p><p>但实际上，<code>@Profile</code> 是基于一个更通用的注解 <code>@Conditional</code> 来实现的。<code>@Conditional</code> 注解允许我们指定一个条件类，这个条件类决定了是否应该注册一个 <code>@Bean</code>。</p><p>这个条件类需要实现 <code>Condition</code> 接口，这个接口有一个 <code>matches(...)</code> 方法，返回 true 或 false 来决定是否满足条件。</p><p>例如，以下是 <code>@Profile</code> 注解背后的实际 <code>Condition</code> 实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取@Profile注解的属性</span>
    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attrs <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAllAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">Profile</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attrs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> value <span class="token operator">:</span> attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 检查当前环境是否接受指定的配置文件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简而言之，这个 <code>Condition</code> 实现检查了当前的 Spring 环境是否接受了 <code>@Profile</code> 注解指定的配置文件。如果接受了，那么与该 <code>@Profile</code> 注解关联的 <code>@Bean</code> 就会被注册。</p><blockquote><p>TIP：为了更深入地了解如何使用 <code>@Conditional</code> 来定义自己的条件，你可以查看 <code>@Conditional</code> 的javadoc。</p></blockquote>`,259),I={href:"https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/context/annotation/Conditional.html",target:"_blank",rel:"noopener noreferrer"},D=t(`<h4 id="_12-5-5-结合-java-和-xml-配置" tabindex="-1"><a class="header-anchor" href="#_12-5-5-结合-java-和-xml-配置" aria-hidden="true">#</a> 12.5.5 结合 Java 和 XML 配置</h4><p>虽然 Spring 提供了 <code>@Configuration</code> 注解来支持 Java 配置，但这并不意味着它完全取代了传统的 XML 配置。实际上，有时候，XML 配置在某些场景下仍然是一个很好的选择。</p><p>但是，如果你更偏好使用 Java 配置，或者在项目中已经大量使用了 Java 配置，但又有一些旧的 XML 配置需要整合，Spring 为你提供了一个方便的解决方案。</p><p>你可以使用 <code>AnnotationConfigApplicationContext</code> 来加载 Java 配置，并通过 <code>@ImportResource</code> 注解来导入必要的 XML 配置。</p><p>例如，假设你有一个名为 legacy-config.xml 的 XML 配置文件，你可以这样整合它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:legacy-config.xml&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// Your Java-based configuration beans go here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当你使用 <code>AnnotationConfigApplicationContext</code> 来加载 <code>JavaConfig</code> 类时，它也会自动加载并应用 legacy-config.xml 中的配置。</p><h4 id="_12-5-6-使用-configuration-类与-java-配置结合" tabindex="-1"><a class="header-anchor" href="#_12-5-6-使用-configuration-类与-java-配置结合" aria-hidden="true">#</a> 12.5.6 使用 @Configuration 类与 Java 配置结合</h4><ol><li>将 <code>@Configuration</code> 类定义为普通的 Spring Bean</li></ol><p>首先，你需要知道的是，<code>@Configuration</code> 注解的类最终也是容器中的 bean 定义。例如，我们可以创建一个名为 <code>AppConfig</code> 的 <code>@Configuration</code> 类，并在 Java 配置中将其定义为一个 bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AccountRepository</span> <span class="token function">accountRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcAccountRepository</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferService</span><span class="token punctuation">(</span><span class="token function">accountRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用 <code>@ComponentScan</code> 自动扫描 <code>@Configuration</code> 类</li></ol><p>由于 <code>@Configuration</code> 注解本身带有 <code>@Component</code> 元注解，因此使用 <code>@ComponentScan</code> 可以自动扫描和注册 <code>@Configuration</code> 注解的类。</p><p>例如，如果你的 <code>AppConfig</code> 类位于 com.acme 包中，你可以在主配置类中使用 <code>@ComponentScan</code> 来自动扫描和注册它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.acme&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建并返回DataSource实例</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当你使用 <code>AnnotationConfigApplicationContext</code> 来加载 <code>MainConfig</code> 类时，它会自动扫描 com.acme 包，并注册所有带有 <code>@Configuration</code> 注解的类。</p><h4 id="_12-5-7-使用-propertysource-在-configuration-类中引入属性文件" tabindex="-1"><a class="header-anchor" href="#_12-5-7-使用-propertysource-在-configuration-类中引入属性文件" aria-hidden="true">#</a> 12.5.7 使用 @PropertySource 在 @Configuration 类中引入属性文件</h4><p>在某些应用中，虽然我们主要使用 <code>@Configuration</code> 类来配置 Spring 容器，但我们仍然需要加载外部的属性文件，例如数据库连接信息。在这种情况下，我们可以使用 <code>@PropertySource</code> 注解来加载属性文件，而不需要使用 XML。</p><p>以下是如何使用 <code>@PropertySource</code> 在 <code>@Configuration</code> 类中加载属性文件的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/com/acme/jdbc.properties&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jdbc.url}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jdbc.username}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jdbc.password}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们使用 <code>@PropertySource</code> 注解加载了一个名为 jdbc.properties 的属性文件。然后，我们使用 <code>@Value</code> 注解将属性文件中的值注入到 <code>AppConfig</code> 类的字段中。</p><p>jdbc.properties 文件内容可能如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:hsqldb:hsql://localhost/xdb</span>
<span class="token key attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以像往常一样使用 <code>AnnotationConfigApplicationContext</code> 来加载 <code>AppConfig</code> 类，并从容器中获取 bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，我们可以方便地加载外部属性文件，而无需使用 XML。</p><h2 id="_13-环境抽象" tabindex="-1"><a class="header-anchor" href="#_13-环境抽象" aria-hidden="true">#</a> 13.环境抽象</h2><p>在 Spring 中，<code>Environment</code> 接口是一个核心概念，它主要处理两个关键方面：配置文件（profiles）和属性（properties）。</p><ol><li><strong>配置文件（Profiles）</strong>：配置文件允许你定义一组 bean，这些 bean 只有在特定的配置文件被激活时才会被注册到容器中。例如，你可能有开发和生产两个环境，每个环境都需要不同的数据库配置。通过使用配置文件，你可以为每个环境定义不同的 bean 配置。<code>Environment</code> 对象的角色是确定哪些配置文件当前是活动的，以及默认情况下应该激活哪些配置文件。</li><li><strong>属性（Properties）</strong>：属性是应用程序中的配置值，它们可以来自多种来源，例如：属性文件、JVM 系统属性、系统环境变量等。<code>Environment</code> 对象提供了一个方便的接口，用于配置属性来源并从中解析属性。</li></ol><h3 id="_13-1-bean-定义配置文件" tabindex="-1"><a class="header-anchor" href="#_13-1-bean-定义配置文件" aria-hidden="true">#</a> 13.1 Bean 定义配置文件</h3><p>在 Spring 中，配置文件提供了一种机制，允许你在不同的环境中注册不同的 beans。这意味着你可以为不同的运行环境（如开发、测试、生产等）定义不同的 bean 配置。 例如：</p><ul><li>在开发环境中，你可能想使用内存数据库。</li><li>在生产环境中，你可能想使用 JNDI 来查找真实的数据库。</li></ul><h4 id="_13-1-1-使用-profile" tabindex="-1"><a class="header-anchor" href="#_13-1-1-使用-profile" aria-hidden="true">#</a> 13.1.1 使用 @Profile</h4><p><code>@Profile</code> 注解允许你指定当某个或多个特定的配置文件被激活时，哪些组件或配置类应该被注册。 例如，考虑以下的数据源配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;development&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevDataSourceConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedDatabaseBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedDatabaseType</span><span class="token punctuation">.</span><span class="token constant">HSQL</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addScript</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:sql/schema.sql&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addScript</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:sql/test-data.sql&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProdDataSourceConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Context</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;java:comp/env/jdbc/datasource&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>DevDataSourceConfig</code> 只在 &quot;development&quot; 配置文件被激活时注册，而 <code>ProdDataSourceConfig</code> 只在 &quot;production&quot; 配置文件被激活时注册。</p><h4 id="_13-1-2-激活配置文件" tabindex="-1"><a class="header-anchor" href="#_13-1-2-激活配置文件" aria-hidden="true">#</a> 13.1.2 激活配置文件</h4><p>要激活特定的配置文件，你可以使用多种方法。最直接的方法是在应用程序启动时，通过 Environment API 来设置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setActiveProfiles</span><span class="token punctuation">(</span><span class="token string">&quot;development&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，你还可以通过 <code>spring.profiles.active</code> 属性来声明式地激活配置文件。这可以通过 application 配置文件、系统环境变量、 JVM 系统属性等方式来设置。</p><h4 id="_13-1-3-默认配置文件" tabindex="-1"><a class="header-anchor" href="#_13-1-3-默认配置文件" aria-hidden="true">#</a> 13.1.3 默认配置文件</h4><p>如果没有明确激活任何配置文件，Spring 会查找名为 &quot;default&quot; 的配置文件。这可以作为没有任何特定配置文件激活时的后备选项。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// bean definitions</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想更改默认配置文件的名称，可以使用 <code>Environment</code> 的 <code>setDefaultProfiles()</code> 方法，或者使用 <code>spring.profiles.default</code> 属性。</p><h3 id="_13-2-propertysource-抽象" tabindex="-1"><a class="header-anchor" href="#_13-2-propertysource-抽象" aria-hidden="true">#</a> 13.2 PropertySource 抽象</h3><p>Spring 的 <code>Environment</code> 抽象提供了在一个可配置的属性源层次结构上进行搜索的操作。属性源是键值对的任何来源的简单抽象。例如，这可以是系统属性、环境变量等。 考虑以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Environment</span> env <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> containsMyProperty <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span><span class="token string">&quot;my-property&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我的环境中是否包含&#39;my-property&#39;属性? &quot;</span> <span class="token operator">+</span> containsMyProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们询问 Spring 当前环境是否定义了 my-property 属性。为了回答这个问题，<code>Environment</code> 对象在一组 <code>PropertySource</code> 对象上执行搜索。</p><p>默认情况下，Spring 的 <code>StandardEnvironment</code> 配置了两个 <code>PropertySource</code> 对象：</p><ol><li>代表 JVM 系统属性的对象（<code>System.getProperties()</code>）。</li><li>代表系统环境变量的对象（<code>System.getenv()</code>）。</li></ol><p>这些默认的属性源适用于独立应用程序中的 <code>StandardEnvironment</code>。对于 Web 应用程序，还会有其他的属性源，如 servlet 配置、servlet 上下文参数等。</p><p>当你使用 <code>StandardEnvironment</code> 时，如果在运行时存在 my-property 系统属性或环境变量， <code>env.containsProperty(&quot;my-property&quot;)</code> 将返回 true。</p><p>这种搜索是分层的。默认情况下，系统属性优先于环境变量。所以，如果在调用 <code>env.getProperty(&quot;my-property&quot;)</code> 时，my-property 属性同时在两个地方设置，系统属性的值会被返回。</p><p>最重要的是，整个机制都是可配置的。如果你有一个自定义的属性来源，你可以将其集成到这个搜索中。为此，你可以实现并实例化自己的 <code>PropertySource</code>，并将其添加到当前 <code>Environment</code> 的 <code>PropertySources</code> 集合中。以下是如何做到这一点的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConfigurableApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MutablePropertySources</span> sources <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sources<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyPropertySource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>MyPropertySource</code> 已经被添加到搜索中，并具有最高的优先级。如果它包含一个 my-property 属性，该属性将被检测并返回，优先于任何其他 <code>PropertySource</code> 中的 my-property 属性。</p><h3 id="_13-3-使用-propertysource" tabindex="-1"><a class="header-anchor" href="#_13-3-使用-propertysource" aria-hidden="true">#</a> 13.3 使用 @PropertySource</h3><p><code>@PropertySource</code> 注解提供了一种方便和声明性的机制，用于将属性源添加到 Spring 的环境中。</p><p>考虑一个名为 app.properties 的文件，该文件包含键值对 <code>testbean.name=myTestBean</code>。以下的配置类使用 <code>@PropertySource</code>，这样当调用 <code>testBean.getName()</code> 时，会返回 <code>myTestBean</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/com/myco/app.properties&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">Environment</span> env<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TestBean</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestBean</span> testBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;testbean.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> testBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>@PropertySource</code> 的资源位置中存在的任何 <code>\${…}</code> 占位符都会根据已经在环境中注册的属性源集合进行解析，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/com/\${my.placeholder:default/path}/app.properties&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">Environment</span> env<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TestBean</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestBean</span> testBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;testbean.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> testBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设 <code>my.placeholder</code> 存在于已经注册的某个属性源中（例如，系统属性或环境变量），则占位符会被解析为相应的值。如果没有，则使用 <code>default/path</code> 作为默认值。如果没有指定默认值并且无法解析属性，则会抛出 <code>IllegalArgumentException</code>。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>根据 Java 8 的约定，<code>@PropertySource</code> 注解是可重复的。但是，所有这样的 <code>@PropertySource</code> 注解都需要在同一级别上声明，要么直接在配置类上，要么作为同一自定义注解中的元注解。不建议混合直接注解和元注解，因为直接注解实际上会覆盖元注解。</p></div><h3 id="_13-4-在语句中解析占位符" tabindex="-1"><a class="header-anchor" href="#_13-4-在语句中解析占位符" aria-hidden="true">#</a> 13.4 在语句中解析占位符</h3><p>在 Spring 的早期版本中，元素中的占位符的值只能通过 JVM 系统属性或环境变量来解析。但现在，这种情况已经发生了变化。由于 Spring 的 <code>Environment</code> 抽象贯穿于整个容器中，我们可以轻松地通过它来解析占位符。这意味着你可以根据需要自定义解析过程。你可以更改搜索系统属性和环境变量的优先级，或完全删除它们。你还可以根据需要添加自己的属性源。</p><p>具体来说，只要 customer 属性在 <code>Environment</code> 中可用，无论它在哪里定义，以下语句都能正常工作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 假设你有一个配置类</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${customer}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> customerConfig<span class="token punctuation">;</span>

    <span class="token comment">// 其他的bean定义和方法...</span>

    <span class="token comment">// 这里可以使用customerConfig变量来加载特定的配置或资源</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用 <code>@Value</code> 注解来注入名为 customer 的属性值。这意味着，不论这个属性是从系统属性、环境变量，还是其他任何在 <code>Environment</code> 中定义的属性源中获取的，它都可以被正确地注入到 <code>customerConfig</code> 变量中。</p><h2 id="_14-注册-loadtimeweaver" tabindex="-1"><a class="header-anchor" href="#_14-注册-loadtimeweaver" aria-hidden="true">#</a> 14.注册 LoadTimeWeaver</h2><p><code>LoadTimeWeaver</code> 是 Spring 用来在类加载到 Java 虚拟机 (JVM) 时动态转换它们的工具。</p><p>要启用加载时织入，你可以在你的一个 <code>@Configuration</code> 类中添加 <code>@EnableLoadTimeWeaving</code> 注解，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableLoadTimeWeaving</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,73),T=n("code",null,"ApplicationContext",-1),R=n("code",null,"ApplicationContext",-1),E=n("code",null,"LoadTimeWeaverAware",-1),J={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/data-access.html#orm-jpa",target:"_blank",rel:"noopener noreferrer"},L={href:"https://docs.spring.io/spring-framework/docs/5.3.29/javadoc-api/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#aop-aj-ltw",target:"_blank",rel:"noopener noreferrer"},N=t(`<h2 id="_15-applicationcontext-的附加功能" tabindex="-1"><a class="header-anchor" href="#_15-applicationcontext-的附加功能" aria-hidden="true">#</a> 15.ApplicationContext 的附加功能</h2><p>如章节介绍中所述，<code>org.springframework.beans.factory</code> 包为管理和操作 beans 提供了基本功能，包括以编程方式。而 <code>org.springframework.context</code> 包增加了 <code>ApplicationContext</code> 接口，该接口扩展了 <code>BeanFactory</code> 接口，并增加了其他接口以提供更多的应用框架导向的功能。许多人完全以声明式的方式使用 <code>ApplicationContext</code>，甚至不以编程方式创建它，而是依赖如 <code>ContextLoader</code> 这样的支持类在 Java EE web 应用的正常启动过程中自动实例化一个 <code>ApplicationContext</code>。</p><p>为了以更加框架导向的方式增强 <code>BeanFactory</code> 的功能，<code>context</code> 包还提供了以下功能：</p><ol><li><strong>国际化消息访问</strong>：通过 <code>MessageSource</code> 接口，你可以以国际化风格访问消息。</li><li><strong>资源访问</strong>：通过 <code>ResourceLoader</code> 接口，你可以访问如 URLs 和文件等资源。</li><li><strong>事件发布</strong>：通过使用 <code>ApplicationEventPublisher</code> 接口，你可以向实现 <code>ApplicationListener</code> 接口的 beans 发布事件。</li><li><strong>加载多个（分层的）上下文</strong>：通过 <code>HierarchicalBeanFactory</code> 接口，你可以让每个上下文专注于特定的层，例如应用的 web 层。</li></ol><h3 id="_15-1-使用-messagesource-进行国际化" tabindex="-1"><a class="header-anchor" href="#_15-1-使用-messagesource-进行国际化" aria-hidden="true">#</a> 15.1 使用 MessageSource 进行国际化</h3><p>Spring 的 <code>ApplicationContext</code> 接口扩展了一个名为 <code>MessageSource</code> 的接口，为我们提供了国际化功能。Spring 还提供了 <code>HierarchicalMessageSource</code> 接口，支持层次化地解析消息。</p><p>以下是 <code>MessageSource</code> 接口中定义的主要方法：</p><ul><li><code>getMessage(String code, Object[] args, String default, Locale loc)</code>: 基本方法，用于从 <code>MessageSource</code> 中检索消息。如果找不到指定语言环境的消息，则使用默认消息。传入的任何参数都会成为替换值。</li><li><code>getMessage(String code, Object[] args, Locale loc)</code>: 与上一个方法基本相同，但没有默认消息。如果找不到消息，将抛出 <code>NoSuchMessageException</code>。</li><li><code>getMessage(MessageSourceResolvable resolvable, Locale locale)</code>: 上述方法中使用的所有属性也都封装在一个名为 <code>MessageSourceResolvable</code> 的类中，你可以与此方法一起使用。</li></ul><p>当加载 <code>ApplicationContext</code> 时，它会自动搜索上下文中定义的名为 <code>messageSource</code> 的 <code>MessageSource</code> bean。如果找到这样的 bean，所有对上述方法的调用都会委托给消息源。</p><p>Spring 提供了三种 <code>MessageSource</code> 实现：<code>ResourceBundleMessageSource</code>、<code>ReloadableResourceBundleMessageSource</code> 和 <code>StaticMessageSource</code>。其中，<code>StaticMessageSource</code> 很少使用，但提供了以编程方式向源添加消息的方法。</p><h4 id="_15-1-1-配置-messagesource" tabindex="-1"><a class="header-anchor" href="#_15-1-1-配置-messagesource" aria-hidden="true">#</a> 15.1.1 配置 MessageSource</h4><p>首先，你需要配置 <code>MessageSource</code>。在 Spring 中，你可以使用 <code>ResourceBundleMessageSource</code>，它从类路径下的属性文件中读取消息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MessageSource</span> <span class="token function">messageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ResourceBundleMessageSource</span> messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span><span class="token string">&quot;messages/format&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;messages/exceptions&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;messages/windows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们指定了三个基本名称：<code>messages/format</code>、<code>messages/exceptions</code> 和 <code>messages/windows</code>。这意味着你应该在类路径下的 <code>messages</code> 目录中有 <code>format.properties</code>、<code>exceptions.properties</code> 和 <code>windows.properties</code> 文件。</p><h4 id="_15-1-2-创建属性文件" tabindex="-1"><a class="header-anchor" href="#_15-1-2-创建属性文件" aria-hidden="true">#</a> 15.1.2 创建属性文件</h4><p>在 <code>src/main/resources/messages</code> 目录下，创建以下属性文件： format.properties</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>message<span class="token operator">=</span><span class="token class-name">Alligators</span> rock<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>exceptions.properties</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>argument<span class="token punctuation">.</span>required<span class="token operator">=</span><span class="token class-name">The</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> argument is required<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_15-1-3-使用-messagesource" tabindex="-1"><a class="header-anchor" href="#_15-1-3-使用-messagesource" aria-hidden="true">#</a> 15.1.3 使用 MessageSource</h4><p>在你的服务或控制器中，你可以注入 <code>MessageSource</code> 并使用它来获取消息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MessageSource</span> messageSource<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFormattedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ENGLISH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;argument.required&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>arg<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ENGLISH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_15-1-4-国际化" tabindex="-1"><a class="header-anchor" href="#_15-1-4-国际化" aria-hidden="true">#</a> 15.1.4 国际化</h4><p>为了支持多种语言，你可以为每种语言创建一个属性文件。例如，为英国英语创建 <code>format_en_GB.properties</code> 和 <code>exceptions_en_GB.properties</code>。 exceptions_en_GB.properties</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>argument<span class="token punctuation">.</span>required<span class="token operator">=</span><span class="token class-name">Oi</span> mate<span class="token punctuation">,</span> the &#39;<span class="token char">&#39;{0}&#39;</span>&#39; argument is required<span class="token punctuation">,</span> innit<span class="token operator">?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当你的应用程序在英国英语的环境中运行时，它会使用这些特定的消息。</p><h4 id="_15-1-5-使用" tabindex="-1"><a class="header-anchor" href="#_15-1-5-使用" aria-hidden="true">#</a> 15.1.5 使用</h4><p>现在，当你调用 <code>MyService</code> 的 <code>getErrorMessage</code> 方法时，它会返回适当的消息，具体取决于当前的 <code>Locale</code>。</p><h3 id="_15-2-标准和自定义事件" tabindex="-1"><a class="header-anchor" href="#_15-2-标准和自定义事件" aria-hidden="true">#</a> 15.2 标准和自定义事件</h3><h3 id="_15-3-便捷获取底层资源" tabindex="-1"><a class="header-anchor" href="#_15-3-便捷获取底层资源" aria-hidden="true">#</a> 15.3 便捷获取底层资源</h3><h3 id="_15-4-应用程序启动跟踪" tabindex="-1"><a class="header-anchor" href="#_15-4-应用程序启动跟踪" aria-hidden="true">#</a> 15.4 应用程序启动跟踪</h3><h3 id="_15-5-web-应用程序的便捷-applicationcontext-实例化" tabindex="-1"><a class="header-anchor" href="#_15-5-web-应用程序的便捷-applicationcontext-实例化" aria-hidden="true">#</a> 15.5 Web 应用程序的便捷 ApplicationContext 实例化</h3><h3 id="_15-6-将-spring-applicationcontext-部署为-java-ee-rar-文件" tabindex="-1"><a class="header-anchor" href="#_15-6-将-spring-applicationcontext-部署为-java-ee-rar-文件" aria-hidden="true">#</a> 15.6 将 Spring ApplicationContext 部署为 Java EE RAR 文件</h3><h2 id="_16-beanfactory-api" tabindex="-1"><a class="header-anchor" href="#_16-beanfactory-api" aria-hidden="true">#</a> 16.BeanFactory API</h2>`,34);function V(X,Q){const s=p("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[a("感兴趣可以详细阅读下面的文章："),n("a",d,[a("Method Injection"),e(s)])]),r,n("table",null,[k,n("tbody",null,[n("tr",null,[n("td",null,[n("a",v,[a("singleton"),e(s)])]),m]),n("tr",null,[n("td",null,[n("a",b,[a("prototype"),e(s)])]),g]),n("tr",null,[n("td",null,[n("a",y,[a("request"),e(s)])]),w]),n("tr",null,[n("td",null,[n("a",h,[a("session"),e(s)])]),f]),n("tr",null,[n("td",null,[n("a",S,[a("application"),e(s)])]),C]),n("tr",null,[n("td",null,[n("a",B,[a("websocket"),e(s)])]),x])])]),j,n("blockquote",null,[n("p",null,[a("TIP：其他的四个作用域实际应用并不多，感兴趣的请自行参见 Spring 官方文档："),n("a",A,[a("https://docs.spring.io/spring-framework/docs/5.3.29/reference/html/core.html#beans-factory-scopes"),e(s)])])]),q,n("p",null,[a("其他 Aware 感知接口并不常用，感兴趣的请自行阅读官方文档： "),n("a",M,[a("Core Technologies"),e(s)])]),P,n("p",null,[a("由于 SpEL 表达式不是本文重点，感兴趣的请自行阅读官方文档： "),n("a",_,[a("Core Technologies"),e(s)])]),F,n("p",null,[n("a",I,[a("Conditional (Spring Framework 5.3.29 API)"),e(s)])]),D,n("p",null,[a("一旦为 "),T,a(" 配置了加载时织入，该 "),R,a(" 中的任何 bean 都可以实现 "),E,a(" 接口，从而接收到加载时织入实例的引用。这与 Spring 的 "),n("a",J,[a("JPA 支持"),e(s)]),a("结合使用尤为有用，因为 JPA 类转换可能需要加载时织入。")]),n("blockquote",null,[n("p",null,[a("TIP：有关更多详细信息，请参考 "),n("a",L,[a("LocalContainerEntityManagerFactoryBean"),e(s)]),a(" 的 javadoc。要了解有关 AspectJ 加载时织入的更多信息，请参考 Spring 框架中的 "),n("a",O,[a("AspectJ 加载时织入"),e(s)]),a("部分。")])]),N])}const G=o(l,[["render",V],["__file","01-核心-IOC.html.vue"]]);export{G as default};
