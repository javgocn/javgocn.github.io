import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,a as n,d as s,b as c,f as a}from"./app-009ef08a.js";const l={},u=a('<h2 id="_1-kie-knowledge-is-everything" tabindex="-1"><a class="header-anchor" href="#_1-kie-knowledge-is-everything" aria-hidden="true">#</a> 1.KIE (Knowledge Is Everything)</h2><p><strong>KIE (Knowledge Is Everything)</strong> 是一个综合性的项目，它的主要目的是将我们的多种相关技术整合在同一个平台下。你可以将它想象成一个大房子，而这个房子里住着多个技术项目，它们都共享这个 “房子” 的核心资源。</p><p>在 KIE 的 “房子” 里，有以下几个主要的 “居民” 或项目：</p><ol><li><strong>Drools</strong>：这是一个<u>业务规则管理系统（business-rule management system，BRMS）</u>，它拥有前向链接和后向链接的推理规则引擎。简单来说，就是它<strong>可以快速可靠地评估业务规则和复杂的事件处理</strong>。你可以将其看作是一个专家系统的基石。在人工智能领域，专家系统是模仿人类专家决策能力的计算机系统。想象一下，有一个计算机程序可以像人类专家那样做决策，Drools 就是为实现这个目标提供支持的工具。</li><li><strong>jBPM</strong>：这是一个灵活的<u>业务流程管理套件</u>。它帮助你通过描述实现业务目标所需的步骤来建模你的业务目标。就好比你有一个目标，jBPM 就是告诉你为了达到这个目标，你需要按照哪些步骤行动。</li><li><strong>OptaPlanner</strong>：这是一个<u>约束求解器</u>，它优化了如员工排班、车辆路线、任务分配和云优化等使用场景。想象一下，你有一个复杂的问题需要解决，OptaPlanner 就是帮助你找到最佳解决方案的工具。</li><li><strong>Business Central</strong>：这是一个功能齐全的网络应用程序，用于<u>可视化地组合自定义的业务规则和流程</u>。就像一个画板，你可以在上面绘制和组合你的业务规则。</li><li><strong>UberFire</strong>：这是一个受到 Eclipse Rich Client Platform 启发的基于网络的工作台框架。如果你熟悉 Eclipse，那么你可以理解 UberFire 提供了一个类似但基于网络的工作环境。</li></ol>',4),r={href:"https://www.drools.org/",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="_2-构建-building" tabindex="-1"><a class="header-anchor" href="#_2-构建-building" aria-hidden="true">#</a> 2.构建（Building）</h2><h3 id="_2-1-创建并构建-kie-项目" tabindex="-1"><a class="header-anchor" href="#_2-1-创建并构建-kie-项目" aria-hidden="true">#</a> 2.1 创建并构建 Kie 项目</h3><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-122418.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Kie 项目</strong>与我们通常看到的 Maven 项目结构非常相似，但有一个小小的特点：它包含一个名为 <code>kmodule.xml</code> 的文件。这个文件的主要任务是<strong>描述可以从这个项目中创建的 KieBases 和 KieSessions</strong>。</p><p>📁 <strong>文件位置</strong>：你需要将 <code>kmodule.xml</code> 文件放在 Maven 项目的 <code>resources/META-INF</code> 文件夹中。而其他的 Kie 相关文件，比如 DRL 或 Excel 文件，应该存放在 <code>resources</code> 文件夹或其下的任何子文件夹中。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-123241.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>📄 <strong>简化的 kmodule.xml</strong>：虽然你可以在 <code>kmodule.xml</code> 中进行各种配置，但为了简化，你可以只使用一个空的 kmodule 标签，如下所示：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kmodule</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.drools.org/xsd/kmodule<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做的话，<strong>kmodule 将只包含一个默认的 KieBase，并且 <code>resources</code> 文件夹下的所有 Kie 资源（比如 DRL 或 Excel 文件）都会被编译并添加到其中</strong>。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-123555.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🛠️ <strong>触发构建</strong>：为了构建这些资源，你只需要为它们创建一个 KieContainer。这个过程很简单，只需从类路径中读取要构建的文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从工厂中创建 KieServices 对象</span>
<span class="token class-name">KieServices</span> kieServices <span class="token operator">=</span> <span class="token class-name">KieServices<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从 KieServices 中获取 KieContainer 对象，其会加载 kmodule.xml 文件并 load 规则文件</span>
<span class="token class-name">KieContainer</span> kieContainer <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">getKieClasspathContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>KieServices</code> 是一个接口，你可以通过它访问所有的 Kie 构建和运行时工具。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-123747.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后，所有的 Java 源代码和 Kie 资源都会被编译并部署到 KieContainer 中，这样在运行时你就可以使用它们了。</p><h3 id="_2-2-kmodule-xml-文件" tabindex="-1"><a class="header-anchor" href="#_2-2-kmodule-xml-文件" aria-hidden="true">#</a> 2.2 kmodule.xml 文件</h3><p><code>kmodule.xml</code> 文件是 KIE 项目中的一个关键文件。你可以把它想象成一个 “菜单”，在这里你可以声明性地配置你想要创建的 KieBase(s) 和 KieSession(s)。</p><p>📚 <strong>KieBase 是什么？</strong></p><p>KieBase 就像是一个图书馆，存储了应用程序的所有知识定义，包括规则、流程、函数和类型模型。但请注意，KieBase 本身不存储数据。你可以把它看作是一个书架，而不是书本。要操作数据，你需要从 KieBase 创建会话（KieSession），在这些会话中，你可以插入数据或启动流程实例。</p><blockquote><p>[!TIP]</p><p>🚀 <strong>关于 KieBase 的性能建议</strong></p><p>创建 KieBase 可能会消耗较多的资源，而创建会话（KieSession）则相对轻量。因此，建议在可能的情况下缓存 KieBase，以便多次创建会话。但作为初学者，你不必过于担心这个问题，因为 KieContainer 已经自动为你提供了这个缓存机制。</p></blockquote><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-124709.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>🖥️ <strong>KieSession 的作用</strong></p><p>KieSession 是运行时数据的 “操作场所”。你可以从 KieBase 创建它，或者更简单地，如果在 <code>kmodule.xml</code> 文件中已经定义了，你可以直接从 KieContainer 创建它。你可以把 KieSession 想象成一个工作台，你在上面操作和执行数据。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-124809.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>📄 <strong>基本结构</strong>：</p><p><code>kmodule.xml</code> 文件是 Drools 项目中的一个核心配置文件。这个文件允许你定义和配置一个或多个 KieBases。对于每个 KieBase，你还可以定义可以从中创建的所有不同 KieSessions。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kmodule</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.drools.org/xsd/kmodule<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>drools.evaluator.supersetOf<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mycompany.SupersetOfEvaluatorDefinition<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 配置 kiebase
        name: kiebase 名称，必须唯一
        default: 是否为默认 kiebase ，默认为 false
        eventProcessingMode: 事件处理模式，可选值为 cloud 和 stream ，默认为 cloud
            - cloud: 云模式，事件在规则引擎中被处理
            - stream: 流模式，事件在规则引擎之外被处理
        equalsBehavior: 等价行为，可选值为 identity 和 equality ，默认为 identity
            - identity: 使用 == 比较对象
            - equality: 使用 equals() 比较对象
        declarativeAgenda: 声明性 agenda ，可选值为 enabled 和 disabled ，默认为 enabled
        packages: kiebase 所在的包，多个包之间用逗号分隔，同一个 kiebase 下的 kiesession 可以访问同一个包下的规则
        includes: 引入其他 kiebase ，多个 kiebase 之间用逗号分隔
     --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbase</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>KBase1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">eventProcessingMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cloud<span class="token punctuation">&quot;</span></span> <span class="token attr-name">equalsBehavior</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>equality<span class="token punctuation">&quot;</span></span> <span class="token attr-name">declarativeAgenda</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">packages</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.domain.pkg1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 配置 kiesession 
            name: kiesession 名称，必须唯一
            type: kiesession 类型，可选值为 stateful 和 stateless ，默认为 stateful
                - stateful: 有状态的 kiesession ，可以在多个规则之间共享数据
                - stateless: 无状态的 kiesession ，每个规则都有自己的数据，规则之间不共享数据
            default: 是否为默认 kiesession ，默认为 false
            clockType: 时钟类型，可选值为 pseudo 和 realtime ，默认为 pseudo
                - pseudo: 伪时钟，时间不会随着规则引擎的执行而改变
                - realtime: 真实时钟，时间会随着规则引擎的执行而改变
            beliefSystem: 信任系统，可选值为 simple 和 jtms ，默认为 simple
                - simple: 简单信任系统，规则引擎会在每次执行规则之前清空所有的事实（Fact），包括事实的历史记录
                - jtms: JTMS 信任系统，规则引擎会在每次执行规则之前清空所有的事实（Fact），但是会保留事实的历史记录
        --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ksession</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>KSession2_1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stateful<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ksession</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>KSession2_2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stateless<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">beliefSystem</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jtms<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbase</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbase</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>KBase2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">eventProcessingMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stream<span class="token punctuation">&quot;</span></span> <span class="token attr-name">equalsBehavior</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>equality<span class="token punctuation">&quot;</span></span> <span class="token attr-name">declarativeAgenda</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">packages</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.domain.pkg2, org.domain.pkg3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">includes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>KBase1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ksession</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>KSession3_1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stateful<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">clockType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>realtime<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileLogger</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>drools.log<span class="token punctuation">&quot;</span></span> <span class="token attr-name">threaded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>workItemHandlers</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>workItemHandler</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.domain.WorkItemHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>workItemHandlers</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>calendars</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>calendar</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>monday<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.domain.Monday<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>calendars</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listeners</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ruleRuntimeEventListener</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.domain.RuleRuntimeListener<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>agendaEventListener</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.domain.FirstAgendaListener<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>agendaEventListener</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.domain.SecondAgendaListener<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>processEventListener</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.domain.ProcessListener<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listeners</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ksession</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbase</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kmodule</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔍 <strong>例子解析</strong>：</p><p>在上面给出的示例中，首先定义了一些关键值对，这些是用于配置 KieBases 构建过程的可选属性。例如，此示例的 <code>kmodule.xml</code> 文件定义了一个名为 <code>supersetOf</code> 的额外自定义操作符，由 <code>org.mycompany.SupersetOfEvaluatorDefinition</code> 类实现。</p><p>接下来，定义了两个 KieBases：</p><ol><li><strong>KBase1</strong>：可以从中实例化两种不同类型的 KieSessions。</li><li><strong>KBase2</strong>：只能从中实例化一种 KieSession。</li></ol><p>每个 KieBase 和 KieSession 都有其自己的特定配置，如事件处理模式、包、监听器等。</p><p>在 <code>kmodule.xml</code> 文件中，<code>kbase</code> 标签是用来定义 KieBase 的。每个 KieBase 可以有多个属性，这些属性决定了 KieBase 的行为和配置。</p><p>下面是这些属性的详细解释：</p><table><thead><tr><th>属性名</th><th>默认值</th><th>可接受的值</th><th>含义</th></tr></thead><tbody><tr><td>name</td><td>无</td><td>任何名称</td><td>这是从 KieContainer 获取此 KieBase 的名称。这是唯一必需的属性。</td></tr><tr><td>includes</td><td>无</td><td>任何逗号分隔的 KieBases 列表</td><td>这个属性列出了此 <code>kmodule</code> 中包含的其他 KieBases。所有这些 KieBases 的工件也将包含在此 KieBase 中。</td></tr><tr><td>packages</td><td>所有</td><td>任何逗号分隔的包列表</td><td>默认情况下，<code>resources</code> 文件夹下的所有 Drools 工件都会被包含在 KieBase 中。此属性允许你限制将在此 KieBase 中编译的工件，只包括属于包列表中的工件。</td></tr><tr><td>default</td><td>false</td><td>true, false</td><td>定义此 KieBase 是否为此模块的默认 KieBase，这样它可以从 KieContainer 创建，而无需传递任何名称给它。每个模块中最多只能有一个默认的 KieBase。</td></tr><tr><td>equalsBehavior</td><td>identity</td><td>identity, equality</td><td>定义当一个新事实（Fact）被插入到工作内存中时，Drools 的行为。使用 identity 时，除非工作内存中已经存在相同的对象，否则它总是创建一个新的 FactHandle，而使用 equality 时，只有当新插入的对象不等于（根据其等于方法）已经存在的事实时才会这样做。</td></tr><tr><td>eventProcessingMode</td><td>cloud</td><td>cloud, stream</td><td>当在 cloud 模式下编译时，KieBase 将事件视为正常的事实，而在 stream 模式下允许对它们进行时间推理。</td></tr><tr><td>declarativeAgenda</td><td>disabled</td><td>disabled, enabled</td><td>定义 Declarative Agenda 是否启用。</td></tr></tbody></table><p>在 <code>kmodule.xml</code> 文件中，<code>ksession</code> 标签是用来定义 KieSession 的。每个 KieSession 可以有多个属性，这些属性决定了 KieSession 的行为和配置。</p><p>下面是这些属性的详细解释：</p><table><thead><tr><th>属性名</th><th>默认值</th><th>可接受的值</th><th>含义</th></tr></thead><tbody><tr><td>name</td><td>无</td><td>任何名称</td><td>这是 KieSession 的唯一名称。你可以使用这个名称从 KieContainer 中获取 KieSession。这是唯一必需的属性。</td></tr><tr><td>type</td><td>stateful</td><td>stateful, stateless</td><td>stateful 会话允许你反复地与工作内存交互，而 stateless 会话则是使用提供的数据集对工作内存进行一次性执行。</td></tr><tr><td>default</td><td>false</td><td>true, false</td><td>定义此 KieSession 是否为此模块的默认 KieSession，这样它可以从 KieContainer 创建，而无需传递任何名称给它。每个模块中最多只能有一个默认的 KieSession。</td></tr><tr><td>clockType</td><td>realtime</td><td>realtime, pseudo</td><td>定义事件时间戳是由系统时钟确定，还是由应用程序控制的伪时钟确定。这个时钟对于单元测试时间规则特别有用。</td></tr><tr><td>beliefSystem</td><td>simple</td><td>simple, jtms, defeasible</td><td>定义 KieSession 使用的信仰系统类型。</td></tr></tbody></table><p>在前面的 <code>kmodule.xml</code> 示例中，我们看到了可以为每个 KieSession 声明性地创建文件日志记录器、一个或多个 WorkItemHandlers、日历以及三种不同类型的监听器：ruleRuntimeEventListener、agendaEventListener 和 processEventListener。</p><p>定义了类似前面示例中的 <code>kmodule.xml</code> 后，你可以简单地使用它们的名称从 KieContainer 获取 KieBases 和 KieSessions。</p><p>示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从工厂中创建 KieServices 对象</span>
<span class="token class-name">KieServices</span> kieServices <span class="token operator">=</span> <span class="token class-name">KieServices<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从 KieServices 中获取 KieContainer 对象，其会加载 kmodule.xml 文件并 load 规则文件</span>
<span class="token class-name">KieContainer</span> kieContainer <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">getKieClasspathContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 KieContainer 中获取 KieBase 对象(不提供 kBaseName 则获取默认的 KieBase)</span>
<span class="token class-name">KieBase</span> kieBase <span class="token operator">=</span> kieContainer<span class="token punctuation">.</span><span class="token function">getKieBase</span><span class="token punctuation">(</span><span class="token string">&quot;KBase1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从 KieBase 中获取 KieSession 对象(不提供 kSessionName 则获取默认的 KieSession)</span>
<span class="token comment">// 有状态的 KieSession</span>
<span class="token class-name">KieSession</span> kieSession1 <span class="token operator">=</span> kieContainer<span class="token punctuation">.</span><span class="token function">newKieSession</span><span class="token punctuation">(</span><span class="token string">&quot;KSession2_1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 无状态的 KieSession</span>
kieContainer<span class="token punctuation">.</span><span class="token function">newStatelessKieSession</span><span class="token punctuation">(</span><span class="token string">&quot;KSession2_2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!WARNING]</p><p>由于 KSession2_1 和 KSession2_2 是两种不同的类型（第一个是有状态的，而第二个是无状态的），因此需要根据它们在 kmodule.xml 中 type 属性声明的类型在 KieContainer 上调用两种不同的方法。</p></blockquote><p>如果 KieBase 和 KieSession 被 default 属性标记为默认，那么可以不传递任何名称从 KieContainer 获取它们。</p><p>示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">KieContainer</span> kContainer <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token class-name">KieBase</span> kBase1 <span class="token operator">=</span> kContainer<span class="token punctuation">.</span><span class="token function">getKieBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 KBase1</span>
<span class="token class-name">KieSession</span> kieSession1 <span class="token operator">=</span> kContainer<span class="token punctuation">.</span><span class="token function">newKieSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 KSession2_1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 Kie 项目也是一个 Maven 项目，因此在 <code>pom.xml</code> 文件中声明的 groupId、artifactId 和 version 用于生成唯一标识应用程序中的此项目的 ReleaseId。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">KieServices</span> kieServices <span class="token operator">=</span> <span class="token class-name">KieServices<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ReleaseId</span> releaseId <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newReleaseId</span><span class="token punctuation">(</span> <span class="token string">&quot;org.acme&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myartifact&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">KieContainer</span> kieContainer <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieContainer</span><span class="token punctuation">(</span> releaseId <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!ATTENTION]</p><p>从 Drools 6 开始，KieBase 和 KiePackage 不支持序列化。你需要通过 KieContainer 构建 KieBase。另一方面，KieSession 可以通过 KieMashaller 进行序列化/反序列化。</p></blockquote><h3 id="_2-3-使用-maven-构建" tabindex="-1"><a class="header-anchor" href="#_2-3-使用-maven-构建" aria-hidden="true">#</a> 2.3 使用 Maven 构建</h3><p>Maven 是一个流行的项目管理工具，它可以帮助你管理项目的生命周期，包括依赖管理、构建、测试和部署。对于 Drools，KIE 提供了一个专门的 Maven 插件，确保项目中的资源得到验证和预编译。</p><p>❓<strong>为什么使用 KIE Maven 插件？</strong></p><p>使用 KIE Maven 插件的主要好处是它确保你的 Drools 和 jBPM 资源在构建时得到正确的处理。这意味着在部署之前，任何潜在的问题或错误都会被捕获，从而减少运行时的问题。</p><p>❓<strong>如何配置 KIE Maven 插件？</strong></p><p>要使用此插件，只需在 Maven 的 pom.xml 文件的构建部分中添加它，并通过使用 kjar 打包来激活它。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>kjar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.kie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kie-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.74.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此插件支持所有的 Drools/jBPM 知识资源。但是，如果你在 Java 类中使用了特定的 KIE 注解，例如 <code>@kie.api.Position</code>，你需要在项目中添加对 kie-api 的编译时依赖。我们建议为所有额外的 KIE 依赖使用 provided 范围。这样，kjar 会保持尽可能轻量，并且不依赖于任何特定的 KIE 版本。</p><p>❓<strong>不使用 Maven 插件的后果是什么？</strong></p><p>如果不使用 Maven 插件构建 KIE 模块，所有资源将按原样复制到生成的 JAR 中。当运行时加载该 JAR 时，它会尝试构建所有资源。如果存在编译问题，它将返回一个空的 KieContainer。这也将编译开销推到运行时。总的来说，这并不推荐，应始终使用 Maven 插件。</p><h3 id="_2-4-编程方式定义-kiemodule" tabindex="-1"><a class="header-anchor" href="#_2-4-编程方式定义-kiemodule" aria-hidden="true">#</a> 2.4 编程方式定义 KieModule</h3><p>除了在 <code>kmodule.xml</code> 文件中声明性地定义 KieBases 和 KieSessions，你还可以通过编程方式来定义它们。这种方法还允许你明确地添加包含 Kie 工件的文件（如 DRL 文件），而不是自动从项目的资源文件夹中读取它们。</p><p>操作步骤：</p><ol><li><strong>创建一个 KieFileSystem</strong>：这是一个虚拟文件系统，你需要将项目中包含的所有资源添加到这个文件系统中。你可以从 KieServices 获取 KieFileSystem 的实例。</li><li><strong>添加 kmodule.xml 配置文件</strong>：这是一个必要的步骤。Kie 提供了一个方便的流畅 API，由 KieModuleModel 实现，以编程方式创建此文件。</li></ol><p>下面的示例展示了如何创建一个 KieModuleModel，如何配置它，并如何将其转换为 XML 并添加到 KieFileSystem 中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从工厂中创建 KieServices 对象</span>
<span class="token class-name">KieServices</span> kieServices <span class="token operator">=</span> <span class="token class-name">KieServices<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建 KieModuleModel 对象</span>
<span class="token class-name">KieModuleModel</span> kieModuleModel <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieModuleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 KieModuleModel 创建 KieBaseModel 对象</span>
<span class="token class-name">KieBaseModel</span> kieBaseModel <span class="token operator">=</span> kieModuleModel<span class="token punctuation">.</span><span class="token function">newKieBaseModel</span><span class="token punctuation">(</span><span class="token string">&quot;KBase1&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setDefault</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 设置为默认的 KieBase</span>
        <span class="token punctuation">.</span><span class="token function">setEqualsBehavior</span><span class="token punctuation">(</span><span class="token class-name">EqualityBehaviorOption</span><span class="token punctuation">.</span><span class="token constant">EQUALITY</span><span class="token punctuation">)</span> <span class="token comment">// 设置 KieBase 的 equals 行为</span>
        <span class="token punctuation">.</span><span class="token function">setEventProcessingMode</span><span class="token punctuation">(</span><span class="token class-name">EventProcessingOption</span><span class="token punctuation">.</span><span class="token constant">STREAM</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 KieBase 的事件处理模式</span>

<span class="token comment">// 通过 KieBaseModel 创建 KieSessionModel 对象</span>
<span class="token class-name">KieSessionModel</span> kieSessionModel <span class="token operator">=</span> kieBaseModel<span class="token punctuation">.</span><span class="token function">newKieSessionModel</span><span class="token punctuation">(</span><span class="token string">&quot;KSession1&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setDefault</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 设置为默认的 KieSession</span>
        <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">KieSessionModel<span class="token punctuation">.</span>KieSessionType</span><span class="token punctuation">.</span><span class="token constant">STATEFUL</span><span class="token punctuation">)</span> <span class="token comment">// 设置 KieSession 的类型</span>
        <span class="token punctuation">.</span><span class="token function">setClockType</span><span class="token punctuation">(</span><span class="token class-name">ClockTypeOption</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;realtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 KieSession 的时钟类型</span>

<span class="token comment">// 通过 KieServices 创建 KieFileSystem 对象（虚拟文件系统）</span>
<span class="token class-name">KieFileSystem</span> kieFileSystem <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将 KieModuleModel 转换成 XML 文件后存入虚拟文件系统</span>
kieFileSystem<span class="token punctuation">.</span><span class="token function">writeKModuleXML</span><span class="token punctuation">(</span>kieModuleModel<span class="token punctuation">.</span><span class="token function">toXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述操作，你还需要通过其流畅的 API 将所有其他组成你的项目的 Kie 工件添加到 KieFileSystem 中。这些工件应该添加到与常规 Maven 项目相对应的位置。</p><p>示例代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">KieFileSystem</span> kfs <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
kfs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token string">&quot;src/main/resources/KBase1/ruleSet1.drl&quot;</span><span class="token punctuation">,</span> stringContainingAValidDRL <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token string">&quot;src/main/resources/dtable.xls&quot;</span><span class="token punctuation">,</span>
            kieServices<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInputStreamResource</span><span class="token punctuation">(</span> dtableFileStream <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!TIP]</p><p>你可以将 Kie 工件以纯字符串或 Resource 的形式添加。在后一种情况下，Resource 可以由 KieResources 工厂创建，这也是由 KieServices 提供的。KieResources 提供了许多方便的工厂方法，可以将 InputStream、URL、File 或 String 转换为 KieFileSystem 可以管理的 Resource。</p></blockquote><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-135131.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在添加资源到 KieFileSystem 时，通常可以从资源名称的扩展名推断出资源的类型（如 .drl 或 .xls）。但是，如果你不遵循 Kie 关于文件扩展名的约定，你也可以明确地为资源分配特定的 ResourceType。</p><p>例如，你有一个名为 myDrl.txt 的文件，但你希望它被识别为 DRL 类型的资源：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">KieFileSystem</span> kfs <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
kfs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> <span class="token string">&quot;src/main/resources/myDrl.txt&quot;</span><span class="token punctuation">,</span>
           kieServices<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInputStreamResource</span><span class="token punctuation">(</span> drlStream <span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">setResourceType</span><span class="token punctuation">(</span><span class="token class-name">ResourceType</span><span class="token punctuation">.</span><span class="token constant">DRL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将所有资源添加到 KieFileSystem 后，通过将 KieFileSystem 传递给 KieBuilder 来构建它。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-135606.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>成功构建 KieFileSystem 的内容后，生成的 KieModule 会自动添加到 KieRepository 中。KieRepository 是一个单例，作为所有可用 KieModules 的存储库。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-09-135700.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>之后，你可以通过 KieServices 为该 KieModule 创建一个新的 KieContainer，使用其 ReleaseId。但是，在这种情况下，由于 KieFileSystem 不包含任何 pom.xml 文件（可以使用 KieFileSystem.writePomXML 方法添加一个），Kie 无法确定 KieModule 的 ReleaseId 并为其分配一个默认值。这个默认的 ReleaseId 可以从 KieRepository 获取，并用于在 KieRepository 本身中标识 KieModule。</p><p>以下示例展示了整个过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">KieServices</span> kieServices <span class="token operator">=</span> <span class="token class-name">KieServices<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">KieFileSystem</span> kfs <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
kieServices<span class="token punctuation">.</span><span class="token function">newKieBuilder</span><span class="token punctuation">(</span>kfs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">KieContainer</span> kieContainer <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieContainer</span><span class="token punctuation">(</span>kieServices<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultReleaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，你可以从这个 KieContainer 获取 KieBases 并创建新的 KieSessions，就像直接从类路径创建的 KieContainer 一样。</p><p>当你使用 Drools 进行项目编译时，确保检查编译结果是非常重要的。这不仅可以帮助你确保规则正确无误，还可以确保你的应用程序在运行时不会遇到任何预期之外的问题。</p><p>KieBuilder 提供了三种不同的编译结果严重性级别：</p><ul><li><strong>ERROR</strong>：这表示项目编译失败了。当出现这种错误时，不会产生任何 KieModule，并且 KieRepository 中也不会添加任何内容。</li><li><strong>WARNING</strong>：这些是潜在的问题，可能不会立即影响你的应用程序，但建议你查看并解决它们。</li><li><strong>INFO</strong>：这些只是一般的信息消息，通常可以忽略。</li></ul><p>在编译项目后，你可以通过以下方式检查是否有任何错误：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">KieBuilder</span> kieBuilder <span class="token operator">=</span> kieServices<span class="token punctuation">.</span><span class="token function">newKieBuilder</span><span class="token punctuation">(</span>kfs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> kieBuilder<span class="token punctuation">.</span><span class="token function">getResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessages</span><span class="token punctuation">(</span><span class="token class-name">Message<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码首先使用 KieBuilder 对项目进行编译。然后，它检查编译结果中是否有任何 ERROR 级别的消息。如果有，assertEquals 会失败，这意味着你需要检查并修复这些错误。</p><h3 id="_2-5-调整默认构建结果的严重性" tabindex="-1"><a class="header-anchor" href="#_2-5-调整默认构建结果的严重性" aria-hidden="true">#</a> 2.5 调整默认构建结果的严重性</h3><p>在 Drools 规则引擎中，当你进行项目构建时，可能会遇到各种结果，如错误、警告或信息。默认情况下，每种类型的结果都有一个预设的严重性级别。但在某些情况下，你可能希望调整这些默认设置。</p><p>考虑一个常见的场景：当你向一个包中添加一个新规则，而这个新规则的名称与现有规则相同时，Drools 的默认行为是用新规则替换旧规则，并将此行为报告为信息（INFO）。这可能适用于大多数使用场景，但在某些部署中，用户可能希望阻止规则更新并将其报告为错误。</p><p>Drools 提供了多种方法来调整默认的严重性设置，包括 API 调用、系统属性或配置文件。</p><p>例如，要通过系统属性或配置文件配置它，你可以使用以下属性：</p><ul><li><p>规则更新的严重性：如果你希望更改规则更新的默认严重性，可以使用以下属性。你可以选择 INFO、WARNING 或 ERROR 中的一个作为值。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">drools.kbuilder.severity.duplicateRule</span> <span class="token punctuation">=</span> <span class="token value attr-value">&lt;INFO|WARNING|ERROR&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>函数更新的严重性：如果你希望更改函数更新的默认严重性，可以使用以下属性。同样，你可以选择 INFO、WARNING 或 ERROR 中的一个作为值。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">drools.kbuilder.severity.duplicateFunction</span> <span class="token punctuation">=</span> <span class="token value attr-value">&lt;INFO|WARNING|ERROR&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>如果你使用的是配置文件（例如，一个特定于应用的配置文件或 drools.properties 文件），你可以在其中添加上述属性和相应的值。例如：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">drools.kbuilder.severity.duplicateRule</span><span class="token punctuation">=</span><span class="token value attr-value">ERROR</span>
<span class="token key attr-name">drools.kbuilder.severity.duplicateFunction</span><span class="token punctuation">=</span><span class="token value attr-value">WARNING</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你希望在代码中或在启动应用时设置这些属性，你可以使用系统属性来实现。这通常是通过 JVM 参数在应用启动时设置的，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Ddrools.kbuilder.severity.duplicateRule</span><span class="token operator">=</span>ERROR <span class="token parameter variable">-Ddrools.kbuilder.severity.duplicateFunction</span><span class="token operator">=</span>WARNING
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，你也可以在 Java 代码中设置这些属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;drools.kbuilder.severity.duplicateRule&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ERROR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;drools.kbuilder.severity.duplicateFunction&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WARNING&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>总之，你可以选择在配置文件中设置这些属性，或者直接在代码中或应用启动时使用系统属性来设置。选择哪种方法取决于你的具体需求和你的应用的配置方式。</p><h2 id="_3-部署-deploying" tabindex="-1"><a class="header-anchor" href="#_3-部署-deploying" aria-hidden="true">#</a> 3.部署（Deploying）</h2><h3 id="_3-1-kiebase" tabindex="-1"><a class="header-anchor" href="#_3-1-kiebase" aria-hidden="true">#</a> 3.1 KieBase</h3><h3 id="_3-2-修改-kiesessions-和-kiebase" tabindex="-1"><a class="header-anchor" href="#_3-2-修改-kiesessions-和-kiebase" aria-hidden="true">#</a> 3.2 修改 KieSessions 和 KieBase</h3><h3 id="_3-3-kiescanner" tabindex="-1"><a class="header-anchor" href="#_3-3-kiescanner" aria-hidden="true">#</a> 3.3 KieScanner</h3><h3 id="_3-4-maven-版本和依赖项" tabindex="-1"><a class="header-anchor" href="#_3-4-maven-版本和依赖项" aria-hidden="true">#</a> 3.4 Maven 版本和依赖项</h3><h3 id="_3-5-settings-xml-和远程存储库设置" tabindex="-1"><a class="header-anchor" href="#_3-5-settings-xml-和远程存储库设置" aria-hidden="true">#</a> 3.5 Settings.xml 和远程存储库设置</h3><h2 id="_4-运行-running" tabindex="-1"><a class="header-anchor" href="#_4-运行-running" aria-hidden="true">#</a> 4.运行（Running）</h2><h3 id="_4-1-kiebase" tabindex="-1"><a class="header-anchor" href="#_4-1-kiebase" aria-hidden="true">#</a> 4.1 KieBase</h3><h3 id="_4-2-kiesession" tabindex="-1"><a class="header-anchor" href="#_4-2-kiesession" aria-hidden="true">#</a> 4.2 KieSession</h3><h3 id="_4-3-kieruntime" tabindex="-1"><a class="header-anchor" href="#_4-3-kieruntime" aria-hidden="true">#</a> 4.3 KieRuntime</h3><h3 id="_4-4-事件模型" tabindex="-1"><a class="header-anchor" href="#_4-4-事件模型" aria-hidden="true">#</a> 4.4 事件模型</h3><h3 id="_4-5-kieruntimelogger" tabindex="-1"><a class="header-anchor" href="#_4-5-kieruntimelogger" aria-hidden="true">#</a> 4.5 KieRuntimeLogger</h3><h3 id="_4-6-命令和-commandexecutor" tabindex="-1"><a class="header-anchor" href="#_4-6-命令和-commandexecutor" aria-hidden="true">#</a> 4.6 命令和 CommandExecutor</h3><h3 id="_4-7-无状态-kiesession" tabindex="-1"><a class="header-anchor" href="#_4-7-无状态-kiesession" aria-hidden="true">#</a> 4.7 无状态 KieSession</h3><h3 id="_4-8-marshalling" tabindex="-1"><a class="header-anchor" href="#_4-8-marshalling" aria-hidden="true">#</a> 4.8 Marshalling</h3><h3 id="_4-9-持久化和事务" tabindex="-1"><a class="header-anchor" href="#_4-9-持久化和事务" aria-hidden="true">#</a> 4.9 持久化和事务</h3><h2 id="_5-安装和部署备忘单" tabindex="-1"><a class="header-anchor" href="#_5-安装和部署备忘单" aria-hidden="true">#</a> 5.安装和部署备忘单</h2><h2 id="_6-使用示例" tabindex="-1"><a class="header-anchor" href="#_6-使用示例" aria-hidden="true">#</a> 6.使用示例</h2><h2 id="_7-可执行的规则模型" tabindex="-1"><a class="header-anchor" href="#_7-可执行的规则模型" aria-hidden="true">#</a> 7.可执行的规则模型</h2><h2 id="_8-使用-kiescanner-监控和更新-kiecontainers" tabindex="-1"><a class="header-anchor" href="#_8-使用-kiescanner-监控和更新-kiecontainers" aria-hidden="true">#</a> 8.使用 KieScanner 监控和更新 KieContainers</h2>`,120);function k(m,v){const e=p("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("其中，我们主要介绍的是 Drools 部分，对其他部分感兴趣的请自行在官网了解："),n("a",r,[s("https://www.drools.org/"),c(e)])]),d])}const K=t(l,[["render",k],["__file","01-KIE入门.html.vue"]]);export{K as default};
