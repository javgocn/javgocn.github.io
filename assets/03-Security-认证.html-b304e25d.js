import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-009ef08a.js";const e={},o=t(`<h2 id="_1-整体架构" tabindex="-1"><a class="header-anchor" href="#_1-整体架构" aria-hidden="true">#</a> 1.整体架构</h2><p>Spring Security 是 Java 开发者的首选框架，为 Web 应用程序提供了全面的身份验证和授权支持。在本文中，我们将从深入探讨其背后的 Servlet 身份验证架构原理开始。</p><p>在开始之前，我们需要明确一点：本节的目的是为您提供一个高层次的、抽象的视角，让您了解身份验证的整体架构，而不是深入到具体的实现细节。</p><p>以下是 Spring Security 在 Servlet 身份验证中使用的主要架构组件：</p><table><thead><tr><th>组件</th><th>描述</th></tr></thead><tbody><tr><td>SecurityContextHolder</td><td>Spring Security 存储已认证用户详细信息的地方</td></tr><tr><td>SecurityContext</td><td>从 SecurityContextHolder 获取，并包含当前已认证用户的 <code>Authentication</code> 信息</td></tr><tr><td>Authentication</td><td>可以作为 <code>AuthenticationManager</code> 的输入，提供用户提供的凭据（一般是密码）进行身份验证，或者从 <code>SecurityContext</code> 获取当前用户信息</td></tr><tr><td>GrantedAuthority</td><td>授予 <code>Authentication</code> 主体的权限，例如角色、范围等</td></tr><tr><td>AuthenticationManager</td><td>定义了 Spring Security 的过滤器如何执行身份验证的 API</td></tr><tr><td>ProviderManager</td><td><code>AuthenticationManager</code> 的最常见实现</td></tr><tr><td>AuthenticationProvider</td><td>由 <code>ProviderManager</code> 使用，执行特定类型的身份验证</td></tr><tr><td>AuthenticationEntryPoint</td><td>用于从客户端请求凭据，例如重定向到登录页面或发送 <code>WWW-Authenticate</code> 响应等</td></tr><tr><td>AbstractAuthenticationProcessingFilter</td><td>用于身份验证的基础过滤器。它也很好地展示了身份验证的高级流程以及各个组件如何协同工作</td></tr></tbody></table><p>Spring Security 提供了一个强大而灵活的身份验证架构，通过了解其背后的核心组件和它们如何互相协作，您将更好地理解如何利用这个框架来满足您的安全需求。</p><h3 id="_1-1-securitycontextholder" tabindex="-1"><a class="header-anchor" href="#_1-1-securitycontextholder" aria-hidden="true">#</a> 1.1 SecurityContextHolder</h3><p>🤔 什么是 SecurityContextHolder？</p><p><code>SecurityContextHolder</code> 是一个特殊的对象，用于<strong>存储与当前执行线程相关的安全上下文</strong>信息，即 <code>SecurityContext</code>。这个上下文包含了关于<strong>当前用户的所有信息</strong>，包括他们的<strong>凭证</strong>和授予的<strong>角色</strong>。</p><p>🤔 如何使用 SecurityContextHolder？</p><p>Spring Security 本身并不关心 <code>SecurityContextHolder</code> 是如何被填充的。但如果它包含一个值，Spring Security 会将其视为当前已认证的用户。下面是一个简单的示例，展示了如何手动设置 <code>SecurityContextHolder</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 从 SecurityContextHolder 中获取与当前执行线程相关的安全上下文（SecurityContext）</span>
<span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 创建一个认证对象，传入：用户名、凭证、角色</span>
<span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestingAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ROLE_USER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 将 Authentication 设置到 SecurityContext</span>
context<span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 SecurityContext 设置到 SecurityContextHolder</span>
<span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中：</p><ol><li>我们首先创建了一个空的 <code>SecurityContext</code>。为了避免在多线程环境中出现竞态条件，创建新的 <code>SecurityContext</code> 实例是很重要的，而不是直接使用 <code>SecurityContextHolder.getContext().setAuthentication(authentication)</code>。</li><li>接下来，我们创建了一个新的 <code>Authentication</code> 对象。Spring Security 并不关心 <code>SecurityContext</code> 上设置的 <code>Authentication</code> 实现的具体类型。在这里，我们使用了 <code>TestingAuthenticationToken</code>，因为它非常简单。在生产环境中，更常见的是使用 <code>UsernamePasswordAuthenticationToken(userDetails, password, authorities)</code>。</li><li>最后，我们将 <code>SecurityContext</code> 设置到 <code>SecurityContextHolder</code> 上。此后，Spring Security 将使用这些信息进行授权。</li></ol><p><code>SecurityContextHolder</code> 是 Spring Security 中非常重要的一个组件，它为开发者提供了一个方便的方式来存储和检索关于当前用户的安全上下文。理解它的工作原理和如何使用它，对于构建安全的 Spring 应用程序至关重要。</p><p>🤔 如何获取当前已验证的用户信息？</p><p>要获取当前已验证的用户的信息，您可以使用以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取当前的 SecurityContext</span>
<span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 SecurityContext 中获取 Authentication 对象</span>
<span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取用户名</span>
<span class="token class-name">String</span> username <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取主体对象，通常是一个 UserDetails 对象</span>
<span class="token class-name">Object</span> principal <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取用户的权限集合</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🤔 SecurityContextHolder 的存储策略是怎样的？</p><p>默认情况下，<code>SecurityContextHolder</code> 使用 <code>ThreadLocal</code> 来存储安全上下文，这意味着在同一线程中，无论何时，您都可以访问 <code>SecurityContext</code>，即使您没有将其明确传递为方法参数。只要在处理请求后清除线程，使用 <code>ThreadLocal</code> 就是安全的。Spring Security 的 <code>FilterChainProxy</code> 确保 <code>SecurityContext</code> 在请求结束后被清除。</p><p>但是，某些应用程序可能不适合使用 <code>ThreadLocal</code>，因为它们可能以特定的方式使用线程。例如，Swing 客户端可能希望 JVM 中的所有线程共享相同的安全上下文。为了满足这些需求，<code>SecurityContextHolder</code> 提供了不同的存储策略：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-050310.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>MODE_GLOBAL</strong>：所有线程共享一个全局的 <code>SecurityContext</code>。</li><li><strong>MODE_INHERITABLETHREADLOCAL</strong>：安全线程创建的子线程将继承其 <code>SecurityContext</code>。</li><li><strong>MODE_THREADLOCAL</strong>（默认）：每个线程都有其自己的 <code>SecurityContext</code>。</li></ul><p>要更改默认的存储策略，您可以<strong>设置系统属性</strong>或调用 <code>SecurityContextHolder</code> 上的静态方法 <code>setStrategyName(String strategyName)</code>。</p><blockquote><p>大多数应用程序不需要更改默认策略，但如果您需要进行更改，请查阅 <code>SecurityContextHolder</code> 的 Javadoc 以获取更多详细信息。</p></blockquote><h3 id="_1-2-securitycontext" tabindex="-1"><a class="header-anchor" href="#_1-2-securitycontext" aria-hidden="true">#</a> 1.2 SecurityContext</h3><p><code>SecurityContext</code> 是 Spring Security 中的一个接口，它用于存储与当前线程相关的安全凭据（<code>Authentication</code>）。它的主要职责是持有一个 <code>Authentication</code> 对象，该对象代表了当前用户的身份验证信息。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-050744.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>您可以使用 <code>SecurityContextHolder</code> 来获取当前线程的 <code>SecurityContext</code>。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦您从 <code>SecurityContextHolder</code> 获取了 <code>SecurityContext</code>，您可以轻松访问 <code>Authentication</code> 对象以及与之关联的其他信息。例如，要获取当前用户的用户名：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> username <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️ 注意：虽然 <code>SecurityContext</code> 提供了对当前用户的详细信息的访问，但您应该避免直接修改它，除非您确切知道自己在做什么。任何更改都可能影响应用程序的安全性。</p></blockquote><h3 id="_1-3-authentication" tabindex="-1"><a class="header-anchor" href="#_1-3-authentication" aria-hidden="true">#</a> 1.3 Authentication</h3><p>在 Spring Security 中，身份验证（<code>Authentication</code>）扮演着至关重要的角色，它主要有以下两个用途：</p><ol><li>作为 <code>AuthenticationManager</code> 的输入，提供用户提供的凭据以进行身份验证。在这种情境下，<code>isAuthenticated()</code> 方法返回 <code>false</code>。</li><li>代表当前已经经过身份验证的用户。当前的 <code>Authentication</code> 可以从 <code>SecurityContext</code> 中获取。</li></ol><p>身份验证（<code>Authentication</code>）包含以下内容：</p><ul><li><strong>主体（Principal）</strong>：标识用户。当使用用户名/密码进行身份验证时，这通常是 <code>UserDetails</code> 的一个实例。</li><li><strong>凭据（Credentials）</strong>：通常是密码。在许多情况下，一旦用户被验证，为确保不会泄露，这些凭据会被清除。</li><li><strong>权限（Authorities）</strong>：这些是授予用户的高级权限。一些常见的例子包括角色（roles）或范围（scopes）。</li></ul><p>对应源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Authentication 接口定义了 Spring Security 中身份验证对象的核心结构。
 * 它继承了 Principal 和 Serializable 接口，确保身份验证对象可以被序列化。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Authentication</span> <span class="token keyword">extends</span> <span class="token class-name">Principal</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 获取与此身份验证相关的权限集合。
     * 这些权限通常代表了用户的角色或其他相关权限。
     *
     * <span class="token keyword">@return</span> 代表用户权限的集合
     */</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取与此身份验证相关的凭据，通常是密码或其他秘密信息。
     * 出于安全原因，身份验证成功后，这些凭据通常会被清除。
     *
     * <span class="token keyword">@return</span> 用户的凭据
     */</span>
    <span class="token class-name">Object</span> <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取与此身份验证相关的详细信息。
     * 这些详细信息可以是任何与身份验证请求相关的额外信息，例如 IP 地址、会话 ID 等。
     *
     * <span class="token keyword">@return</span> 身份验证的详细信息
     */</span>
    <span class="token class-name">Object</span> <span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取代表用户的主体对象。
     * 当使用用户名/密码进行身份验证时，这通常是 UserDetails 的一个实例。
     *
     * <span class="token keyword">@return</span> 代表用户的主体对象
     */</span>
    <span class="token class-name">Object</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 检查此身份验证是否已经完成。
     *
     * <span class="token keyword">@return</span> 如果用户已经通过身份验证，则为 true，否则为 false
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 设置此身份验证的状态。
     * 注意：此方法的调用者负责确保此身份验证仅在安全上下文中正确地设置。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">isAuthenticated</span> 身份验证的状态
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> 如果尝试将身份验证设置为未完成
     */</span>
    <span class="token keyword">void</span> <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面涉及到的 <code>UserDetails</code> 是 Spring Security 中的一个核心接口，用于<strong>获取用户的认证和授权信息</strong>。这个接口提供了一种方法来暴露有关用户的核心信息，如<strong>用户名、密码、权限等</strong>。通常，当我们从数据库或其他数据源加载用户信息时，我们会实现这个接口。</p><p>以下是 <code>UserDetails</code> 接口中的方法及其描述：</p><table><thead><tr><th>方法</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>getAuthorities()</td><td>Collection&lt;? extends GrantedAuthority&gt;</td><td>获取与用户关联的所有权限。这些权限是用于授权决策的。</td></tr><tr><td>getPassword()</td><td>String</td><td>获取用户的密码。这用于认证过程中与提供的凭据进行比较。</td></tr><tr><td>getUsername()</td><td>String</td><td>获取用户的用户名。这是用户的主要标识符。</td></tr><tr><td>isAccountNonExpired()</td><td>boolean</td><td>指示用户的帐户是否已过期。一个过期的帐户不能被认证。</td></tr><tr><td>isAccountNonLocked()</td><td>boolean</td><td>指示用户的帐户是否被锁定。一个锁定的帐户不能被认证。</td></tr><tr><td>isCredentialsNonExpired()</td><td>boolean</td><td>指示用户的凭据（密码）是否已过期。过期的凭据阻止认证。</td></tr><tr><td>isEnabled()</td><td>boolean</td><td>指示用户是否启用或禁用。禁用的用户不能被认证。</td></tr></tbody></table><p>当你实现 <code>UserDetails</code> 接口时，你可以根据你的应用程序的需求为这些方法提供具体的实现。例如，你可能会从数据库中检索相关的用户信息，并基于这些信息返回适当的值。</p><p><code>User</code> 是 <code>UserDetails</code> 接口的一个具体实现，它是 Spring Security 提供的。这个类包含了一些基本的属性，如用户名、密码和权限，以及一些用于描述用户状态的属性，如是否启用、帐户是否过期等。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-053117.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>User</code> 类的主要构造函数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">,</span> <span class="token keyword">boolean</span> accountNonExpired<span class="token punctuation">,</span>
    <span class="token keyword">boolean</span> credentialsNonExpired<span class="token punctuation">,</span> <span class="token keyword">boolean</span> accountNonLocked<span class="token punctuation">,</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Cannot pass null or empty values to constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> enabled<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>accountNonExpired <span class="token operator">=</span> accountNonExpired<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>credentialsNonExpired <span class="token operator">=</span> credentialsNonExpired<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>accountNonLocked <span class="token operator">=</span> accountNonLocked<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>authorities <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableSet</span><span class="token punctuation">(</span><span class="token function">sortAuthorities</span><span class="token punctuation">(</span>authorities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们要为一个用户创建一个 <code>UserDetails</code> 对象，该用户有两个角色：<code>ROLE_USER</code> 和 <code>ROLE_ADMIN</code>，并且该用户是启用的、帐户未过期的、凭据未过期的、帐户未锁定的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsExample</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建权限列表，SimpleGrantedAuthority 是 GrantedAuthority 的基本实现，存储授予 Authentication 对象的权限的字符串表示形式</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_USER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_ADMIN&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 使用 User 类创建 UserDetails 对象</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出 UserDetails 信息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Username: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Password: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Authorities: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Account Non Expired: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Account Non Locked: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Credentials Non Expired: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enabled: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，这只是一个简单的示例，实际应用中，你可能会从数据库或其他数据源加载用户信息，并使用这些信息创建 <code>UserDetails</code> 对象。</p><p>除了上面的创建方式，Spring Security 还提供了 <code>User</code> 类的一个内部静态类 <code>User.UserBuilder</code>，它提供了一种流畅的方式来构建 <code>UserDetails</code> 对象。以下是主要的方法：</p><ol><li><code>User.withUsername(String username)</code>：设置用户名。</li><li><code>User.withPassword(String password)</code>：设置密码。</li><li><code>User.withAuthorities(Collection&lt;? extends GrantedAuthority&gt; authorities)</code>：设置权限。</li><li><code>User.withDefaultPasswordEncoder()</code>：设置默认的密码编码器。</li></ol><p>示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBuilderExample</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建权限列表</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_USER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_ADMIN&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 使用 UserBuilder 创建 UserDetails 对象</span>
        <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span>authorities<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accountExpired</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">accountLocked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">credentialsExpired</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出 UserDetails 信息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Username: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Password: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Authorities: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Account Non Expired: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Account Non Locked: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Credentials Non Expired: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enabled: &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️ 注意：在实际生产环境中，不建议使用 <code>withDefaultPasswordEncoder()</code>，因为它使用的是不安全的密码编码器。在实际应用中，应该使用更安全的密码编码器，如 <code>BCryptPasswordEncoder</code>。</p></blockquote><h3 id="_1-4-grantedauthority" tabindex="-1"><a class="header-anchor" href="#_1-4-grantedauthority" aria-hidden="true">#</a> 1.4 GrantedAuthority</h3><p>在 Spring Security 中，<code>GrantedAuthority</code> 是一个核心概念，它代表了<strong>授予用户的权限</strong>。这些权限可以是<strong>角色</strong>、<strong>权限</strong>或其他自定义的标识符，用于<strong>决定用户可以访问哪些资源或执行哪些操作</strong>。</p><ol><li><p><strong>获取 GrantedAuthority：</strong></p><p>通过 <code>Authentication.getAuthorities()</code> 方法，我们可以获取到与当前用户关联的所有 <code>GrantedAuthority</code>。这个方法返回一个 <code>GrantedAuthority</code> 对象的集合，每个对象都代表了用户被授予的一个特定权限。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-051759.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>角色与权限：</strong></p><p>在许多情况下，<code>GrantedAuthority</code> 通常表示为 “角色”，例如 <code>ROLE_ADMINISTRATOR</code> 或 <code>ROLE_HR_SUPERVISOR</code>。这些角色可以进一步用于配置 Web 授权、方法授权和域对象授权。当 Spring Security 进行授权决策时，它会检查用户的 <code>GrantedAuthority</code>，确保用户具有访问特定资源的适当权限。</p></li><li><p><strong>如何加载 GrantedAuthority：</strong></p><p>当使用基于用户名/密码的身份验证时，<code>GrantedAuthority</code> 通常由 <code>UserDetailsService</code> 加载，它根据用户的身份提供相关的权限。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-052432.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>应用程序范围的权限：</strong></p><p>在 Spring Security 的上下文中，通常有两种权限的概念：</p><ul><li><strong>应用程序范围的权限</strong>：这些是通常的权限，例如 “读取”、“写入” 或特定的角色，如 “管理员” 或 “用户”。这些权限是全局的，适用于应用程序的所有用户和所有资源。</li><li><strong>域对象的权限</strong>：这些权限是特定于某个对象或资源的。例如，考虑一个员工管理系统，其中每个员工都是一个 “域对象”。在这种情况下，特定于域对象的权限可能是 “读取员工编号为 54 的信息” 或 “编辑员工编号为 101 的薪水”。</li></ul><p>现在，<code>GrantedAuthority</code> 通常用于表示前者（应用程序范围的权限）。如果我们尝试使用 <code>GrantedAuthority</code> 来表示后者（域对象的权限），并为每个单独的域对象（例如每个员工）创建一个 <code>GrantedAuthority</code>，那么在有大量员工的系统中，这将导致大量的 <code>GrantedAuthority</code> 对象。这不仅会消耗大量的内存，还可能导致性能问题，因为每次进行权限检查时，系统都必须遍历这些对象。</p><p>为了解决这个问题，Spring Security 提供了一个特定的功能，称为 “域对象安全” 或 “ACL（访问控制列表）”。这允许我们为特定的域对象定义细粒度的权限，而不是为每个对象创建一个新的 <code>GrantedAuthority</code>。这种方法更加高效，可以避免上述问题。</p></li></ol><h3 id="_1-5-authenticationmanager" tabindex="-1"><a class="header-anchor" href="#_1-5-authenticationmanager" aria-hidden="true">#</a> 1.5 AuthenticationManager</h3><p>在 Spring Security 中，身份验证的核心是 <code>AuthenticationManager</code> 接口。它定义了如何验证用户的身份，即如何确保用户是他们声称的那个人。</p><p><code>AuthenticationManager</code> 的主要职责是验证用户的身份。当用户尝试登录时，他们提供一些证据来证明他们是谁，通常是用户名和密码。<code>AuthenticationManager</code> 负责验证这些证据。</p><p>当验证成功时，<code>AuthenticationManager</code> 返回一个完全填充的 <code>Authentication</code> 对象，这表示用户已经成功登录。这个对象可以被其他部分的应用程序使用，例如为特定用户提供特定的内容或执行特定的业务逻辑。</p><p>这都是由 <code>AuthenticationManager</code> 的核心方法 <code>authenticate</code> 完成的，源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationManager</span> <span class="token punctuation">{</span>
	<span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🤔 那么，它如何与 Spring Security 的 Filters 集成呢？</p><p>Spring Security 的过滤器链中，一旦用户的身份得到验证，<code>Authentication</code> 对象就会被设置在 <code>SecurityContextHolder</code> 上。这意味着，应用程序的其他部分可以轻松地访问当前登录用户的详细信息。</p><p>但是，如果您的应用程序没有使用 Spring Security 的默认过滤器，您仍然可以手动设置 <code>SecurityContextHolder</code>。这在某些高级用例中可能会很有用，例如当您有自定义的身份验证流程或与第三方身份验证服务集成时。</p><p>🤔 AuthenticationManager#authenticate 方法由谁实现？</p><p>虽然 <code>AuthenticationManager</code> 可以有多种实现，但 <code>ProviderManager</code> 是最常见的一种：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-054349.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>它<strong>不直接处理身份验证</strong>，而是<strong>委托给一系列的 <code>AuthenticationProvider</code> 实例，每个实例都知道如何处理特定类型的身份验证</strong>。例如，一个 <code>AuthenticationProvider</code> 可能知道如何验证用户名和密码，而另一个可能知道如何验证 API 令牌。</p><p>这种模块化的方法使得 <code>ProviderManager</code> 能够很容易地支持多种身份验证方法，而不需要修改核心代码。</p><h3 id="_1-6-providermanager-身份验证的多样性" tabindex="-1"><a class="header-anchor" href="#_1-6-providermanager-身份验证的多样性" aria-hidden="true">#</a> 1.6 ProviderManager：身份验证的多样性</h3><p>在 Spring Security 的身份验证体系中，<code>ProviderManager</code> 扮演着核心的角色。它是 <code>AuthenticationManager</code> 的一个常见实现，但它的工作方式与其他实现有所不同。<code>ProviderManager</code> 不直接处理身份验证，而是将这个任务委托给一系列的 <code>AuthenticationProvider</code> 实例。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-054751.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对应的示意图如下：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-060122.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当一个身份验证请求到达 <code>ProviderManager</code> 时，它会遍历其配置的 <code>AuthenticationProvider</code> 列表，询问每个提供者是否可以处理这个请求。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-054918.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这是一个链式的处理过程：</p><ul><li><p>如果一个 <code>AuthenticationProvider</code> 确定它可以验证请求，并且验证成功，那么身份验证过程就此结束。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-055141.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>如果 <code>AuthenticationProvider</code> 无法验证请求，它会简单地跳过，允许下一个提供者尝试。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-055016.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>如果所有的 <code>AuthenticationProvider</code> 都不能处理请求，<code>ProviderManager</code> 会抛出一个 <code>ProviderNotFoundException</code>。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-055311.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><p>这种设计的优势在于其模块化和灵活性。每个 <code>AuthenticationProvider</code> 都是专门为处理特定类型的身份验证设计的。例如：</p><ul><li>一个 <code>AuthenticationProvider</code> 可能专门处理基于用户名和密码的身份验证。</li><li>另一个 <code>AuthenticationProvider</code> 可能处理基于 SAML 或 OAuth2 的身份验证。</li></ul><p>这意味着，当应用程序的身份验证需求发生变化时，只需添加、删除或修改 <code>AuthenticationProvider</code>，而不必更改 <code>ProviderManager</code> 或其他部分的代码。</p><blockquote><p>📒 Note：</p><p><code>ProviderManager</code> 提供了一种高度模块化和可扩展的方式来处理身份验证。通过将身份验证任务委托给一系列的 <code>AuthenticationProvider</code>，它能够支持多种身份验证方法，同时为开发者提供了一个统一、简洁的 API。这种设计确保了 Spring Security 的灵活性和强大性，使其能够满足各种复杂的身份验证需求。</p></blockquote><p>😎 如果你足够细心，想必已经在源码中看到并抛出了一个疑问：<strong>为什么 ProviderManager 中维护了一个 AuthenticationManager？</strong></p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-055733.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Spring Security 的 <code>ProviderManager</code> 不仅提供了一种模块化的方式来处理身份验证，还提供了额外的功能，如<strong>父级身份验证和凭据管理</strong>，以增强其灵活性和安全性。</p><p>也就是说，除了其内部的 <code>AuthenticationProvider</code> 列表，<code>ProviderManager</code> 还允许配置一个<strong>可选</strong>的父级 <code>AuthenticationManager</code>，它通常是 <code>ProviderManager</code> 的一个实例。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-060114.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这意味着，如果所有内部的 <code>AuthenticationProvider</code> 都不能处理身份验证请求，<code>ProviderManager</code> 会转而询问其父级 <code>AuthenticationManager</code> 而不是直接抛出一个 <code>ProviderNotFoundException</code>。</p><p>在 <code>authenticate</code> 源码中的关键部分如下：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-060607.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这种设计提供了额外的灵活性，特别是在以下情况：</p><p><strong>共享身份验证逻辑</strong>：多个 <code>ProviderManager</code> 实例可以共享同一个父级 <code>AuthenticationManager</code>。这在多个 <code>SecurityFilterChain</code> 实例具有一些共同的身份验证逻辑，但也有各自的特定身份验证机制时，非常有用。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-060107.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了增强安全性，<code>ProviderManager</code> 默认会尝试从成功的身份验证请求返回的 <code>Authentication</code> 对象中清除任何敏感的凭据信息，如密码。这确保了敏感信息不会在 <code>HttpSession</code> 中保留超过所需的时间。</p><p>但在某些情况下，这可能会导致问题：</p><p><strong>用户对象缓存</strong>：如果您缓存了用户对象（例如，为了提高无状态应用程序的性能），并且 <code>Authentication</code> 对象引用了缓存中的对象，那么当该对象的凭据被清除后，再次对缓存中的对象进行身份验证可能会失败。</p><p>为了解决这个问题，您可以：</p><ul><li>在缓存实现中或在创建返回的 <code>Authentication</code> 对象的 <code>AuthenticationProvider</code> 中首先创建对象的副本。</li><li>禁用 <code>ProviderManager</code> 上的 <code>eraseCredentialsAfterAuthentication</code> 属性。</li></ul><p>可见，<code>ProviderManager</code> 提供了一种灵活且安全的方式来处理身份验证。通过支持父级身份验证和凭据管理，它确保了身份验证过程既灵活又安全。当设计和实施身份验证策略时，了解这些功能可以帮助您更好地利用 Spring Security 提供的功能。</p><h3 id="_1-7-authenticationprovider-多样化的身份验证策略" tabindex="-1"><a class="header-anchor" href="#_1-7-authenticationprovider-多样化的身份验证策略" aria-hidden="true">#</a> 1.7 AuthenticationProvider：多样化的身份验证策略</h3><p>在 Spring Security 中，身份验证不仅仅是一个简单的用户名和密码的校验过程。随着现代应用程序的复杂性增加，身份验证策略也变得多样化，从简单的用户名/密码校验到复杂的令牌验证和第三方身份验证等。为了满足这些多样化的需求，Spring Security 提供了 <code>AuthenticationProvider</code> 接口，允许开发者为每种身份验证策略提供自定义的实现。</p><p>上面我们了解了，<code>ProviderManager</code> 可以配置多个 <code>AuthenticationProvider</code> 实例，每个实例都负责处理特定类型的身份验证。当一个身份验证请求到来时，<code>ProviderManager</code> 会遍历其内部的 <code>AuthenticationProvider</code> 列表，直到找到一个能够处理该请求的提供者。</p><p><code>AuthenticationProvider</code> 的源码也很简单，只有两个方法，一个是负责处理 ProviderManager 传递过来的认证逻辑的 <code>authenticate</code> 方法，另一个是检测此 <code>AuthenticationProvider</code> 是否支持处理执行的 <code>Authentication</code> 认证类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * AuthenticationProvider 接口定义了身份验证提供者应实现的核心方法。
 * 它是 Spring Security 身份验证过程中的关键组件，允许多种身份验证策略的插入和扩展。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationProvider</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 对给定的身份验证请求进行身份验证。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">authentication</span> 表示身份验证请求的对象，通常包含主体（如用户名）和凭据（如密码）。
     * <span class="token keyword">@return</span> 一个完全填充的身份验证对象，表示成功的身份验证。如果身份验证失败，此方法将抛出一个 AuthenticationException。
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">AuthenticationException</span></span> 如果身份验证失败，例如由于无效的凭据或其他原因。
     */</span>
    <span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 指示此 AuthenticationProvider 是否支持给定的身份验证类型。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">authentication</span> 要检查的身份验证类。
     * <span class="token keyword">@return</span> 如果此 AuthenticationProvider 支持指定的身份验证类，则返回 true，否则返回 false。
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AuthenticationProvider</code> 有十几个实现：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-061137.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下面列举两个最常见的：</p><ul><li><strong>DaoAuthenticationProvider</strong>：这是最常见的身份验证提供者，支持<strong>基于用户名和密码的身份验证</strong>。它通常与 <code>UserDetailsService</code> 配合使用，从数据库或其他数据源中加载用户的详细信息。</li><li><strong>JwtAuthenticationProvider</strong>：随着无状态应用程序和微服务架构的流行，JWT（JSON Web Token）身份验证也变得越来越普遍。<code>JwtAuthenticationProvider</code> 负责验证 JWT 令牌的有效性，并从中提取身份验证信息。</li></ul><p>除了 Spring Security 提供的标准 <code>AuthenticationProvider</code> 实现外，开发者还可以创建自定义的实现，以支持特定的身份验证策略。这为应用程序提供了极大的灵活性，确保身份验证过程可以完美地适应业务需求。</p><h3 id="_1-8-请求凭据与-authenticationentrypoint" tabindex="-1"><a class="header-anchor" href="#_1-8-请求凭据与-authenticationentrypoint" aria-hidden="true">#</a> 1.8 请求凭据与 AuthenticationEntryPoint</h3><p>在 Spring Security 中，<code>AuthenticationEntryPoint</code> 是一个关键接口，用于处理未经身份验证的客户端请求资源时的情况。它定义了如何向客户端发送一个响应，要求其提供身份验证凭据。</p><ol><li><p><strong>主动提供凭据的情况</strong></p><p>有时，客户端在请求资源时会主动提供身份验证凭据，例如用户名和密码。这种情况下，由于凭据已经提供，Spring Security 不需要再次请求。系统会尝试使用这些凭据进行身份验证，并根据结果授予或拒绝访问权限。</p></li><li><p><strong>未提供凭据的情况</strong></p><p>如果客户端尝试访问他们没有权限的资源，并且没有提供任何身份验证凭据，那么 <code>AuthenticationEntryPoint</code> 就会介入。它的任务是决定如何响应这种未经身份验证的请求。</p></li></ol><p>例如，对于基于表单的登录，<code>AuthenticationEntryPoint</code> 可能会重定向用户到登录页面。对于基于 HTTP Basic 或 Digest 的身份验证，它可能会发送一个带有 <code>WWW-Authenticate</code> 标头的响应，提示客户端提供凭据。</p><p>可见，<code>AuthenticationEntryPoint</code>为 Spring Security 提供了一个灵活的机制，用于处理各种未经身份验证的请求情况。开发者可以根据自己的需求实现此接口，以定义特定的身份验证入口策略。</p><p>该接口中只有一个默认方法用于处理如何向客户端发送一个响应的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">{</span>
  	<span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span>
			<span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它有几个常见的实现：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-082130.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们以常见的表单认证和 HTTP Basic 两个实现分别看看大致的处理逻辑：</p><ol><li><p><strong>LoginUrlAuthenticationEntryPoint</strong>：重定向到登陆页面；</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-082414.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>BasicAuthenticationEntryPoint</strong>：发送一个带有 <code>WWW-Authenticate</code> 标头的响应，提示客户端提供凭据；</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-082522.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><p>下面给一个在前后端分离中常见的自定义 <code>AuthenticationEntryPoint</code> 方式。我们大致可以如下处理：</p><ol><li>设置响应头的 Access-Control-Allow-Origin 字段告诉客户端允许那些请求类型，例如可以允许所有请求源，从而支持跨域访问；</li><li>设置响应头的 Cache-Control 字段为 no-cache 指示本次响应不应被客户端缓存，从而确保每次拿到的都是最新状态信息；</li><li>设置响应的字符编码，通常为 UFT-8；</li><li>设置响应内容类型，通常在前后端分离项目中我们使用 JSON 进行数据传输，因此使用 application/json 即可；</li><li>将认证失败的消息写入响应体携带给前端，一般需要使用我们自定义封装的通用返回对象将异常信息封装为 JSON 作为本次响应数据；</li><li>刷新响应流确保数据被发送，这是常识，不过多解释，</li></ol><p>示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestAuthenticationEntryPoint</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置响应头，允许任何域进行跨域请求</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置响应头，指示响应不应被缓存</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;no-cache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置响应的字符编码为 UTF-8</span>
        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置响应内容类型为 JSON</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将认证失败的消息写入响应体</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">unauthorized</span><span class="token punctuation">(</span>authException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 刷新响应流，确保数据被发送</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在配置 <code>SecurityFilterChain</code> 时通过如下方式将其进行注册以覆盖默认行为即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">securityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

       http<span class="token punctuation">.</span>
                <span class="token comment">// 其他配置</span>
                <span class="token comment">// 配置异常处理器  ExceptionHandlingConfigurer</span>
                <span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 当未认证或 token 过期时使用自定义的处理器返回响应</span>
                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>restAuthenticationEntryPoint<span class="token punctuation">)</span>
                <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-9-abstractauthenticationprocessingfilter" tabindex="-1"><a class="header-anchor" href="#_1-9-abstractauthenticationprocessingfilter" aria-hidden="true">#</a> 1.9 AbstractAuthenticationProcessingFilter</h3><p>在 Spring Security 中，<code>AbstractAuthenticationProcessingFilter</code> 抽象类是<strong>处理身份验证请求的核心组件</strong>。它定义了身份验证过程的基本流程，从接收用户提交的凭据到身份验证成功或失败的结果。</p><ol><li><p><strong>用户凭据的提交</strong>：</p><p>当用户提交其身份验证凭据（例如，通过登录表单）时，<code>AbstractAuthenticationProcessingFilter</code> 负责从 <code>HttpServletRequest</code> 中提取这些凭据并创建一个 <code>Authentication</code> 对象。具体的 <code>Authentication</code> 类型取决于该过滤器的具体子类实现。例如，<code>UsernamePasswordAuthenticationFilter</code> 会根据提交的用户名和密码创建一个 <code>UsernamePasswordAuthenticationToken</code>。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-083304.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>身份验证过程</strong>：</p><p>创建了 <code>Authentication</code> 对象后，它会被传递给 <code>AuthenticationManager</code> 进行实际的身份验证。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-22-083801.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>身份验证失败</strong>：</p><p>如果身份验证失败，以下步骤将被执行：</p><ul><li>清除 <code>SecurityContextHolder</code>，确保不会有任何残留的身份验证信息。</li><li>如果配置了 &quot;remember me&quot; 功能，<code>RememberMeServices.loginFail</code> 方法会被调用。如果没有配置，这个步骤不会执行任何操作。</li><li><code>AuthenticationFailureHandler</code> 会被调用，处理身份验证失败的情况，例如重定向到错误页面或显示错误消息。</li></ul></li><li><p><strong>身份验证成功</strong>：</p><p>如果身份验证成功，以下步骤将被执行：</p><ul><li>通知 <code>SessionAuthenticationStrategy</code> 有一个新的登录事件。</li><li>在 <code>SecurityContextHolder</code> 上设置 <code>Authentication</code> 对象。稍后，<code>SecurityContextPersistenceFilter</code> 会将 <code>SecurityContext</code> 保存到 <code>HttpSession</code>。</li><li>如果配置了 &quot;remember me&quot; 功能，<code>RememberMeServices.loginSuccess</code> 方法会被调用。如果没有配置，这个步骤不会执行任何操作。</li><li>发布一个 <code>InteractiveAuthenticationSuccessEvent</code> 事件，通知其他应用程序组件身份验证成功。</li><li>调用 <code>AuthenticationSuccessHandler</code>，处理身份验证成功的情况，例如重定向到主页或显示欢迎消息。</li></ul></li></ol><p>可见，<code>AbstractAuthenticationProcessingFilter</code> 提供了一个结构化的框架，用于处理身份验证请求的各个阶段。它确保了身份验证过程的一致性和安全性，同时也为开发者提供了足够的灵活性，以根据特定需求定制身份验证流程。</p><h2 id="_2-基于用户名和密码的身份认证" tabindex="-1"><a class="header-anchor" href="#_2-基于用户名和密码的身份认证" aria-hidden="true">#</a> 2.基于用户名和密码的身份认证</h2><h2 id="_3-oauth-2-0-登录" tabindex="-1"><a class="header-anchor" href="#_3-oauth-2-0-登录" aria-hidden="true">#</a> 3.OAuth 2.0 登录</h2><h2 id="_4-saml-2-0-登录" tabindex="-1"><a class="header-anchor" href="#_4-saml-2-0-登录" aria-hidden="true">#</a> 4.SAML 2.0 登录</h2><h2 id="_5-中央身份验证服务器-cas" tabindex="-1"><a class="header-anchor" href="#_5-中央身份验证服务器-cas" aria-hidden="true">#</a> 5.中央身份验证服务器 (CAS)</h2><h2 id="_6-remember-me" tabindex="-1"><a class="header-anchor" href="#_6-remember-me" aria-hidden="true">#</a> 6.Remember Me</h2><h2 id="_7-基于-jaas-的身份认证" tabindex="-1"><a class="header-anchor" href="#_7-基于-jaas-的身份认证" aria-hidden="true">#</a> 7.基于 JAAS 的身份认证</h2><h2 id="_8-基于-openid-的身份认证" tabindex="-1"><a class="header-anchor" href="#_8-基于-openid-的身份认证" aria-hidden="true">#</a> 8.基于 OpenID 的身份认证</h2><h2 id="_9-预身份验证场景" tabindex="-1"><a class="header-anchor" href="#_9-预身份验证场景" aria-hidden="true">#</a> 9.预身份验证场景</h2><h2 id="_10-基于-x509-的身份认证" tabindex="-1"><a class="header-anchor" href="#_10-基于-x509-的身份认证" aria-hidden="true">#</a> 10.基于 X509 的身份认证</h2>`,143),c=[o];function i(p,l){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","03-Security-认证.html.vue"]]);export{d as default};
