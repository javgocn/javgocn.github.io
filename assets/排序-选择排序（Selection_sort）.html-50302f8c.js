import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-009ef08a.js";const e={},p=t(`<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1.概述</h2><p>选择排序是计算机科学中的一种原地比较排序算法。它的时间复杂度为 <strong><em>O</em></strong> (n2)，这使得它在处理大量数据列表时效率不高，并且通常比类似的插入排序性能差。尽管如此，选择排序因其简单性而受到关注，并且在某些特定情况下，特别是在辅助内存有限的情况下，它相对于更复杂的算法具有性能优势。</p><p>该算法将输入列表分为两部分：一个从左到右建立的已排序子列表，位于列表的前部（左侧），以及一个剩余的未排序子列表。最初，已排序的子列表是空的，而未排序的子列表是整个输入列表。算法通过找到未排序子列表中的最小（或最大，取决于排序顺序）元素，与最左侧的未排序元素交换（将其排序），然后将子列表的边界向右移动一个元素来进行。</p><table><thead><tr><th>最差表现</th><th>- 比较：<strong><em>O</em></strong> (n2)<br>- 交换：<strong><em>O</em></strong> (n)</th></tr></thead><tbody><tr><td>最优表现</td><td>- 比较：<strong><em>O</em></strong> (n2)<br>- 交换：<strong><em>O</em></strong> (1)</td></tr><tr><td>平均表现</td><td>- 比较：<strong><em>O</em></strong> (n2)<br>- 交换：<strong><em>O</em></strong> (n)</td></tr><tr><td>空间复杂度</td><td>- 辅助：<strong><em>O</em></strong> (1)</td></tr></tbody></table><p>以下是此排序算法对五个元素进行排序的示例：</p><table><thead><tr><th><strong>已排序子列表</strong></th><th><strong>未排序子列表</strong></th><th><strong>未排序列表中的最小元素</strong></th></tr></thead><tbody><tr><td>()</td><td>(11, 25, 12, 22, 64)</td><td>11</td></tr><tr><td>(11)</td><td>(25, 12, 22, 64)</td><td>12</td></tr><tr><td>(11, 12)</td><td>(25, 22, 64)</td><td>22</td></tr><tr><td>(11, 12, 22)</td><td>(25, 64)</td><td>25</td></tr><tr><td>(11, 12, 22, 25)</td><td>(64)</td><td>64</td></tr><tr><td>(11, 12, 22, 25, 64)</td><td>()</td><td></td></tr></tbody></table><blockquote><p>[!TIP]</p><p>在最后两行上没有任何变化，因为最后两个数字已经按顺序排列。</p></blockquote><p>选择排序也可以用于想要使添加和删除操作高效的列表结构，例如链表。在这种情况下，更常见的做法是从列表的其余部分中删除最小元素，然后将其插入到迄今为止已排序的值的末尾。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span> <span class="token number">25</span> <span class="token number">12</span> <span class="token number">22</span> <span class="token number">11</span>

<span class="token comment">// 在 arr[0...4] 中找到最小的元素</span>
<span class="token comment">// 并将其放在开始位置</span>
<span class="token number">11</span> <span class="token number">25</span> <span class="token number">12</span> <span class="token number">22</span> <span class="token number">64</span>

<span class="token comment">// 在arr[1...4]中找到最小的元素</span>
<span class="token comment">// 并将其放在arr[1...4]的开始位置</span>
<span class="token number">11</span> <span class="token number">12</span> <span class="token number">25</span> <span class="token number">22</span> <span class="token number">64</span>

<span class="token comment">// 在arr[2...4]中找到最小的元素</span>
<span class="token comment">// 并将其放在arr[2...4]的开始位置</span>
<span class="token number">11</span> <span class="token number">12</span> <span class="token number">22</span> <span class="token number">25</span> <span class="token number">64</span>

<span class="token comment">// 在arr[3...4]中找到最小的元素</span>
<span class="token comment">// 并将其放在arr[3...4]的开始位置</span>
<span class="token number">11</span> <span class="token number">12</span> <span class="token number">22</span> <span class="token number">25</span> <span class="token number">64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个选择排序的动图示例：（红色：当前最小值 黄色：排序列表 蓝色：当前项目）</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-08-31-035245.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看出，选择排序是一个简单的排序算法，它通过不断地选择剩余部分中的最小（或最大)元素来工作。尽管它在大型数据集上不是最高效的，但其简单性使其在某些情况下仍然有用。</p><h2 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2.代码实现</h2><p>实现步骤如下：</p><ol><li><strong>初始化外部循环</strong>：遍历整个数组，但可以排除最后一个元素，因为当其余元素都已排序时，最后一个元素自然也就排序了。</li><li><strong>假设最小值</strong>：对于每个外部循环的迭代，首先假设当前索引的元素是最小的。</li><li><strong>查找最小值</strong>：使用内部循环从当前索引的下一个元素开始，查找整个数组的其余部分以找到实际的最小元素。</li><li><strong>交换元素</strong>：如果找到的最小元素的索引不是当前外部循环的索引，则将它们交换。</li></ol><p>这种方法确保在每次外部循环迭代后，最小的未排序元素都会被放置在其正确的位置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 选择排序
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort01</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 选择排序
     * <span class="token keyword">@param</span> <span class="token parameter">arr</span> 待排序数组
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 记录数组长度</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token comment">// 初始化外部循环，用于记录当前已排序的元素个数</span>
        <span class="token comment">// 最后一个元素不需要遍历，因为它会和倒数第二个元素比较，如果倒数第二个元素比它小，就会交换，这样最后一个元素就是最大的</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 假设最小值：对每一轮排序，都假设当前未排序的第一个元素是最小值</span>
            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>

            <span class="token comment">// 初始化内部循环，用于遍历未排序的元素</span>
            <span class="token comment">// 从当前索引的下一个元素开始遍历寻找实际的最小值，因为当前索引之前的元素都是已经排序好的</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 查找实际最小值：如果当前元素比假设的最小值还要小，就更新最小值的索引</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 交换元素：如果假设的最小值和实际的最小值不是同一个元素，就交换它们</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","排序-选择排序（Selection_sort）.html.vue"]]);export{d as default};
