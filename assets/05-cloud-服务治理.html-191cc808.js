import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as n,d as s,b as a,w as u,f as e}from"./app-009ef08a.js";const r={},d=e('<h2 id="_1-微服务治理与动态服务发现" tabindex="-1"><a class="header-anchor" href="#_1-微服务治理与动态服务发现" aria-hidden="true">#</a> 1.微服务治理与动态服务发现</h2><p>微服务架构逐渐成为现代软件开发的标准模式，其中服务治理是确保其灵活性和可扩展性的关键。本节的重点是深入探究服务治理，同时具体分析 Nacos 作为服务注册中心的架构设计。</p><p>服务治理为微服务架构提供了自动化管理，是微服务之间协调工作的默默保障者。想象一下，如果缺乏有效的服务治理，当面临服务实例的动态变化时，整个系统的可维护性和扩展性将严重受限。以下场景将帮助我们更清晰地理解服务治理的价值：</p><p>设想你负责的系统中有两个关键的微服务：服务 A 和服务 B，每个微服务分布在 10 个虚拟节点上。服务 A 需要频繁调用服务 B 来完成业务逻辑。在没有服务治理的情况下，这种服务间调用会变得复杂和静态，因为服务 A 需要知道如何找到服务 B，并且随着服务 B 实例的增减，服务 A 的配置需要不断更新。</p><p>Nacos 应运而生，它通过中央服务注册中心来简化这一过程。服务 A 和服务 B 都会在 Nacos 注册中心注册自己，公布各自的可用实例。服务 A 现在可以直接查询 Nacos，动态地发现服务 B 的实例，并进行通信，而无需硬编码实例地址。</p><p>下面是 Nacos 注册中心的架构示意图，它展示了服务实例注册和服务发现的流程：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-055724.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在这个体系结构中，可以观察到以下关键优势：</p><ol><li><strong>去中心化的服务发现</strong>：通过 Nacos，服务之间的发现变得动态和去中心化，避免了对单点故障的依赖。</li><li><strong>动态负载均衡</strong>：服务消费者（例如服务 A）可以实现客户端负载均衡，通过从 Nacos 获取的服务 B 的实例列表，选择最适合的实例进行调用。</li><li><strong>实时状态管理</strong>：Nacos 对服务实例的健康检查可以实现实时状态同步，确保服务调用的稳定性。</li></ol><p>总而言之，Nacos 提供的服务治理机制有效地支撑了微服务架构的灵活性和可扩展性，为微服务间的交互提供了流畅和自动化的支持。后面的内容，我们将具体探讨 Nacos 在服务注册和服务发现中的具体实现机制。</p><h3 id="_1-1-探索服务注册与发现的动态机制" tabindex="-1"><a class="header-anchor" href="#_1-1-探索服务注册与发现的动态机制" aria-hidden="true">#</a> 1.1 探索服务注册与发现的动态机制</h3><p>在微服务的世界里，服务治理框架提供了两个至关重要的功能——<strong>服务注册</strong>和<strong>服务发现</strong>。这两项功能共同构成了微服务间高效通信的基础设施。让我们更深入地探讨这两个概念，并理解它们是如何在微服务架构中发挥作用的。</p><ol><li><p><strong>服务注册：</strong></p><p>服务注册是服务治理的首要步骤，可以被视为微服务世界中的 “地图绘制”。每个微服务实例都将自己的地址信息和服务标识注册到中心化的服务目录中，就像在地图上标记自己的位置。这个过程不仅涉及到服务的网络位置（IP和端口），还包括服务的逻辑标识和健康状态，这为服务发现奠定了基础。</p></li><li><p><strong>服务发现：</strong></p><p>服务发现则是 “导航仪”，它允许一个服务实例找到并与其他服务实例进行通信。当服务 A 需要与服务 B 通信时，它会查询服务注册中心，获得服务 B 的实例列表。通过这种方式，服务 A 可以了解服务 B 的所有活跃节点，并选择一个合适的节点发起通信。</p></li></ol><p>为了清晰展现服务注册和服务发现的过程，请参考以下图解：</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-060620.png" style="zoom:50%;"><p>该图展示了以下关键步骤：</p><ol><li><strong>服务注册</strong>：服务 B 的每个实例在启动时将其详细信息注册到服务注册中心。</li><li><strong>服务同步</strong>：服务 A 定期从注册中心拉取服务 B 的节点信息，或者注册中心在服务 B 节点更新时推送最新信息给服务 A。</li><li><strong>服务选择</strong>：服务 A 根据自己的负载均衡策略，从获取到的服务 B 实例列表中选择一个进行调用。</li></ol><p>注册中心的核心角色是信息的中继站。每个服务实例都以其自身的逻辑名称和网络地址注册，这些信息对于实现服务间的精确查找和负载均衡至关重要。在服务注册过程中，除了基础的服务名称和地址信息外，通常还会包括以下维度的数据：</p><ul><li><strong>服务标识</strong>：一般由应用配置中的 <code>spring.application.name</code> 属性提供，用于在服务查找时提供匹配。</li><li><strong>网络位置</strong>：明确服务实例的网络访问点，包括其IP地址和端口号。</li><li><strong>服务状态</strong>：包括服务实例的健康检查结果，以确保调用的实例是健康且能够处理请求的。</li><li><strong>元数据信息</strong>：额外的服务描述信息，可以用于更复杂的路由逻辑或服务选择。</li></ul><blockquote><p>接下来的内容，我们将具体演示如何在 Nacos 中实现服务注册与发现，并分析其中的工作原理与最佳实践，这里先暂时不深入。</p></blockquote><p>在微服务架构中，<strong>异常容错</strong>机制扮演着守护者的角色，确保当个别服务实例出现问题时，整个系统仍能保持稳定和可用。让我们深入探讨这一概念及其在保障服务稳定性中的重要性。</p><p>考虑服务 A 调用服务 B 的场景。如果服务 B 由于某些问题无法响应，服务 A 若无妥善防御机制，则可能陷入长时间的等待状态，影响其性能，甚至导致级联故障。因此，我们需要设计一种机制，即使在部分服务实例不可用的情况下，也能保证系统整体的流畅运行。</p><ol><li><p><strong>心跳检测：</strong></p><p>心跳检测是异常容错中的关键策略。通过此机制，服务实例定期向注册中心报告状态，确认其活跃性。注册中心通过跟踪心跳，维护一个健康且可用的服务实例列表。</p></li><li><p><strong>服务剔除：</strong></p><ul><li><strong>被动剔除</strong>：如果在预设的时间窗口内未收到某服务实例的心跳，注册中心将其视为不可用，并从可用服务列表中移除。</li><li><strong>主动剔除</strong>：服务实例在维护、升级或即将下线等情况下，可以主动向注册中心发送下线通知，请求从服务列表中移除自巀。</li></ul></li></ol><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-061900.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>除了心跳检测和服务剔除，现代微服务架构中还采用了其他多种容错手段，如超时设置、重试策略、断路器模式等，进一步提升系统的鲁棒性。</p><p>作为 Spring Cloud 生态中的一个重要组件，Nacos 提供了<strong>服务发现</strong>、<strong>配置管理</strong>、<strong>服务监控</strong>等功能。在实际应用中，它不仅承担了服务注册与发现的任务，还能通过健康检查等机制实现异常容错，为微服务架构提供了强大的支持。</p><h3 id="_1-2-nacos-体系架构" tabindex="-1"><a class="header-anchor" href="#_1-2-nacos-体系架构" aria-hidden="true">#</a> 1.2 Nacos 体系架构</h3><p>在微服务体系中，Nacos 扮演着服务注册与发现的关键角色。为了深入理解 Nacos，我们必须从其三个基础构件入手：<strong>领域模型</strong>、<strong>数据模型</strong>以及其<strong>基本架构</strong>。这些构件是把握 Nacos 运行机制的根基。</p><h4 id="_1-2-1-领域模型" tabindex="-1"><a class="header-anchor" href="#_1-2-1-领域模型" aria-hidden="true">#</a> 1.2.1 领域模型</h4><p>Nacos 的领域模型清晰地定义了服务及其实例间的关系和界限。在 Nacos 的语境下，“服务” 代表的是逻辑上的微服务标识，并非物理上的服务器或硬件设备。</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-062432.png" style="zoom:50%;"><p>我们可以将 Nacos 的服务领域模型划分为以下三个层次：</p><ol><li><p><strong>服务层</strong></p><p>在这个层级，我们配置服务相关的<strong>元数据</strong>（比如服务版本、环境标签等）以及<strong>服务保护阈值</strong>。服务保护阈值是一个关键指标，它是介于 0 到 1 之间的值，用以判断服务实例健康比例。当健康实例的比例下降至阈值以下时，Nacos 启动服务保护模式，避免进一步剔除实例，并且可能将不健康的实例也包含在服务消费者的返回结果中，从而保持基本的服务可用性。</p></li><li><p><strong>集群层</strong></p><p>集群是由多个服务实例构成的。在每个服务实例启动时，可以指定其所属的集群，并在这个层级设置<strong>元数据</strong>和<strong>健康检查模式</strong>。<strong>持久化节点</strong>是那些即使客户端进程停止，也会在 Nacos 服务器上保留的实例。Nacos 对持久化节点执行 “主动探活” 以监测其健康状况。相对于持久化节点，<strong>临时节点</strong>则是默认的服务注册类型，它们不会长期存储在服务器上，而是通过周期性的心跳请求来维持其在服务列表中的存在。</p></li><li><p><strong>实例层</strong></p><p>实例指的就是单个的服务节点，它们是服务可用性的最小单位。在 Nacos 控制台，你可以查看每个实例的详细信息，如 IP、端口、状态，并可以进行如元数据编辑、上下线状态更改、路由权重配置等操作。</p></li></ol><p>在这三个层次中，“<strong>元数据</strong>” 扮演着至关重要的角色，它是包含服务描述信息的数据集合，可以包括服务版本信息、自定义标签等。通过服务发现机制，客户端能够获取到每个服务实例的元数据，实现特定的业务逻辑。</p><p>了解领域模型之后，接下来我们将探讨服务调用者是如何在这个模型中定位并调用具体的服务实例的。这一过程是通过 Nacos 的数据模型实现的，数据模型通过精确地描述服务和实例之间的映射关系，使得服务消费者能够准确地找到并请求到所需的服务实例。</p><h4 id="_1-2-2-数据模型" tabindex="-1"><a class="header-anchor" href="#_1-2-2-数据模型" aria-hidden="true">#</a> 1.2.2 数据模型</h4><p>Nacos 通过一个三级层次的数据模型进行服务管理，这些层次分别是 Namespace、Group 和 Service/DataId。这一模型设计能够灵活地支持不同的使用场景和需求。</p><p>为了更直观地展示这一结构，参考以下层次关系图：</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-063009.png" style="zoom:50%;"><p>从图中可以看出，这三个层次是嵌套关系，形成了从宏观到微观的数据分级。现在我们将逐层深入理解每个层次的作用和特点：</p><ol><li><p><strong>Namespace（命名空间）</strong></p><p>位于层次结构的最顶层，命名空间主要用于区分不同的环境或项目组。例如，我们可以将开发环境、测试环境和生产环境隔离开来，以避免相互干扰。默认的命名空间是 “public”，意味着如果没有特别指定，所有服务都会被自动归入这个公共命名空间中。</p></li><li><p><strong>Group（分组）</strong></p><p>在命名空间的基础上，Group 为我们提供了进一步的微观管理能力，允许我们按服务类型或业务逻辑进一步细分服务集合。默认的分组名为 “DEFAULT_GROUP”，它为没有特定分组指定的服务提供了归宿。不同的分组之间的服务实例是隔离的，确保服务之间的逻辑清晰。</p></li><li><p><strong>Service/DataID（服务/数据标识）</strong></p><p>这是最具体的层级，直接对应到各个微服务实体，例如订单服务、商品服务等。Service/DataID 是微服务寻址和发现的关键，它确保了我们能精确找到并调用所需的服务实体。</p></li></ol><p>通过结合 <strong>Namespace + Group + Service/DataID</strong> 的唯一标识，我们可以实现对特定服务的精确定位。例如，要调用生产环境下 A 分组的订单服务，我们可能会使用如 <code>Production.A.orderService</code> 的服务路径。</p><p>掌握了 Nacos 的数据模型后，你现在对于如何精确地识别和调用微服务应该有了清晰的认识。这种结构化的方式大大简化了服务管理，提高了微服务架构的可维护性和扩展性。接下来，我们将介绍 Nacos 的基本架构，以便你对其功能模块有一个全面的了解。</p><h4 id="_1-2-3-nacos-基本架构" tabindex="-1"><a class="header-anchor" href="#_1-2-3-nacos-基本架构" aria-hidden="true">#</a> 1.2.3 Nacos 基本架构</h4><p>Nacos 在服务治理方面主打两大核心能力：服务发现和配置管理。具体来说，它由 <strong>Naming Service</strong> 和 <strong>Config Service</strong> 两大基石模块组成，前者负责服务的发现和注册，后者则管理配置信息并支持热更新。关于配置管理的深入探讨，我将在后内容节中专门进行讲解。</p><p>照下面的官方架构图，以获得功能模块的直观理解：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-063945.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图示表明，服务提供者（Provider APP）和消费者（Consumer APP）都是通过 Open API 与 Nacos Server 的核心模块进行交互的。这些 Open API 是一系列公开的、遵循 RESTful 风格的 HTTP 接口。</p>',48),k={href:"https://nacos.io/zh-cn/docs/open-api.html",target:"_blank",rel:"noopener noreferrer"},g=e('<p>在 Nacos 的枢纽中，<strong>Naming Service</strong> 扮演了将服务名称映射到服务实体（如 IP 列表）的角色，这是实现服务发现的基础。比如，你若持有特定服务的 Namespace 和 Group 信息，Naming Service 将助你快速定位到该服务的实例集群。</p><p>另外，<strong>Nacos Core</strong> 是一组构成 Nacos 强大后盾的基础功能集合。以下表格列出了一些关键的 Nacos Core 组件及其职责：</p><table><thead><tr><th>组件</th><th>功能描述</th></tr></thead><tbody><tr><td>启动组件</td><td>支持多种模式，包括单机（Standalone）、集群（Cluster）、DNS 等，为服务的启动提供灵活性。</td></tr><tr><td>寻址组件</td><td>通过域名、服务名称、IP 端口、广播等多种方式进行服务寻址。</td></tr><tr><td>存储组件</td><td>负责 Nacos 服务信息的持久化，以及分片和复制数据以保证高可用。</td></tr><tr><td>插件组件</td><td>支持扩展和定制，包含用户管理、权限控制、审计功能、SMS 通知接入、监控统计等多样化功能。</td></tr><tr><td>缓存组件</td><td>实现本地、服务端缓存，以及容灾支持的功能，提高数据访问速度和系统容错能力。</td></tr><tr><td>事件通知组件</td><td>实现异步事件的通知和处理。</td></tr><tr><td>日志组件</td><td>保持日志记录的规范性和一致性，如管理日志的格式、日志级别和分类，保证日志的可移植性。</td></tr><tr><td>容量管理组件</td><td>防止数据过载，保证系统稳定运行。如管理每个 Namespace和 Group 维度下的容量，防止存储空间被写满而导致的服务不可用。</td></tr></tbody></table><p>为了维护集群状态的一致性，Nacos 实现了两种一致性协议：<strong>Raft</strong> 和 <strong>Distro</strong>。Raft 强调强一致性，通过选举机制确定 Leader 节点来同步数据；而 Distro 更注重可用性和最终一致性，适用于临时节点的数据同步。</p><blockquote><p>这里的介绍只是一瞥，但考虑到 <strong>一致性协议是技术面试中的常见问题</strong>，建议深入了解这些经典的协议理论。</p></blockquote><p>下一步，我们将动手实践，建立一个 Nacos 服务器集群，并对一个 Spring Boot 应用进行改造，将其服务化。通过这一实战演练，你将学会如何在微服务架构中实现从本地方法调用到远程服务调用的转变。</p><h2 id="_2-构建-nacos-集群环境" tabindex="-1"><a class="header-anchor" href="#_2-构建-nacos-集群环境" aria-hidden="true">#</a> 2.构建 Nacos 集群环境</h2><p>在本节中，我们将实践如何构建一个 Nacos 高可用服务注册中心。将学习建立高可用的 Nacos 集群，并将 MySQL 作为数据存储解决方案的详细步骤。这一过程不仅是技术实操，同时也深化了对高可用架构概念的理解。</p><p>系统架构的首要考量是确保<strong>高可用性</strong>。无论技术多么尖端，如果系统稳定性无法保障，所有的努力都可能付之东流。</p><p>把这个理念比作生活，就像健康是幸福生活的基石，高可用性在系统架构中扮演着类似的角色。我们的目标是确保架构设计中的每一步都贡献于这个基础上。</p><p>要构建高可用系统，有两个基本原则：</p><ul><li><strong>消除单点故障</strong>：架构设计应考虑到任何组件都可能失败的可能性。依赖单一资源的任务可能形成系统的薄弱环节，一旦出现问题，会导致服务中断。目标是识别并解决这些潜在的单点风险。</li><li><strong>快速故障恢复</strong>：一旦故障发生，应迅速恢复到正常状态。对于中心化的服务注册中心，比如 Nacos，应保证下线后的节点能够从集群中的其他节点获取最新的服务列表并迅速恢复到服务中断前的状态。</li></ul><p>Nacos 通过集群部署有效地解决了上述两大高可用性问题。不仅可以避免单一故障点的影响，而且确保了节点间数据的同步和快速故障恢复。下面，我将逐步引导你完成 Nacos 集群的搭建，让我们开始这个旅程吧。</p><h3 id="_2-1-获取-nacos-server" tabindex="-1"><a class="header-anchor" href="#_2-1-获取-nacos-server" aria-hidden="true">#</a> 2.1 获取 Nacos Server</h3><p>开始搭建集群之前，我们需要下载 Nacos Server。请按照以下步骤操作：</p>',15),v={href:"https://github.com/alibaba/nacos/releases",target:"_blank",rel:"noopener noreferrer"},m=e('<li><p>选择并下载当前最新的稳定版本（例如 2.2.3），它将作为我们实战项目的注册和配置中心。</p><blockquote><p>⚠️ <strong>注意</strong>：务必选择稳定版本进行安装，避免使用标有 BETA 的预发布版本，以免遇到潜在的 Bug 或兼容性问题。</p></blockquote></li><li><p>在发布页的 Assets 区域找到 <code>nacos-server-2.2.3.tar.gz</code> 或 <code>nacos-server-2.2.3.zip</code> 文件，选择一个进行下载。如果对 Nacos 源码感兴趣，也可以选择下载源码包。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-094434.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li>',2),b=e(`<p>下载后，解压 Nacos Server 文件，并按以下步骤准备集群环境：</p><ol><li>将解压的文件夹重命名为 <code>nacos-cluster1</code>。</li><li>复制 <code>nacos-cluster1</code> 文件夹，创建一个名为 <code>nacos-cluster2</code> 的副本。</li></ol><p>这样，我们就模拟出了一个由两个 Nacos Server 节点组成的集群环境。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-20-021505.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>完成这些步骤后，Nacos 服务器的初始安装和集群模拟已就绪。接下来，我们将进入配置环节，设置 Nacos Server 以支持集群模式运行。</p><h3 id="_2-2-配置-nacos-server" tabindex="-1"><a class="header-anchor" href="#_2-2-配置-nacos-server" aria-hidden="true">#</a> 2.2 配置 Nacos Server</h3><p>要使 Nacos Server 支持集群模式和外部数据库，我们需要对其配置文件进行一些更改。</p><ol><li><p><strong>修改服务端口</strong></p><p>由于我们在同一台机器上运行两个 Nacos 实例来模拟集群，我们需要为它们指定不同的端口号。配置文件 <code>application.properties</code> 位于每个 Nacos Server 目录下的 <code>conf</code> 文件夹中。</p><ul><li>对于 <code>nacos-cluster1</code>，我们保留默认端口 <code>8848</code>。</li><li>对于 <code>nacos-cluster2</code>，更改端口为 <code>8948</code> 以避免冲突。</li></ul><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-094801.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改 <code>server.port</code> 属性值以设置端口：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-094844.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>配置数据库连接</strong></p><p>默认情况下，Nacos 使用嵌入式数据库 Derby，但我们将转换为 MySQL 以提高可用性和稳定性。按照以下步骤配置 MySQL 数据源：</p><ul><li><strong>启用 MySQL 数据源</strong>：在 <code>application.properties</code> 文件中，取消注释或添加 <code>spring.datasource.platform=mysql</code>。</li><li><strong>配置数据库实例</strong>：确认 <code>db.num=1</code> 行是启用的，以支持单数据库实例。</li><li><strong>设定 JDBC 连接串</strong>：更改 <code>db.url.0</code> 为你的 MySQL 数据库地址（例如，<code>jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</code>）。同样，更新 <code>db.user.0</code> 和 <code>db.password.0</code> 为相应的数据库用户名和密码。</li></ul><p>请确认你的数据库配置如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span>

<span class="token key attr-name">db.num</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span>
<span class="token key attr-name">db.user.0</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">db.password.0</span><span class="token punctuation">=</span><span class="token value attr-value">你的密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应配置文件位置如下：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-095109.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><p>完成以上配置后，你的 Nacos Server 将准备好连接到 MySQL 数据库。下一步，我们将在 MySQL 中创建所需的数据库和表。请确保你已经安装了 MySQL 并创建了一个名为 <code>nacos</code> 的数据库，接下来，我们将导入 Nacos 所需的数据库结构和初始数据。</p><h3 id="_2-3-初始化数据库" tabindex="-1"><a class="header-anchor" href="#_2-3-初始化数据库" aria-hidden="true">#</a> 2.3 初始化数据库</h3><p>在 Nacos Server 集群部署中，所有的配置信息和服务细节都将存储在数据库中。首先，我们需要创建一个数据库 schema。</p><ol><li><strong>登录到 MySQL</strong>：使用命令行或 GUI 工具登录到你的 MySQL 实例。</li><li><strong>创建 Schema</strong>：执行以下 SQL 命令来创建一个名为 <code>nacos</code> 的新数据库 schema。</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>-- 新建一个 Nacos Schema
create schema nacos;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos 提供了一组 SQL 脚本用于创建初始数据库结构和表。</p><ol><li><p><strong>定位 SQL 脚本</strong>：在 Nacos 的解压目录的 <code>conf</code> 文件夹中找到 <code>nacos-mysql.sql</code> 文件（在一些版本中可能命名为 <code>mysql-schema.sql</code>）。</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-095640.png" style="zoom:50%;"></li><li><p><strong>执行 SQL 脚本</strong>：将该 SQL 文件的内容在我们刚才创建的 <code>nacos</code> 数据库上执行。</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-095729.png" style="zoom:67%;"><p>如果你使用的是命令行工具，可以通过以下命令导入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>use nacos<span class="token punctuation">;</span>
<span class="token builtin class-name">source</span> <span class="token operator">&lt;</span>file-path<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>验证表创建</strong>：执行成功后，你应该可以在 <code>nacos</code> 数据库中看到新创建的表。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-24-141447.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><p>完成这些步骤后，数据库就已经准备好供 Nacos Server 使用了。接下来，我们需要配置 Nacos Server 集群节点，确保每个节点都能够在启动时找到对方，并且进行正确的数据同步。</p><h3 id="_2-4-配置集群节点信息" tabindex="-1"><a class="header-anchor" href="#_2-4-配置集群节点信息" aria-hidden="true">#</a> 2.4 配置集群节点信息</h3><p>为了让 Nacos Server 集群中的各个节点能相互发现并同步数据，我们需要配置集群节点信息。</p><ol><li><p><strong>创建 <code>cluster.conf</code> 文件</strong>：在 Nacos Server 的 <code>conf</code> 目录下创建一个名为 <code>cluster.conf</code> 的文件。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-100233.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>编辑 <code>cluster.conf</code> 文件</strong>：将所有 Nacos Server 节点的IP地址和端口号添加到该文件中。替换下面的 IP 地址和端口号为你自己集群的实际信息。</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code># cluster.conf 示例（# 注意：这里的 IP 不能是 localhost 或者 127.0.0.1）
10.138.177.62:8848
10.138.177.62:8948
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>⚠️ 注意：</p><ul><li><strong>内网 IP 地址</strong>：在 <code>cluster.conf</code> 文件中指定的 IP 地址应该是可以互相访问的内网 IP，不能使用 <code>localhost</code> 或 <code>127.0.0.1</code>。</li><li><strong>获取 IP 地址</strong>：如果你在 Linux 或 Mac 系统，使用 <code>ifconfig</code> 或 <code>ip addr</code> 命令获取本机 IP 地址。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;inet &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> addr <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;inet &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-100607.png" style="zoom:67%;"><p>对于 Windows 用户，可以使用 <code>ipconfig</code> 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ipconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确认你的 IP 地址后，用它替换 <code>cluster.conf</code> 文件中的 IP 部分。</p><p>完成集群配置文件的创建后，每个 Nacos Server 节点在启动时都会读取这个文件，从而了解其他节点的存在，并进行集群通信。</p><p>接下来，确保你的数据库已正确初始化，然后你可以启动 Nacos Server 的每个实例以验证集群是否正常工作。我们将在下一步中启动 Nacos Server 实例。</p><h3 id="_2-5-启动-nacos-server-集群" tabindex="-1"><a class="header-anchor" href="#_2-5-启动-nacos-server-集群" aria-hidden="true">#</a> 2.5 启动 Nacos Server 集群</h3><p>启动 Nacos Server 集群非常简单，一旦你完成了之前的配置，只需要运行相应的启动脚本即可。</p><ol><li><p><strong>打开终端或命令行界面</strong>：转到 Nacos 安装目录。</p></li><li><p><strong>导航到 <code>bin</code> 目录</strong>：在 Nacos 服务器的安装目录中，找到 <code>bin</code> 文件夹，这里包含了启动和关闭服务器所需的脚本。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-09-24-142313.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>选择对应的脚本执行</strong>：</p><ul><li><strong>对于 Windows 用户</strong>：使用 <code>startup.cmd</code> 来启动，<code>shutdown.cmd</code> 来关闭服务。</li><li><strong>对于 Mac/Linux 用户</strong>：使用 <code>startup.sh</code> 和 <code>shutdown.sh</code> 脚本来启动和关闭服务。</li></ul></li><li><p><strong>以集群模式启动 Nacos</strong>：执行以下命令启动 Nacos Server。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sh</span> startup.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令将会启动 Nacos Server 并默认其为集群模式（因为你已经配置了 <code>cluster.conf</code> 文件）。</p></li><li><p><strong>查看启动日志</strong>：控制台输出会告诉你启动日志的位置，例如：</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-101116.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 <code>logs/start.out</code> 文件中，查看启动日志，确认没有错误发生：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token parameter variable">-f</span> logs/start.out
<span class="token comment"># 或者</span>
<span class="token function">cat</span> logs/start.out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找类似 “Nacos started successfully in cluster mode” 的消息以确认成功启动。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-101143.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>验证集群状态</strong>：在所有预定作为集群节点的机器上重复上述步骤，确保每个节点都正确启动。</p></li></ol><h3 id="_2-6-登录和验证-nacos-控制台" tabindex="-1"><a class="header-anchor" href="#_2-6-登录和验证-nacos-控制台" aria-hidden="true">#</a> 2.6 登录和验证 Nacos 控制台</h3><p>完成集群的配置和启动后，接下来要登录到 Nacos 控制台，确保集群状态良好。</p><ol><li><p><strong>访问控制台</strong>：在浏览器中输入集群中任一节点的地址，例如：</p><ul><li>nacos-cluster1：http://127.0.0.1:8848/nacos</li><li>nacos-cluster2：http://127.0.0.1:8948/nacos</li></ul><blockquote><p>⚠️ 注意：确保使用实际的服务器 IP 而非 <code>127.0.0.1</code> 或 <code>localhost</code>，除非你正在本机上进行操作。</p></blockquote></li><li><p><strong>登录页面</strong>：进入登录页面，你会看到如下所示的界面。使用默认的用户名和密码（通常是 <code>nacos</code>/<code>nacos</code>）登录。当然，你也可以在登录后的 <code>权限控制</code> -&gt; <code>用户列表</code> 页面新增系统用户。</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-101655.png" style="zoom:67%;"></li><li><p><strong>检查集群状态</strong>：登录后，导航至 “集群管理” -&gt; “节点列表” 查看所有 Nacos Server 节点及其状态。所有节点的状态应该显示为 “UP”，绿色的状态表示节点健康。如果节点状态不是 “UP”，请检查对应节点的日志文件以诊断问题。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-05-101829.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><p>如果无法登录控制台或集群状态有异常，以下是排查步骤：</p><ol><li><strong>日志检查</strong>：查看 <code>/logs/start.out</code> 或其他相关日志文件，确定是否有错误信息。</li><li><strong>端口占用</strong>：如果 <code>server.port</code> 指定的端口已被其他应用占用，更换端口后重新启动。</li><li><strong>数据库连接</strong>：检查 <code>application.properties</code> 中的数据库连接配置，确保 MySQL 服务可达且运行中。</li><li><strong>网络配置</strong>：确保服务器间的网络设置允许相互通信，没有被防火墙或安全组规则阻止。</li><li><strong>服务健康检查</strong>：登录到每个节点的控制台，确认服务注册和服务发现功能正常。</li></ol><p>集群环境配置正确并且每个节点都已经正确启动和同步，这时你的 Nacos 集群应该已经准备好可以正常使用了。可以进行服务注册和发现的相关操作，确保集群功能完全符合预期。</p><p>登录控制台后，建议进行一些基本的服务注册和配置操作，以验证集群的功能。你可以注册一个测试服务，然后在另一个节点上检查该服务是否可见，这样可以确保集群的服务同步功能正常工作。</p><h3 id="_2-7-阶段小结" tabindex="-1"><a class="header-anchor" href="#_2-7-阶段小结" aria-hidden="true">#</a> 2.7 阶段小结</h3><p>在本节中，我们一步步完成了 Nacos 集群的搭建，并确保了其高可用性。通过引入 MySQL 作为配置存储，我们实现了配置的持久化和集群状态的共享。</p><p>关键步骤总结：</p><ol><li><strong>存储切换</strong>：切换到 MySQL 数据源，实现了配置的持久化存储。</li><li><strong>集群配置</strong>：配置了集群节点，保证了服务注册信息在集群间的同步。</li><li><strong>服务启动</strong>：启动了 Nacos 服务，并验证了集群模式下的正常运行。</li><li><strong>控制台登录</strong>：登录到 Nacos 控制台，验证了集群状态。</li></ol><p>服务注册最佳实践：</p><ul><li><strong>VIP（Virtual IP）</strong>：在客户端配置中，使用一个虚拟 IP 地址代替硬编码的服务器列表。这有助于在服务器地址变化时，无需更改客户端配置。</li><li><strong>动态服务发现</strong>：VIP 通过动态服务发现机制，使客户端能自动发现后端的 Nacos 节点。</li></ul><p>技术扩展：</p>`,47),h=n("li",null,[n("strong",null,"Nginx+LVS/keepalived"),s("：了解并实践如何使用这些工具创建高可用的服务代理和负载均衡。")],-1),f=n("strong",null,"自我学习",-1),y={href:"https://nacos.io/zh-cn/docs/what-is-nacos.html",target:"_blank",rel:"noopener noreferrer"},N=e('<p>自学笔记建议：</p><ul><li><strong>Nacos 功能特性</strong>：深入了解服务发现、服务配置、服务元数据等关键功能。</li><li><strong>Nacos 集成方案</strong>：掌握 Nacos 如何与微服务架构（如 Spring Cloud、Dubbo）集成。</li><li><strong>高级话题</strong>：研究服务分区、灰度发布和服务治理等高级功能。</li><li><strong>故障模拟与排查</strong>：模拟可能的故障场景，如数据库宕机、节点失联等，并学习如何快速定位和解决。</li></ul><p>通过将理论与实践结合，不仅能提高你对 Nacos 的理解，还能锻炼你的问题解决能力。当你对基本的集群搭建有了充分理解后，尝试挑战更高级的集群管理和维护任务，如性能优化、故障恢复、数据迁移等。这样的实践有助于你在真实工作环境中更好地设计和管理分布式服务。</p><h2 id="_3-在-nacos-中实现服务注册" tabindex="-1"><a class="header-anchor" href="#_3-在-nacos-中实现服务注册" aria-hidden="true">#</a> 3.在 Nacos 中实现服务注册</h2><p>在构建微服务架构的优惠券平台项目中，服务注册是实现服务发现的先决条件。本节详细介绍如何将服务提供者注册到 Nacos 服务器，是构建端到端微服务调用链路的关键一环。我们将讨论 Nacos 的自动装配机制、核心参数配置，确保你能够有效地使用 Nacos 进行服务治理。</p><p>服务注册是微服务架构中的基础环节。在 Nacos 生态中，每个下游服务（服务提供者）需要在 Nacos 注册中心进行注册，这样上游服务（服务消费者）才能通过服务发现机制找到并调用这些下游服务。</p><p>接下来，我们以 <code>coupon-template-serv</code> 和 <code>coupon-calculation-serv</code> 为例，展示如何利用 Nacos 实现服务的注册。在后面，我们再讨论作为服务消费者的 <code>coupon-customer-serv</code> 是如何通过服务发现机制向服务提供者发起调用的。</p><h3 id="_3-1-集成-nacos-依赖以确保版本兼容性" tabindex="-1"><a class="header-anchor" href="#_3-1-集成-nacos-依赖以确保版本兼容性" aria-hidden="true">#</a> 3.1 集成 Nacos 依赖以确保版本兼容性</h3><p>在微服务项目中引入 Nacos 作为服务发现和配置管理的组件之前，确保版本匹配是非常关键的一步。由于 Spring Boot、Spring Cloud 和 Spring Cloud Alibaba 都维护着严格的版本依赖关系，这三者之间的版本兼容性必须得到保证，否则容易出现难以预料的问题。</p><p>版本兼容性查询：</p>',10),S=n("strong",null,"Spring Boot 与 Spring Cloud 版本匹配",-1),C={href:"https://spring.io/projects/spring-cloud#overview",target:"_blank",rel:"noopener noreferrer"},_=n("img",{src:"https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-06-141955.png",style:{zoom:"33%"}},null,-1),I=n("strong",null,"Spring Cloud Alibaba 与 Spring Cloud、Spring Boot 的版本匹配",-1),x={href:"https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E",target:"_blank",rel:"noopener noreferrer"},j=n("img",{src:"https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-06-142042.png",style:{zoom:"50%"}},null,-1),w=e(`<p>常用实战版本选择：</p><table><thead><tr><th>Spring Cloud Version</th><th>Spring Cloud Alibaba Version</th><th>Spring Boot Version</th></tr></thead><tbody><tr><td>Spring Cloud 2021.0.1</td><td>2021.0.1.0</td><td>2.6.3</td></tr><tr><td>Spring Cloud 2020.0.1</td><td>2021.1</td><td>2.4.2</td></tr><tr><td>Spring Cloud Hoxton.SR9</td><td>2.2.6.RELEASE</td><td>2.3.2.RELEASE</td></tr><tr><td>Spring Cloud Hoxton.SR3</td><td>2.2.1.RELEASE</td><td>2.2.5.RELEASE</td></tr><tr><td>Spring Cloud Hoxton.RELEASE</td><td>2.2.0.RELEASE</td><td>2.2.X.RELEASE</td></tr></tbody></table><p>根据版本匹配表格，推荐选择经过兼容性测试的稳定版本组合。例如，在此项目中，选用的版本组合为：Spring Cloud 2020.0.1、Spring Cloud Alibaba 2021.1 和 Spring Boot 2.4.2 作为实战项目的依赖版本。</p><p>首先，在项目的顶层 <code>pom.xml</code> 中声明 Spring Cloud 和 Spring Cloud Alibaba 的版本号，确保下层模块能够继承正确的版本。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2020.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2021.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
   <span class="token comment">&lt;!-- 省略部分代码 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在需要集成 Nacos 的模块，比如 <code>coupon-template-impl</code> 和 <code>coupon-calculation-impl</code>，引入如下依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于已在父级 <code>pom.xml</code> 中定义了版本管理，子模块无需再指定版本号，Maven 会自动解析适合的版本。</p><p>在依赖项添加完毕后，通过简单的配置，即可启用 Nacos 的服务注册功能。Nacos 利用 Spring Boot 的自动装配（auto configuration）机制，自动加载配置项并完成服务注册。</p><p>Spring Cloud 的组件都广泛使用了自动装配机制，这为组件的集成提供了极大的便利。了解这一机制的底层原理，不仅有助于深入理解组件的启动过程，而且为将来可能的自定义组件开发提供了模式借鉴。</p><p>在下一节中，我们将进一步探讨 Nacos 自动装配器的工作原理和细节，为你揭开 Spring Cloud 组件启动的神秘面纱。</p><h3 id="_3-2-nacos-自动装配原理" tabindex="-1"><a class="header-anchor" href="#_3-2-nacos-自动装配原理" aria-hidden="true">#</a> 3.2 Nacos 自动装配原理</h3><p>随着 Spring Cloud 的演进，我们已不再需要在启动类上显式添加 <code>@EnableDiscoveryClient</code> 注解来激活服务治理功能。在较新的版本中，仅通过配置项，我们便可轻松开启 Nacos 的服务治理。这种简化是如何实现的呢？背后的秘密在于 Spring Framework 的自动装配机制。</p><p>当我们在项目中包含 Nacos 的依赖时，相关的自动装配器也随之加入，负责在启动阶段加载配置并激活 Nacos 的核心功能。以下是几个关键的自动装配器及其职责：</p><ul><li><code>NacosDiscoveryAutoConfiguration</code>：负责服务发现功能，它读取配置项并初始化 <code>NacosServiceDiscovery</code> 类以实现服务发现。</li><li><code>NacosServiceAutoConfiguration</code>：负责实例化 <code>NacosServiceManager</code>，通过此类可获取服务列表等信息。</li><li><code>NacosServiceRegistryAutoConfiguration</code>：处理服务注册相关配置。</li></ul><p>以 <code>NacosDiscoveryAutoConfiguration</code> 为例，让我们深入了解其工作原理。请看以下简化后的源码注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnDiscoveryEnabled</span> <span class="token comment">// 当 spring.cloud.discovery.enabled=true 时生效</span>
<span class="token annotation punctuation">@ConditionalOnNacosDiscoveryEnabled</span> <span class="token comment">// 当 spring.cloud.nacos.discovery.enabled=true 时生效</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosDiscoveryAutoConfiguration</span> <span class="token punctuation">{</span>

     <span class="token comment">// 读取 Nacos 所有配置项并封装到 NacosDiscoveryProperties</span>
	<span class="token annotation punctuation">@Bean</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span>
	<span class="token keyword">public</span> <span class="token class-name">NacosDiscoveryProperties</span> <span class="token function">nacosProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosDiscoveryProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

     <span class="token comment">// 声明服务发现的功能类 NacosServiceDiscovery</span>
	<span class="token annotation punctuation">@Bean</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span>
	<span class="token keyword">public</span> <span class="token class-name">NacosServiceDiscovery</span> <span class="token function">nacosServiceDiscovery</span><span class="token punctuation">(</span>
			<span class="token class-name">NacosDiscoveryProperties</span> discoveryProperties<span class="token punctuation">,</span>
			<span class="token class-name">NacosServiceManager</span> nacosServiceManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServiceDiscovery</span><span class="token punctuation">(</span>discoveryProperties<span class="token punctuation">,</span> nacosServiceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，<code>NacosDiscoveryAutoConfiguration</code> 的激活依赖于两个条件的满足：</p><ol><li><code>spring.cloud.discovery.enabled=true</code></li><li><code>spring.cloud.nacos.discovery.enabled=true</code></li></ol><p>默认情况下，引入 Nacos 依赖后，这两个参数已预设为 <code>true</code>。除非开发者主动禁用，否则这些自动装配器将默认被激活。</p><p><code>NacosDiscoveryAutoConfiguration</code> 类中的 <code>nacosProperties</code> 方法承担着读取和封装 Nacos 配置项的重任。通过 <code>@ConfigurationProperties</code> 注解，它将 <code>spring.cloud.nacos.discovery</code> 下的配置项绑定到 <code>NacosDiscoveryProperties</code> 对象的属性。</p><p>源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;spring.cloud.nacos.discovery&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 定义配置项的读取路径</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosDiscoveryProperties</span> <span class="token punctuation">{</span>
	<span class="token comment">// 类属性与配置项映射（省略具体属性）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种设计使得在应用的其他部分，我们仅需注入 <code>NacosDiscoveryProperties</code> 对象，便可便捷地访问 Nacos 的各项配置参数，从而实现了配置的集中管理和高效利用。</p><p><code>nacosServiceDiscovery</code> 方法的核心在于它声明的 <code>NacosServiceDiscovery</code> 类。这个类封装了服务发现的核心逻辑，如根据服务标识获取已注册的服务实例列表，或是获取所有服务的名称。</p><p>源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosServiceDiscovery</span> <span class="token punctuation">{</span>
       <span class="token comment">// Nacos 配置项</span>
  	<span class="token keyword">private</span> <span class="token class-name">NacosDiscoveryProperties</span> discoveryProperties<span class="token punctuation">;</span>
       <span class="token comment">// 服务治理核心类</span>
	  <span class="token keyword">private</span> <span class="token class-name">NacosServiceManager</span> nacosServiceManager<span class="token punctuation">;</span>
  
       <span class="token comment">// 根据服务标识（名称）获取服务实例</span>
       <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> group <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> <span class="token function">namingService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectInstances</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> group<span class="token punctuation">,</span>
                <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">hostToServiceInstanceList</span><span class="token punctuation">(</span>instances<span class="token punctuation">,</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
  
         <span class="token comment">// 获取所有服务的名称</span>
    	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
              <span class="token class-name">String</span> group <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token class-name">ListView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> <span class="token function">namingService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServicesOfServer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>
                  <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span> services<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
     
      <span class="token comment">// 省略其他代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NacosServiceDiscovery</code> 类提供的方法允许我们根据服务标识（serviceId）查询可用服务实例，这对于发起远程服务调用至关重要。</p><p>通过掌握 <code>NacosDiscoveryAutoConfiguration</code> 的工作原理，我们可以更好地理解 Nacos 在服务治理方面的自动装配过程。下一步，我们应当考虑在项目配置中添加适当的 Nacos 配置项，以确保服务发现和注册的顺畅进行。</p><h3 id="_3-3-添加-nacos-配置项" tabindex="-1"><a class="header-anchor" href="#_3-3-添加-nacos-配置项" aria-hidden="true">#</a> 3.3 添加 Nacos 配置项</h3><p>对于我们即将改造的 <code>coupon-template-impl</code> 服务，关键的一步是在 <code>application.properties</code> 中配置 Nacos 服务治理的相关参数。这些参数位于 <code>spring.cloud.nacos</code> 路径下，它们对于服务的注册、发现、健康检查等方面至关重要。以下是一些常用的 Nacos 配置参数及其说明：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">##########################################################################################################</span>
<span class="token comment"># 注册中心配置（Nacos）</span>
<span class="token comment">##########################################################################################################</span>
<span class="token comment"># 注册中心地址，可以配置多个地址，用逗号分隔</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">localhost:8848</span>
<span class="token comment"># 服务名称（默认为应用名称）</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.service</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.application.name}</span>
<span class="token comment"># 心跳间隔（客户端主动发送心跳给服务端的间隔时间，单位毫秒）</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.heart-beat-interval</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span>
<span class="token comment"># 心跳超时时间（客户端等待服务端响应心跳的超时时间，单位毫秒）</span>
<span class="token comment"># 注意：如果客户端在指定时间内没有接收到服务端的响应，则服务端将服务实例从注册中心移除。默认值为 15 秒。</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.heart-beat-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">15000</span>
<span class="token comment"># 元数据（可以由客户端向服务端注册元数据）</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.metadata.mydata</span><span class="token punctuation">=</span><span class="token value attr-value">mydata</span>
<span class="token comment"># 是否在启动时加载注册中心中的服务列表</span>
<span class="token comment"># 注意：推荐设置为 false，因为服务列表在启动时可能还没有准备好，这样客户端会从本地缓存中获取服务列表，而没有从注册中心获取最新的服务列表。</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.naming-load-cache-at-start</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment"># 命名空间（Nacos 通过命名空间来实现租户隔离或环境隔离（如：开发环境、测试环境、生产环境））</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token comment"># 集群名称（创建不同的集群时，可以给集群起个名字）</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.cluster-name</span><span class="token punctuation">=</span><span class="token value attr-value">Cluster-A</span>
<span class="token comment"># 服务分组（用于服务隔离，可为每个服务设置不同的分组）</span>
<span class="token comment"># 注意：如果两个服务存在上下游调用关系，则必须配置相同的分组，否则调用会失败。（上游：调用方，下游：被调用方）</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.group</span><span class="token punctuation">=</span><span class="token value attr-value">myGroup</span>
<span class="token comment"># 是否注册到注册中心（如果只是作为上游服务，则设置为 false，从而减少注册中心的负担和网络开销）</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.register-enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token comment"># 是否启用服务监听（类似长连接监听 Nacos 服务端的配置变化，当配置发生变化时，客户端可以感知到，从而实现动态刷新配置）</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.watch.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token comment"># 监听延迟（监听服务端配置变化的延迟时间，单位毫秒）</span>
<span class="token key attr-name">spring.cloud.nacos.discovery.watch-delay</span><span class="token punctuation">=</span><span class="token value attr-value">3000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解并正确配置 Nacos 的参数对于确保服务治理的平稳运行至关重要。以下表格详细介绍了每个配置项的用途和应用场景：</p><table><thead><tr><th>配置项</th><th>描述</th><th>应用场景</th></tr></thead><tbody><tr><td>server-addr</td><td>指定 Nacos 服务器地址。</td><td>服务注册、状态同步、服务发现等，通常配置为 Nacos 集群的 VIP。所谓 VIP 就是虚拟 IP 地址，虚拟 IP 背后指向了 Nacos 服务器集群。我们可以通过 Keepalived 结合 Nacos 集群模式实现虚拟 IP 的配置。</td></tr><tr><td>service</td><td>当前服务注册到 Nacos 的服务名称。</td><td>服务识别，默认使用 <code>spring.application.name</code>。</td></tr><tr><td>heart-beat-interval</td><td>定义服务向 Nacos 发送心跳的间隔时间（毫秒）。</td><td>维持服务实例的存活状态，避免被错误剔除。心跳包是 Client 告诉 Nacos 服务器自己还活着的唯一证据。</td></tr><tr><td>heart-beat-timeout</td><td>如果 Nacos 在此时间内未收到心跳，则认为服务不可用（毫秒）。</td><td>确定服务实例健康检测的超时界限。heart-beat-timeout（默认 15s）一定要比 heart-beat-interval 大，否则在注册服务的时候会抛出一个 NacosException 异常。</td></tr><tr><td>metadata</td><td>服务注册时附带的自定义元数据。</td><td>自定义服务治理策略，如实现金丝雀部署等高级功能。</td></tr><tr><td>namespace</td><td>用于逻辑隔离的命名空间，如不同环境间隔离。</td><td>实现多环境（开发、测试、生产）或多租户的服务治理。</td></tr><tr><td>group</td><td>服务分组，用于进一步隔离服务。</td><td>同一 namespace 同一 group 的服务可以互相调用，不同分组则隔离。如果当前服务没有指定 group，Nacos 会默认将其分配到 “default_group” 中。</td></tr></tbody></table>`,34),T=n("code",null,"heart-beat-interval",-1),P=n("code",null,"heart-beat-timeout",-1),A=n("code",null,"metadata",-1),B={href:"https://github.com/alibaba/spring-cloud-alibaba",target:"_blank",rel:"noopener noreferrer"},E={href:"https://nacos.io/",target:"_blank",rel:"noopener noreferrer"},L=e('<p>在上面 Nacos 的配置中，<code>Namespace</code> 和 <code>Group</code> 是两个经常被提及且至关重要的参数。虽然它们在功能上有所重叠，但在实际应用中各自扮演着独特的角色。</p><p><strong>Namespace：</strong> 主要用于逻辑隔离，具体应用如下：</p><ul><li><strong>环境隔离</strong>：通过设置不同的命名空间（如 <code>production</code>, <code>pre-production</code>, <code>dev</code>），我们可以确保服务仅在相同环境的命名空间中发现并调用彼此，从而有效分隔开发、测试和生产环境。</li><li><strong>多租户隔离</strong>：在多租户架构中，每个租户被分配一个独立的 <code>Namespace</code>，保障了不同租户之间的服务隔离和数据隔离。</li></ul><p><strong>Group：</strong> 则在服务治理中用得更为灵活，应用场景包括：</p><ul><li><strong>同租户环境隔离</strong>：在已通过 <code>Namespace</code> 实现租户隔离的基础上，<code>Group</code> 可用于进一步隔离同一租户内的不同环境。</li><li><strong>线上测试隔离</strong>：通过将上下游服务分配至特定的 <code>Group</code>（如 <code>group-A</code>），可以实现线上测试而不干扰正常的用户流量。</li><li><strong>物理单元封闭</strong>：在多机房部署的情况下，将同一物理单元的服务分配到同一个 <code>Group</code>，可以优化调用速度，实现单元内服务调用的封闭性。</li></ul><p>理解了 <code>Namespace</code> 和 <code>Group</code> 的具体用途后，下一步是启动 Nacos 注册中心并将服务（如 <code>coupon-template-serv</code> 和 <code>coupon-calculation-serv</code>）注册至 Nacos，以验证服务注册和服务发现的功能。</p><h3 id="_3-4-验证-nacos-服务注册功能" tabindex="-1"><a class="header-anchor" href="#_3-4-验证-nacos-服务注册功能" aria-hidden="true">#</a> 3.4 验证 Nacos 服务注册功能</h3><p>为了确保 Nacos 的服务注册功能正常工作，我们需要按照以下步骤进行操作和验证：</p><ol><li><p><strong>启动 Nacos 服务器</strong>：可以选择单机模式或集群模式启动 Nacos 服务器，具体选择取决于你的需求和资源。</p></li><li><p><strong>创建命名空间</strong>：在 Nacos 的 UI 中，创建 <code>production</code>、<code>pre-production</code> 和 <code>dev</code> 命名空间，分别代表生产、预发和开发环境。确保这些命名空间的 ID 与项目配置中的 <code>namespace</code> 属性保持一致。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-08-110059.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><strong>服务启动与注册</strong>：在本地启动 <code>coupon-template-impl</code> 和 <code>coupon-calculation-impl</code> 服务，并检查启动日志中是否有错误信息。如果服务启动正常，你应该能够在 Nacos 服务列表的相应命名空间标签下看到这两个服务。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-08-111118.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><hr>',10),q=e(`<ul><li>如果服务未能注册，首先检查启动日志中是否有注册请求输出。</li><li>检查异常日志，确定问题是否出自网络配置或参数设置。</li><li>确认是否所有 Nacos 服务器实例都通过集群模式同步注册表。</li><li>检查你的服务是否注册在正确的命名空间下。</li></ul><p>在此过程中，注意以下常见问题及其解决方法：</p><ul><li><strong>服务未注册</strong>：验证是否引入了 Nacos 依赖并且未手动关闭注册功能。</li><li><strong>异常信息</strong>：逐个分析异常日志，找出问题原因，如服务器地址配置错误。</li><li><strong>服务不可见</strong>：如果使用了多个 Nacos 实例，确认它们是否在集群模式下同步。</li><li><strong>命名空间问题</strong>：服务将仅出现在其注册的命名空间下，确认你查看了正确的命名空间。</li></ul><p>通过这些步骤，你将能够完成服务注册，并在需要时进行有效的问题排查。</p><h3 id="_3-5-阶段小结" tabindex="-1"><a class="header-anchor" href="#_3-5-阶段小结" aria-hidden="true">#</a> 3.5 阶段小结</h3><p>在本节中，我们成功实现了服务注册功能，将 <code>coupon-template-serv</code> 和 <code>coupon-calculation-serv</code> 服务集成到 Nacos Server 中。我们以 <code>NacosDiscoveryAutoConfiguration</code> 为出发点，探究了 Nacos 自动装配器的内在机制，这不仅展示了 Nacos 的集成过程，也揭示了 Spring Cloud 组件普遍采用的自动装配策略。</p><p>自动装配器在 Spring 生态中是一个核心概念，许多 Spring Cloud 组件都采用此策略无缝集成进项目。这种模式不仅是学习现有组件的枢纽，也是设计新组件时值得借鉴的典范。透过这些自动装配器，我们可以从宏观上把握组件的结构和功能，形成全面的理解。</p><p>深入学习一个框架不仅要会用它，更要理解其工作原理。“知其然，知其所以然”，是技术精进的正确路径，而在这个过程中，源码始终是最佳的指导老师。</p><blockquote><p>探索与实践：</p><p>现在，是时候测试你对自动装配器和 Spring Cloud 生态的理解了。当服务关闭时，服务的下线指令是如何被触发的呢？我邀请你不依赖网络搜索，而是通过追踪自动装配器的线索去深入源码，挑战自己的源码阅读和理解能力。这样的实践将加深你对 Spring Cloud 组件工作流程的洞察，锻炼你解决问题的本领。</p></blockquote><h2 id="_4-实施服务发现与远程调用" tabindex="-1"><a class="header-anchor" href="#_4-实施服务发现与远程调用" aria-hidden="true">#</a> 4.实施服务发现与远程调用</h2><p>继上一节将 <code>coupon-template-serv</code> 和 <code>coupon-calculation-serv</code> 服务成功注册至 Nacos Server 后，我们现在转向如何实现服务间的相互调用。这些服务目前作为服务提供者存在，独立无需相互通信。但为了完成一个完整的业务流程，我们需要一个服务消费者来调用这些注册的服务。</p><p>在本节中，我们将把 <code>coupon-customer-serv</code> 服务转化为这样一个消费者。它的任务是调用 <code>coupon-template-serv</code> 和 <code>coupon-calculation-serv</code> 服务。我们的目标是利用 Nacos 的服务发现功能来获取服务列表，并实现远程服务调用。</p><p>我们将讨论如下内容：</p><ol><li><strong>服务发现的实现</strong>：如何配置和使用 Nacos 的服务发现功能来检索服务列表。</li><li><strong>远程调用的执行</strong>：借助 Spring Webflux，了解如何发起异步非阻塞的远程服务调用。</li><li><strong>服务治理方案构建</strong>：如何整合上述知识点，搭建一套高效的基于 Nacos 的服务治理架构。</li></ol><p>在本节结束时，不仅能够掌握服务消费者的构建流程，还能够深入理解服务治理的核心概念，确保能够在任何需要服务发现和远程调用的场景下，迅速而有效地部署和管理我们的微服务。</p><h3 id="_4-1-配置-nacos-依赖项" tabindex="-1"><a class="header-anchor" href="#_4-1-配置-nacos-依赖项" aria-hidden="true">#</a> 4.1 配置 Nacos 依赖项</h3><p>要启动我们的服务消费者 <code>coupon-customer-serv</code>，第一步是确保项目中包含了必要的 Nacos 依赖项。这些依赖项将使我们能够使用 Nacos 服务发现、负载均衡以及发起响应式的 Web 请求。请在 <code>coupon-customer-impl</code> 子模块的 <code>pom.xml</code> 文件中加入以下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Nacos 服务发现组件 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 负载均衡组件 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- webflux 服务调用 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>spring-cloud-starter-alibaba-nacos-discovery</code>：用于服务的注册与发现。</li><li><code>spring-cloud-starter-loadbalancer</code>：Spring Cloud 的负载均衡组件，替代了 Netflix Ribbon。</li><li><code>spring-boot-starter-webflux</code>：Spring Boot 的响应式编程框架，用于实现异步的非阻塞远程服务调用。</li></ul><p>接着，确保项目结构清晰且服务之间的依赖关系合理。对于 <code>coupon-customer-impl</code>，需要执行以下操作：</p><ol><li><p><strong>移除实现层依赖</strong>：删除 <code>coupon-template-impl</code> 和 <code>coupon-calculation-impl</code> 模块的依赖项。</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-08-112645.png" style="zoom:33%;"></li><li><p><strong>增加接口层依赖</strong>：添加 <code>coupon-template-api</code> 和 <code>coupon-calculation-api</code> 接口层的依赖项。</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-08-112849.png" style="zoom:33%;"></li></ol><p>这样，我们就明确了服务之间的边界：<code>coupon-customer-serv</code> 作为独立的微服务，不会直接包含其他服务的实现代码，而是通过定义的接口与它们交互。这种模式不仅有助于服务的独立部署和运行，也便于我们使用 Nacos 实现服务的发现和负载均衡。</p><p>为了让 <code>coupon-customer-impl</code> 服务能够发现和调用其他微服务，你还需要进行以下配置和代码调整：</p><ol><li><p><strong>更新 <code>application.properties</code> 配置</strong>：将 <code>coupon-template-impl</code> 服务的 <code>spring.cloud.nacos</code> 配置项复制到 <code>coupon-customer-impl</code> 的 <code>application.properties</code> 文件中。确保更改服务名称参数 <code>spring.cloud.nacos.discovery.service</code> 为 <code>coupon-customer-impl</code>，以反映服务消费者的身份。</p></li><li><p><strong>解决编译错误</strong>：删除对 <code>coupon-template-impl</code> 和 <code>coupon-calculation-impl</code> 服务的本地依赖项后，<code>CouponCustomerServiceImpl</code> 中的代码需要调整。替换原有的 <code>@Autowire</code> 或 <code>@Resource</code> 注解方式，该方式原用于注入本地服务实现，现在再查看会出现编译错误。</p><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-08-113441.png" style="zoom:50%;"></li></ol><p>接下来，我们将实现远程服务调用。引入 WebClient 工具，替代本地服务注入的方式，实现对 <code>coupon-template-serv</code> 和 <code>coupon-calculation-serv</code> 的远程调用。这涉及到将现有的本地方法调用转换为创建远程请求的逻辑，涉及一定的重构工作。</p><p>通过这些步骤，你将能够将 <code>coupon-customer-impl</code> 服务从一个单体应用转变为一个真正的微服务消费者，能够通过 Nacos 服务发现机制发现并调用其他微服务。接下来，我们将着手实施这些变更，并确保服务消费者能够正确地与其他微服务进行交互。</p><h3 id="_4-2-配置-webclient-实现远程调用" tabindex="-1"><a class="header-anchor" href="#_4-2-配置-webclient-实现远程调用" aria-hidden="true">#</a> 4.2 配置 WebClient 实现远程调用</h3><p>WebClient 是在 Spring 5 中引入的，用于发起响应式的非阻塞式 HTTP 请求。要在 <code>coupon-customer-impl</code> 中使用 WebClient，你需要按照以下步骤进行：</p><ol><li><strong>创建配置类</strong>：在 <code>coupon-customer-impl</code> 子模块中创建 <code>WebfluxConfiguration</code> 配置类。通过 <code>@Configuration</code> 注解，这个类会被 Spring 容器识别为配置类。</li><li><strong>声明 WebClient.Builder Bean</strong>：使用 <code>@Bean</code> 注解定义一个 <code>WebClient.Builder</code> 的实例。加上 <code>@LoadBalanced</code> 注解以启用负载均衡功能。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Webflux 配置类
 *
 * <span class="token keyword">@author</span> javgo.cn
 * <span class="token keyword">@date</span> 2023/11/8
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebfluxConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">// 开启负载均衡</span>
    <span class="token keyword">public</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> <span class="token function">registerWebClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的注解解释如下：</p><ul><li><code>@Configuration</code>：指示 Spring 这是一个配置类，它内部声明的 Beans 会被自动扫描并加载。</li><li><code>@Bean</code>：表明方法 <code>webClientBuilder</code> 会返回一个对象，该对象应注册为容器中的 Bean。</li><li><code>@LoadBalanced</code>：开启 WebClient 的客户端负载均衡能力，确保请求被均匀地分配到服务实例上。</li></ul><p>有了 WebClient 的配置，我们就可以在任何需要的地方注入 <code>WebClient.Builder</code>，然后构建出 <code>WebClient</code> 实例来发起远程调用。</p><p>接下来，我们将重构 <code>CouponCustomerServiceImpl</code> 类，替换现有的本地服务调用为通过 WebClient 发起的远程服务调用。</p><h3 id="_4-3-实现-webclient-的远程服务调用" tabindex="-1"><a class="header-anchor" href="#_4-3-实现-webclient-的远程服务调用" aria-hidden="true">#</a> 4.3 实现 WebClient 的远程服务调用</h3><p>利用 <code>WebClient</code> 进行远程服务调用涉及到的关键步骤如下：⬇️</p><p><strong>注入 WebClient.Builder</strong>：在 <code>CouponCustomerServiceImpl</code> 类中注入 <code>WebfluxConfiguration</code> 中声明的 <code>WebClient.Builder</code> 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> webClientBuilder<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>调用远程服务接口</strong>：使用 <code>WebClient.Builder</code> 构建 <code>WebClient</code> 实例，并替换原有的本地服务调用。</p><p>下面是改造之前的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 加载优惠券模板信息</span>
<span class="token class-name">CouponTemplateInfo</span> templateInfo <span class="token operator">=</span> templateService<span class="token punctuation">.</span><span class="token function">loadTemplateInfo</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCouponTemplateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>远程接口调用的代码改造可以通过 WebClient 提供的 “链式编程” 轻松实现，下面是代码的完整实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 加载优惠券模板信息</span>
<span class="token class-name">CouponTemplateInfo</span> templateInfo <span class="token operator">=</span> webClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建 WebClient 实例</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指定 HTTP 方法为 GET</span>
        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://coupon-template-serv/template/getTemplate?id=&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getCouponTemplateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置请求 URI</span>
        <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 提取响应内容</span>
        <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">CouponTemplateInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 异步地将响应体转换为 CouponTemplateInfo 对象</span>
        <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻塞直到操作完成，返回结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个过程中，关键方法的作用如下：</p><ul><li><code>.get()</code>: 指定 HTTP 方法为 GET。</li><li><code>.uri(...)</code>: 设置请求的 URI，使用服务名称（coupon-template-serv）代替具体的服务地址。</li><li><code>.retrieve().bodyToMono(...)</code>: 提取并转换响应体为指定的对象类型。</li><li><code>.block()</code>: 以阻塞方式等待响应。</li></ul><p>Nacos 服务发现机制会为我们找到 <code>coupon-template-serv</code> 的可用实例，而 WebClient 则负责负载均衡，选择一个合适的实例发起调用。开发者不需要关心服务的具体位置，整个过程都是透明且无需感知的。</p><p>在使用 WebClient 进行远程服务调用时，我们常常关注的是响应体（Response Body），但有时候我们也需要访问 HTTP 响应中的其他信息，如状态码（Status Code）和响应头（Headers）。</p><p>WebClient 提供了灵活的方法来捕获这些信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResponseEntity</span><span class="token punctuation">&lt;</span><span class="token class-name">CouponTemplateInfo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> responseEntityMono <span class="token operator">=</span> webClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指定使用 GET 方法</span>
    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://coupon-template-serv/template/getTemplate?id=&quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getCouponTemplateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置请求 URI</span>
    <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span> <span class="token comment">// 指定期望接受的数据类型为 JSON</span>
    <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 提取响应内容</span>
    <span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token class-name">CouponTemplateInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取包含完整响应信息的 ResponseEntity 对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>.toEntity(...)</code> 方法允许我们获取一个 <code>ResponseEntity</code> 对象，它不仅包含响应体，还封装了完整的响应详情。</p><p>此外，WebClient 的链式调用风格是一种流行的 Builder 模式实现，它简化了复杂对象的构造过程。这种模式在众多开源项目中广泛使用，你也可以在自己的项目中通过 Lombok 的 <code>@Builder</code> 注解来实现类似的构建器模式。</p><p>在成功重构 <code>requestCoupon</code> 方法后，你已经具备了将其他方法中的本地调用转换为 WebClient 远程调用的能力。接下来，以同样的方法继续替换 <code>findCoupon</code> 和 <code>placeOrder</code> 中的调用。这些替换将进一步巩固你对于远程服务调用的理解和实践。</p><p>在微服务架构中，服务间调用可能需要处理各种数据结构。<code>findCoupon</code> 方法展示了如何使用 <code>WebClient</code> 进行复杂类型响应的远程调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">CouponTemplateInfo</span><span class="token punctuation">&gt;</span></span> templateInfoMap <span class="token operator">=</span> webClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 定义 GET 方法</span>
    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://coupon-template-serv/template/getBatch?ids=&quot;</span> <span class="token operator">+</span> templateIds<span class="token punctuation">)</span> <span class="token comment">// 设置请求 URI</span>
    <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 提取响应内容</span>
    <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParameterizedTypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">CouponTemplateInfo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 指定泛型响应类型</span>
    <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻塞直到操作完成，返回结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，<code>ParameterizedTypeReference</code> 被用来处理泛型的响应体，这是因为 Java 泛型在运行时有类型擦除，导致无法直接反序列化到特定的泛型类型。通过创建一个 <code>ParameterizedTypeReference</code> 的匿名内部类，我们提供了泛型类型信息，使 WebClient 能够正确地将响应体映射到一个 <code>Map&lt;Long, CouponTemplateInfo&gt;</code> 类型的对象。</p><p>这种方式对于处理复杂或非标准的 JSON 响应非常有用，尤其是当响应体的类型不是一个简单类而是一个泛型类型时。通过掌握 WebClient 和泛型处理，你将就能够灵活地调用任何返回复杂数据结构的服务。</p><p>在 <code>coupon-customer-impl</code> 服务中，<code>placeOrder</code> 方法负责调用 <code>coupon-calculation-serv</code> 服务以计算订单价格。以下是将本地调用改造为远程调用的过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ShoppingCart</span> checkoutInfo <span class="token operator">=</span> webClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 构建 WebClient 实例</span>
    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 指定 HTTP 方法为 POST</span>
    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://coupon-calculation-serv/calculator/checkout&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 设置请求 URI</span>
    <span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span> <span class="token comment">// 提供请求体内容</span>
    <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 提取响应内容</span>
    <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 异步地将响应体转换为 ShoppingCart 对象</span>
    <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻塞直到操作完成，返回结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同于之前的 GET 请求，这里的 POST 请求使用了 <code>.post()</code> 方法，并通过 <code>.bodyValue(order)</code> 传递了请求体数据。这是因为 POST 请求通常用于发送数据给服务器，而 GET 请求主要用于从服务器检索数据。</p><p>至此，我们已经完成了所有服务方法从本地调用到远程调用的改造。随着这些服务的顺利启动和在 Nacos 中的注册，你的微服务治理基础设施已经搭建完成。你应该能够在 Nacos 控制台中看到 <code>coupon-template-serv</code>、<code>coupon-calculation-serv</code> 和 <code>coupon-customer-serv</code> 三个服务的注册信息，无论是单机还是集群模式。如果你是以集群模式启动了多台 Nacos 服务器，那么即便你在实战项目中只配置了一个 Nacos URL，并没有使用虚拟 IP 搭建单独的集群地址，注册信息也会传播到 Nacos 集群中的所有节点。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-10-09-052119.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>掌握了如何使用 Nacos 进行服务治理后，下一步就是深入其底层实现。了解客户端如何从 Nacos Server 拉取服务注册信息，将使你对服务发现有更深层次的认识。这不仅增强了你的动手实践能力，也为你解锁更高级的微服务架构设计提供了宝贵的知识储备。</p><h3 id="_4-4-探索-nacos-客户端服务发现实现原理" tabindex="-1"><a class="header-anchor" href="#_4-4-探索-nacos-客户端服务发现实现原理" aria-hidden="true">#</a> 4.4 探索 Nacos 客户端服务发现实现原理</h3><p>Nacos 客户端同步服务注册信息的机制基于<strong>周期性的主动轮询</strong>——这是一种典型的<strong>客户端拉取（Pull）模式</strong>。客户端定时向 Nacos 服务器发出请求，拉取最新的服务列表，并将这些信息（地址列表、group 分组、cluster 名称等）更新到本地缓存中。</p><p>简单来说，Nacos Client 会开启一个本地的定时任务，每间隔一段时间，就尝试从 Nacos Server 查询服务注册表，并将最新的注册信息更新到本地。这个过程主要由 <code>UpdateTask</code> 类实现（实现了 <code>Runnable</code> 接口），该类是 <code>HostReactor</code> 的一个内部类，它负责周期性地查询服务信息并更新本地状态。负责拉取服务的任务是 UpdateTask 类，它实现了 Runnable 接口。Nacos 以开启线程的方式调用 <code>UpdateTask</code> 类中的 <code>run()</code> 方法，触发本地的服务发现查询请求。</p><figure><img src="https://javgo-images.oss-cn-beijing.aliyuncs.com/2023-11-08-122025.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以下是 <code>UpdateTask</code> 类的简化逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

     <span class="token comment">// ...省略代码...</span>
  
    <span class="token comment">// 由线程池周期性执行的 run() 方法，用于拉取服务信息</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认的下次执行延迟时间</span>
        <span class="token keyword">long</span> delayTime <span class="token operator">=</span> <span class="token constant">DEFAULT_DELAY</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
             <span class="token comment">// 尝试从本地缓存的 serviceInfoMap 中获取服务信息，包含服务器地址列表等</span>
            <span class="token class-name">ServiceInfo</span> serviceObj <span class="token operator">=</span> serviceInfoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ServiceInfo</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

             <span class="token comment">// 如果本地缓存为空，则说明是首次查询或信息已被清除，需从 Nacos 服务器拉取最新信息</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceObj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">updateService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

             <span class="token comment">// 如果服务信息的最后更新时间戳小于等于上次记录的更新时间，则需要进行更新</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceObj<span class="token punctuation">.</span><span class="token function">getLastRefTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> lastRefTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 客户端拉取（Pull）Nacos 服务器最新信息</span>
                <span class="token function">updateService</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 重新从缓存获取更新后的服务信息</span>
                serviceObj <span class="token operator">=</span> serviceInfoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ServiceInfo</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                 <span class="token comment">// 如果服务信息的最后更新时间戳较新，则表示 Nacos 服务通过主动 push 机制已被更新，只需刷新本地缓存</span>
                <span class="token function">refreshOnly</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

             <span class="token comment">// 更新记录的最后一次引用时间</span>
            lastRefTime <span class="token operator">=</span> serviceObj<span class="token punctuation">.</span><span class="token function">getLastRefTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 检查当前服务是否还有订阅者，若没有，则停止更新任务</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>notifier<span class="token punctuation">.</span><span class="token function">isSubscribed</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>futureMap
                    <span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">ServiceInfo</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// abort the update task</span>
                <span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;update task is stopped, service:&quot;</span> <span class="token operator">+</span> serviceName <span class="token operator">+</span> <span class="token string">&quot;, clusters:&quot;</span> <span class="token operator">+</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          
            <span class="token comment">// 检查服务信息中是否还有存活的主机列表，如果为空，则增加失败计数器（+1）</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>serviceObj<span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">incFailCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
             
            <span class="token comment">// 设置下一次执行任务的延迟时间，通常取决于服务信息中指定的缓存周期</span>
            delayTime <span class="token operator">=</span> serviceObj<span class="token punctuation">.</span><span class="token function">getCacheMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 重置失败计数器（0）</span>
            <span class="token function">resetFailCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在捕获异常时增加失败计数器（+1），并记录警告日志</span>
            <span class="token function">incFailCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">NAMING_LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[NA] failed to update serviceName: &quot;</span> <span class="token operator">+</span> serviceName<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
             <span class="token comment">// 计划下一次执行任务的时间，这里使用了指数退避策略，失败次数越多，间隔时间越长</span>
            executor<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>delayTime <span class="token operator">&lt;&lt;</span> failCount<span class="token punctuation">,</span> <span class="token constant">DEFAULT_DELAY</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>UpdateTask</code> 的源码中，通过调用 <code>updateService(serviceName, clusters)</code> 方法实现了服务查询和本地注册表更新。在每次执行结束时，<code>UpdateTask</code> 会计划自己的下一次执行，保证服务注册信息的持续更新。它是客户端与服务端之间同步状态的关键环节。具体来说就是在结尾处它通过 <code>finally</code> 代码块设置了下一次 <code>executor</code> 查询的时间，周而复始循环往复。</p><blockquote><p>为了进一步理解这个机制，你可以探索以下问题：</p><ol><li><code>UpdateTask</code> 是如何被初始化和调度的？</li><li>它是由哪个类负责首次触发？</li></ol></blockquote><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5.总结</h2><p>我们已经成功完成了基于 Nacos 的服务治理链路搭建。在这个过程中，我们实现了：</p><ul><li><strong>服务注册</strong>：服务提供者如何在 Nacos 中注册自己，以便被发现。</li><li><strong>服务发现</strong>：服务消费者如何利用 Nacos 发现注册的服务。</li><li><strong>远程调用</strong>：如何使用 WebClient 在服务消费者中发起对服务提供者的远程调用。</li></ul><p>这些步骤构成了微服务架构中服务治理的核心链路，确保服务间可以相互发现并通信。</p><blockquote><p>思考 🤔：</p><p>当服务节点遇到问题，比如网络不稳定或资源限制，它们可能无法正常响应请求。这时候，Nacos 如何检测并处理这些故障节点呢？</p><p>这个问题关系到服务治理中的一个关键环节——故障检测和服务下线。Nacos 提供了几种机制来实现这一功能，包括健康检查、心跳机制和服务保护规则。例如，健康检查可以帮助 Nacos 监控服务实例的状态，而心跳机制可以确定一个服务是否仍然存活。</p><ul><li><strong>健康检查</strong>：周期性检测服务实例的健康状态。</li><li><strong>心跳机制</strong>：服务实例定时向注册中心发送心跳，证明自己的可用性。</li><li><strong>服务保护规则</strong>：在检测到异常时，自动隔离故障服务节点。</li></ul><p>鼓励你探索 Nacos 的故障处理文档，理解这些机制是如何工作的。这将加深你对微服务稳定性和可靠性保障措施的理解。</p></blockquote>`,75);function M(D,R){const t=o("ExternalLinkIcon"),c=o("center");return i(),l("div",null,[d,n("blockquote",null,[n("p",null,[s("对 Open API 的更多细节，可以访问 "),n("a",k,[s("Nacos 官方网站"),a(t)]),s(" 以获取丰富的 API 文档。")])]),g,n("ol",null,[n("li",null,[n("p",null,[s("访问 Alibaba Nacos 在 GitHub 上的 "),n("a",v,[s("发布页面"),a(t)]),s("。")])]),m]),b,n("ul",null,[h,n("li",null,[f,s("：研究 "),n("a",y,[s("Nacos 官方文档"),a(t)]),s("，增强对 Nacos 架构和功能特性的理解。")])]),N,n("ul",null,[n("li",null,[n("p",null,[S,s("：可以在 "),n("a",C,[s("Spring Cloud 官方文档"),a(t)]),s("中找到 Spring Cloud 支持的 Spring Boot 版本区间。")]),_]),n("li",null,[n("p",null,[I,s("：可通过 Spring Cloud Alibaba 的 "),n("a",x,[s("GitHub wiki页"),a(t)]),s("进行查询。")]),j])]),w,n("blockquote",null,[n("p",null,[s("⚠️ 注意：心跳间隔（"),T,s("）必须小于心跳超时时间（"),P,s("），否则可能导致服务实例被错误地从注册中心移除。元数据（"),A,s("）提供了灵活的自定义配置，可用于满足特定场景的需求，例如在服务注册时标注服务版本以实现蓝绿部署。（为了更全面地了解 Nacos 的配置选项，建议查阅 "),n("a",B,[s("Nacos 的官方 GitHub"),a(t)]),s(" 或访问 "),n("a",E,[s("Nacos 项目主页"),a(t)]),s(" 获取最新信息。）")])]),L,a(c,null,{default:u(()=>[s("问题排查思路：")]),_:1}),q])}const G=p(r,[["render",M],["__file","05-cloud-服务治理.html.vue"]]);export{G as default};
